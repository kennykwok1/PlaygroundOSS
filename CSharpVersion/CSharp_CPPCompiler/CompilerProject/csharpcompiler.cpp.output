State 515 contains 1 reduce/reduce conflict.
State 793 contains 1 shift/reduce conflict.

Grammar
rule 1    literal -> boolean_literal
rule 2    literal -> INTEGER_LITERAL
rule 3    literal -> REAL_LITERAL
rule 4    literal -> CHARACTER_LITERAL
rule 5    literal -> STRING_LITERAL
rule 6    literal -> NULL_LITERAL
rule 7    boolean_literal -> TRUE
rule 8    boolean_literal -> FALSE
rule 9    namespace_name -> qualified_identifier
rule 10   type_name -> qualified_identifier
rule 11   type -> non_array_type
rule 12   type -> array_type
rule 13   non_array_type -> simple_type
rule 14   non_array_type -> type_name
rule 15   simple_type -> primitive_type
rule 16   simple_type -> class_type
rule 17   simple_type -> pointer_type
rule 18   primitive_type -> numeric_type
rule 19   primitive_type -> BOOL
rule 20   numeric_type -> integral_type
rule 21   numeric_type -> floating_point_type
rule 22   numeric_type -> DECIMAL
rule 23   integral_type -> SBYTE
rule 24   integral_type -> BYTE
rule 25   integral_type -> SHORT
rule 26   integral_type -> USHORT
rule 27   integral_type -> INT
rule 28   integral_type -> UINT
rule 29   integral_type -> LONG
rule 30   integral_type -> ULONG
rule 31   integral_type -> CHAR
rule 32   floating_point_type -> FLOAT
rule 33   floating_point_type -> DOUBLE
rule 34   class_type -> OBJECT
rule 35   class_type -> STRING
rule 36   pointer_type -> type '*'
rule 37   pointer_type -> VOID '*'
rule 38   array_type -> array_type rank_specifier
rule 39   array_type -> simple_type rank_specifier
rule 40   array_type -> qualified_identifier rank_specifier
rule 41   rank_specifiers_opt ->		/* empty */
rule 42   rank_specifiers_opt -> rank_specifier rank_specifiers_opt
rule 43   rank_specifier -> RANK_SPECIFIER
rule 44   variable_reference -> expression
rule 45   argument_list -> argument
rule 46   argument_list -> argument_list COMMA argument
rule 47   argument -> expression
rule 48   argument -> REF variable_reference
rule 49   argument -> OUT variable_reference
rule 50   primary_expression -> parenthesized_expression
rule 51   primary_expression -> primary_expression_no_parenthesis
rule 52   primary_expression_no_parenthesis -> literal
rule 53   primary_expression_no_parenthesis -> array_creation_expression
rule 54   primary_expression_no_parenthesis -> member_access
rule 55   primary_expression_no_parenthesis -> invocation_expression
rule 56   primary_expression_no_parenthesis -> element_access
rule 57   primary_expression_no_parenthesis -> this_access
rule 58   primary_expression_no_parenthesis -> base_access
rule 59   primary_expression_no_parenthesis -> new_expression
rule 60   primary_expression_no_parenthesis -> typeof_expression
rule 61   primary_expression_no_parenthesis -> sizeof_expression
rule 62   primary_expression_no_parenthesis -> checked_expression
rule 63   primary_expression_no_parenthesis -> unchecked_expression
rule 64   parenthesized_expression -> '(' expression ')'
rule 65   member_access -> primary_expression '.' IDENTIFIER
rule 66   member_access -> primitive_type '.' IDENTIFIER
rule 67   member_access -> class_type '.' IDENTIFIER
rule 68   invocation_expression -> primary_expression_no_parenthesis '(' argument_list_opt ')'
rule 69   invocation_expression -> qualified_identifier '(' argument_list_opt ')'
rule 70   argument_list_opt ->		/* empty */
rule 71   argument_list_opt -> argument_list
rule 72   element_access -> primary_expression LEFT_BRACKET expression_list RIGHT_BRACKET
rule 73   element_access -> qualified_identifier LEFT_BRACKET expression_list RIGHT_BRACKET
rule 74   expression_list_opt ->		/* empty */
rule 75   expression_list_opt -> expression_list
rule 76   expression_list -> expression
rule 77   expression_list -> expression_list COMMA expression
rule 78   this_access -> THIS
rule 79   base_access -> BASE '.' IDENTIFIER
rule 80   base_access -> BASE LEFT_BRACKET expression_list RIGHT_BRACKET
rule 81   post_increment_expression -> postfix_expression PLUSPLUS
rule 82   post_decrement_expression -> postfix_expression MINUSMINUS
rule 83   new_expression -> object_creation_expression
rule 84   object_creation_expression -> NEW type '(' argument_list_opt ')'
rule 85   array_creation_expression -> NEW non_array_type LEFT_BRACKET expression_list RIGHT_BRACKET rank_specifiers_opt array_initializer_opt
rule 86   array_creation_expression -> NEW array_type array_initializer
rule 87   array_initializer_opt ->		/* empty */
rule 88   array_initializer_opt -> array_initializer
rule 89   typeof_expression -> TYPEOF '(' type ')'
rule 90   typeof_expression -> TYPEOF '(' VOID ')'
rule 91   checked_expression -> CHECKED '(' expression ')'
rule 92   unchecked_expression -> UNCHECKED '(' expression ')'
rule 93   pointer_member_access -> postfix_expression ARROW IDENTIFIER
rule 94   addressof_expression -> '&' unary_expression
rule 95   sizeof_expression -> SIZEOF '(' type ')'
rule 96   postfix_expression -> primary_expression
rule 97   postfix_expression -> qualified_identifier
rule 98   postfix_expression -> post_increment_expression
rule 99   postfix_expression -> post_decrement_expression
rule 100  postfix_expression -> pointer_member_access
rule 101  unary_expression_not_plusminus -> postfix_expression
rule 102  unary_expression_not_plusminus -> '!' unary_expression
rule 103  unary_expression_not_plusminus -> '~' unary_expression
rule 104  unary_expression_not_plusminus -> cast_expression
rule 105  pre_increment_expression -> PLUSPLUS unary_expression
rule 106  pre_decrement_expression -> MINUSMINUS unary_expression
rule 107  unary_expression -> unary_expression_not_plusminus
rule 108  unary_expression -> '+' unary_expression
rule 109  unary_expression -> '-' unary_expression
rule 110  unary_expression -> '*' unary_expression
rule 111  unary_expression -> pre_increment_expression
rule 112  unary_expression -> pre_decrement_expression
rule 113  unary_expression -> addressof_expression
rule 114  cast_expression -> '(' expression ')' unary_expression_not_plusminus
rule 115  cast_expression -> '(' multiplicative_expression '*' ')' unary_expression
rule 116  cast_expression -> '(' qualified_identifier rank_specifier type_quals_opt ')' unary_expression
rule 117  cast_expression -> '(' primitive_type type_quals_opt ')' unary_expression
rule 118  cast_expression -> '(' class_type type_quals_opt ')' unary_expression
rule 119  cast_expression -> '(' VOID type_quals_opt ')' unary_expression
rule 120  type_quals_opt ->		/* empty */
rule 121  type_quals_opt -> type_quals
rule 122  type_quals -> type_qual
rule 123  type_quals -> type_quals type_qual
rule 124  type_qual -> rank_specifier
rule 125  type_qual -> '*'
rule 126  multiplicative_expression -> unary_expression
rule 127  multiplicative_expression -> multiplicative_expression '*' unary_expression
rule 128  multiplicative_expression -> multiplicative_expression '/' unary_expression
rule 129  multiplicative_expression -> multiplicative_expression '%' unary_expression
rule 130  additive_expression -> multiplicative_expression
rule 131  additive_expression -> additive_expression '+' multiplicative_expression
rule 132  additive_expression -> additive_expression '-' multiplicative_expression
rule 133  shift_expression -> additive_expression
rule 134  shift_expression -> shift_expression LTLT additive_expression
rule 135  shift_expression -> shift_expression GTGT additive_expression
rule 136  relational_expression -> shift_expression
rule 137  relational_expression -> relational_expression '<' shift_expression
rule 138  relational_expression -> relational_expression '>' shift_expression
rule 139  relational_expression -> relational_expression LEQ shift_expression
rule 140  relational_expression -> relational_expression GEQ shift_expression
rule 141  relational_expression -> relational_expression IS type
rule 142  relational_expression -> relational_expression AS type
rule 143  equality_expression -> relational_expression
rule 144  equality_expression -> equality_expression EQEQ relational_expression
rule 145  equality_expression -> equality_expression NOTEQ relational_expression
rule 146  and_expression -> equality_expression
rule 147  and_expression -> and_expression '&' equality_expression
rule 148  exclusive_or_expression -> and_expression
rule 149  exclusive_or_expression -> exclusive_or_expression '^' and_expression
rule 150  inclusive_or_expression -> exclusive_or_expression
rule 151  inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression
rule 152  conditional_and_expression -> inclusive_or_expression
rule 153  conditional_and_expression -> conditional_and_expression ANDAND inclusive_or_expression
rule 154  conditional_or_expression -> conditional_and_expression
rule 155  conditional_or_expression -> conditional_or_expression OROR conditional_and_expression
rule 156  conditional_expression -> conditional_or_expression
rule 157  conditional_expression -> conditional_or_expression '?' expression ':' expression
rule 158  assignment -> unary_expression assignment_operator expression
rule 159  assignment_operator -> '='
rule 160  assignment_operator -> PLUSEQ
rule 161  assignment_operator -> MINUSEQ
rule 162  assignment_operator -> STAREQ
rule 163  assignment_operator -> DIVEQ
rule 164  assignment_operator -> MODEQ
rule 165  assignment_operator -> XOREQ
rule 166  assignment_operator -> ANDEQ
rule 167  assignment_operator -> OREQ
rule 168  assignment_operator -> GTGTEQ
rule 169  assignment_operator -> LTLTEQ
rule 170  expression -> conditional_expression
rule 171  expression -> assignment
rule 172  constant_expression -> expression
rule 173  boolean_expression -> expression
rule 174  statement -> labeled_statement
rule 175  statement -> declaration_statement
rule 176  statement -> embedded_statement
rule 177  embedded_statement -> block
rule 178  embedded_statement -> empty_statement
rule 179  embedded_statement -> expression_statement
rule 180  embedded_statement -> selection_statement
rule 181  embedded_statement -> iteration_statement
rule 182  embedded_statement -> jump_statement
rule 183  embedded_statement -> try_statement
rule 184  embedded_statement -> checked_statement
rule 185  embedded_statement -> unchecked_statement
rule 186  embedded_statement -> lock_statement
rule 187  embedded_statement -> using_statement
rule 188  embedded_statement -> unsafe_statement
rule 189  embedded_statement -> fixed_statement
rule 190  block -> '{' statement_list_opt '}'
rule 191  statement_list_opt ->		/* empty */
rule 192  statement_list_opt -> statement_list
rule 193  statement_list -> statement
rule 194  statement_list -> statement_list statement
rule 195  empty_statement -> ';'
rule 196  labeled_statement -> IDENTIFIER ':' statement
rule 197  declaration_statement -> local_variable_declaration ';'
rule 198  declaration_statement -> local_constant_declaration ';'
rule 199  local_variable_declaration -> type variable_declarators
rule 200  variable_declarators -> variable_declarator
rule 201  variable_declarators -> variable_declarators COMMA variable_declarator
rule 202  variable_declarator -> IDENTIFIER
rule 203  variable_declarator -> IDENTIFIER '=' variable_initializer
rule 204  variable_initializer -> expression
rule 205  variable_initializer -> array_initializer
rule 206  variable_initializer -> stackalloc_initializer
rule 207  stackalloc_initializer -> STACKALLOC type LEFT_BRACKET expression RIGHT_BRACKET
rule 208  local_constant_declaration -> CONST type constant_declarators
rule 209  constant_declarators -> constant_declarator
rule 210  constant_declarators -> constant_declarators COMMA constant_declarator
rule 211  constant_declarator -> IDENTIFIER '=' constant_expression
rule 212  expression_statement -> statement_expression ';'
rule 213  statement_expression -> invocation_expression
rule 214  statement_expression -> object_creation_expression
rule 215  statement_expression -> assignment
rule 216  statement_expression -> post_increment_expression
rule 217  statement_expression -> post_decrement_expression
rule 218  statement_expression -> pre_increment_expression
rule 219  statement_expression -> pre_decrement_expression
rule 220  selection_statement -> if_statement
rule 221  selection_statement -> switch_statement
rule 222  if_statement -> IF '(' boolean_expression ')' embedded_statement
rule 223  if_statement -> IF '(' boolean_expression ')' embedded_statement ELSE embedded_statement
rule 224  switch_statement -> SWITCH '(' expression ')' switch_block
rule 225  switch_block -> '{' switch_sections_opt '}'
rule 226  switch_sections_opt ->		/* empty */
rule 227  switch_sections_opt -> switch_sections
rule 228  switch_sections -> switch_section
rule 229  switch_sections -> switch_sections switch_section
rule 230  switch_section -> switch_labels statement_list
rule 231  switch_labels -> switch_label
rule 232  switch_labels -> switch_labels switch_label
rule 233  switch_label -> CASE constant_expression ':'
rule 234  switch_label -> DEFAULT ':'
rule 235  iteration_statement -> while_statement
rule 236  iteration_statement -> do_statement
rule 237  iteration_statement -> for_statement
rule 238  iteration_statement -> foreach_statement
rule 239  unsafe_statement -> UNSAFE block
rule 240  while_statement -> WHILE '(' boolean_expression ')' embedded_statement
rule 241  do_statement -> DO embedded_statement WHILE '(' boolean_expression ')' ';'
rule 242  for_statement -> FOR '(' for_initializer_opt ';' for_condition_opt ';' for_iterator_opt ')' embedded_statement
rule 243  for_initializer_opt ->		/* empty */
rule 244  for_initializer_opt -> for_initializer
rule 245  for_condition_opt ->		/* empty */
rule 246  for_condition_opt -> for_condition
rule 247  for_iterator_opt ->		/* empty */
rule 248  for_iterator_opt -> for_iterator
rule 249  for_initializer -> local_variable_declaration
rule 250  for_initializer -> statement_expression_list
rule 251  for_condition -> boolean_expression
rule 252  for_iterator -> statement_expression_list
rule 253  statement_expression_list -> statement_expression
rule 254  statement_expression_list -> statement_expression_list COMMA statement_expression
rule 255  foreach_statement -> FOREACH '(' type IDENTIFIER IN expression ')' embedded_statement
rule 256  jump_statement -> break_statement
rule 257  jump_statement -> continue_statement
rule 258  jump_statement -> goto_statement
rule 259  jump_statement -> return_statement
rule 260  jump_statement -> throw_statement
rule 261  break_statement -> BREAK ';'
rule 262  continue_statement -> CONTINUE ';'
rule 263  goto_statement -> GOTO IDENTIFIER ';'
rule 264  goto_statement -> GOTO CASE constant_expression ';'
rule 265  goto_statement -> GOTO DEFAULT ';'
rule 266  return_statement -> RETURN expression_opt ';'
rule 267  expression_opt ->		/* empty */
rule 268  expression_opt -> expression
rule 269  throw_statement -> THROW expression_opt ';'
rule 270  try_statement -> TRY block catch_clauses
rule 271  try_statement -> TRY block finally_clause
rule 272  try_statement -> TRY block catch_clauses finally_clause
rule 273  catch_clauses -> catch_clause
rule 274  catch_clauses -> catch_clauses catch_clause
rule 275  catch_clause -> CATCH '(' class_type identifier_opt ')' block
rule 276  catch_clause -> CATCH '(' type_name identifier_opt ')' block
rule 277  catch_clause -> CATCH block
rule 278  identifier_opt ->		/* empty */
rule 279  identifier_opt -> IDENTIFIER
rule 280  finally_clause -> FINALLY block
rule 281  checked_statement -> CHECKED block
rule 282  unchecked_statement -> UNCHECKED block
rule 283  lock_statement -> LOCK '(' expression ')' embedded_statement
rule 284  using_statement -> USING '(' resource_acquisition ')' embedded_statement
rule 285  resource_acquisition -> local_variable_declaration
rule 286  resource_acquisition -> expression
rule 287  fixed_statement -> FIXED '(' type fixed_pointer_declarators ')' embedded_statement
rule 288  fixed_pointer_declarators -> fixed_pointer_declarator
rule 289  fixed_pointer_declarators -> fixed_pointer_declarators COMMA fixed_pointer_declarator
rule 290  fixed_pointer_declarator -> IDENTIFIER '=' expression
rule 291  compilation_unit -> using_directives_opt attributes_opt
rule 292  compilation_unit -> using_directives_opt namespace_member_declarations
rule 293  using_directives_opt ->		/* empty */
rule 294  using_directives_opt -> using_directives
rule 295  attributes_opt ->		/* empty */
rule 296  attributes_opt -> attributes
rule 297  namespace_member_declarations_opt ->		/* empty */
rule 298  namespace_member_declarations_opt -> namespace_member_declarations
rule 299  namespace_declaration -> attributes_opt NAMESPACE qualified_identifier namespace_body comma_opt
rule 300  comma_opt ->		/* empty */
rule 301  comma_opt -> ';'
rule 302  qualified_identifier -> IDENTIFIER
rule 303  qualified_identifier -> qualifier IDENTIFIER
rule 304  qualifier -> IDENTIFIER '.'
rule 305  qualifier -> qualifier IDENTIFIER '.'
rule 306  namespace_body -> '{' using_directives_opt namespace_member_declarations_opt '}'
rule 307  using_directives -> using_directive
rule 308  using_directives -> using_directives using_directive
rule 309  using_directive -> using_alias_directive
rule 310  using_directive -> using_namespace_directive
rule 311  using_alias_directive -> USING IDENTIFIER '=' qualified_identifier ';'
rule 312  using_namespace_directive -> USING namespace_name ';'
rule 313  namespace_member_declarations -> namespace_member_declaration
rule 314  namespace_member_declarations -> namespace_member_declarations namespace_member_declaration
rule 315  namespace_member_declaration -> namespace_declaration
rule 316  namespace_member_declaration -> type_declaration
rule 317  type_declaration -> class_declaration
rule 318  type_declaration -> struct_declaration
rule 319  type_declaration -> interface_declaration
rule 320  type_declaration -> enum_declaration
rule 321  type_declaration -> delegate_declaration
rule 322  modifiers_opt ->		/* empty */
rule 323  modifiers_opt -> modifiers
rule 324  modifiers -> modifier
rule 325  modifiers -> modifiers modifier
rule 326  modifier -> ABSTRACT
rule 327  modifier -> EXTERN
rule 328  modifier -> INTERNAL
rule 329  modifier -> NEW
rule 330  modifier -> OVERRIDE
rule 331  modifier -> PRIVATE
rule 332  modifier -> PROTECTED
rule 333  modifier -> PUBLIC
rule 334  modifier -> READONLY
rule 335  modifier -> SEALED
rule 336  modifier -> STATIC
rule 337  modifier -> UNSAFE
rule 338  modifier -> VIRTUAL
rule 339  modifier -> VOLATILE
rule 340  class_declaration -> attributes_opt modifiers_opt CLASS IDENTIFIER class_base_opt class_body comma_opt
rule 341  class_base_opt ->		/* empty */
rule 342  class_base_opt -> class_base
rule 343  class_base -> ':' class_type
rule 344  class_base -> ':' interface_type_list
rule 345  class_base -> ':' class_type COMMA interface_type_list
rule 346  interface_type_list -> type_name
rule 347  interface_type_list -> interface_type_list COMMA type_name
rule 348  class_body -> '{' class_member_declarations_opt '}'
rule 349  class_member_declarations_opt ->		/* empty */
rule 350  class_member_declarations_opt -> class_member_declarations
rule 351  class_member_declarations -> class_member_declaration
rule 352  class_member_declarations -> class_member_declarations class_member_declaration
rule 353  class_member_declaration -> constant_declaration
rule 354  class_member_declaration -> field_declaration
rule 355  class_member_declaration -> method_declaration
rule 356  class_member_declaration -> property_declaration
rule 357  class_member_declaration -> event_declaration
rule 358  class_member_declaration -> indexer_declaration
rule 359  class_member_declaration -> operator_declaration
rule 360  class_member_declaration -> constructor_declaration
rule 361  class_member_declaration -> destructor_declaration
rule 362  class_member_declaration -> type_declaration
rule 363  constant_declaration -> attributes_opt modifiers_opt CONST type constant_declarators ';'
rule 364  field_declaration -> attributes_opt modifiers_opt type variable_declarators ';'
rule 365  method_declaration -> method_header method_body
rule 366  method_header -> attributes_opt modifiers_opt type qualified_identifier '(' formal_parameter_list_opt ')'
rule 367  method_header -> attributes_opt modifiers_opt VOID qualified_identifier '(' formal_parameter_list_opt ')'
rule 368  formal_parameter_list_opt ->		/* empty */
rule 369  formal_parameter_list_opt -> formal_parameter_list
rule 370  return_type -> type
rule 371  return_type -> VOID
rule 372  method_body -> block
rule 373  method_body -> ';'
rule 374  formal_parameter_list -> formal_parameter
rule 375  formal_parameter_list -> formal_parameter_list COMMA formal_parameter
rule 376  formal_parameter -> fixed_parameter
rule 377  formal_parameter -> parameter_array
rule 378  fixed_parameter -> attributes_opt parameter_modifier_opt type IDENTIFIER
rule 379  parameter_modifier_opt ->		/* empty */
rule 380  parameter_modifier_opt -> REF
rule 381  parameter_modifier_opt -> OUT
rule 382  parameter_array -> attributes_opt PARAMS type IDENTIFIER
rule 383  property_declaration -> attributes_opt modifiers_opt type qualified_identifier ENTER_getset '{' accessor_declarations '}' EXIT_getset
rule 384  accessor_declarations -> get_accessor_declaration set_accessor_declaration_opt
rule 385  accessor_declarations -> set_accessor_declaration get_accessor_declaration_opt
rule 386  set_accessor_declaration_opt ->		/* empty */
rule 387  set_accessor_declaration_opt -> set_accessor_declaration
rule 388  get_accessor_declaration_opt ->		/* empty */
rule 389  get_accessor_declaration_opt -> get_accessor_declaration
rule 390  get_accessor_declaration -> attributes_opt GET EXIT_getset accessor_body ENTER_getset
rule 391  set_accessor_declaration -> attributes_opt SET EXIT_getset accessor_body ENTER_getset
rule 392  accessor_body -> block
rule 393  accessor_body -> ';'
rule 394  event_declaration -> attributes_opt modifiers_opt EVENT type variable_declarators ';'
rule 395  event_declaration -> attributes_opt modifiers_opt EVENT type qualified_identifier ENTER_accessor_decl '{' event_accessor_declarations '}' EXIT_accessor_decl
rule 396  event_accessor_declarations -> add_accessor_declaration remove_accessor_declaration
rule 397  event_accessor_declarations -> remove_accessor_declaration add_accessor_declaration
rule 398  add_accessor_declaration -> attributes_opt ADD EXIT_accessor_decl block ENTER_accessor_decl
rule 399  remove_accessor_declaration -> attributes_opt REMOVE EXIT_accessor_decl block ENTER_accessor_decl
rule 400  indexer_declaration -> attributes_opt modifiers_opt indexer_declarator ENTER_getset '{' accessor_declarations '}' EXIT_getset
rule 401  indexer_declarator -> type THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET
rule 402  indexer_declarator -> type qualified_this LEFT_BRACKET formal_parameter_list RIGHT_BRACKET
rule 403  qualified_this -> qualifier THIS
rule 404  operator_declaration -> attributes_opt modifiers_opt operator_declarator operator_body
rule 405  operator_declarator -> overloadable_operator_declarator
rule 406  operator_declarator -> conversion_operator_declarator
rule 407  overloadable_operator_declarator -> type OPERATOR overloadable_operator '(' type IDENTIFIER ')'
rule 408  overloadable_operator_declarator -> type OPERATOR overloadable_operator '(' type IDENTIFIER COMMA type IDENTIFIER ')'
rule 409  overloadable_operator -> '+'
rule 410  overloadable_operator -> '-'
rule 411  overloadable_operator -> '!'
rule 412  overloadable_operator -> '~'
rule 413  overloadable_operator -> PLUSPLUS
rule 414  overloadable_operator -> MINUSMINUS
rule 415  overloadable_operator -> TRUE
rule 416  overloadable_operator -> FALSE
rule 417  overloadable_operator -> '*'
rule 418  overloadable_operator -> '/'
rule 419  overloadable_operator -> '%'
rule 420  overloadable_operator -> '&'
rule 421  overloadable_operator -> '|'
rule 422  overloadable_operator -> '^'
rule 423  overloadable_operator -> LTLT
rule 424  overloadable_operator -> GTGT
rule 425  overloadable_operator -> EQEQ
rule 426  overloadable_operator -> NOTEQ
rule 427  overloadable_operator -> '>'
rule 428  overloadable_operator -> '<'
rule 429  overloadable_operator -> GEQ
rule 430  overloadable_operator -> LEQ
rule 431  conversion_operator_declarator -> IMPLICIT OPERATOR type '(' type IDENTIFIER ')'
rule 432  conversion_operator_declarator -> EXPLICIT OPERATOR type '(' type IDENTIFIER ')'
rule 433  constructor_declaration -> attributes_opt modifiers_opt constructor_declarator constructor_body
rule 434  constructor_declarator -> IDENTIFIER '(' formal_parameter_list_opt ')' constructor_initializer_opt
rule 435  constructor_initializer_opt ->		/* empty */
rule 436  constructor_initializer_opt -> constructor_initializer
rule 437  constructor_initializer -> ':' BASE '(' argument_list_opt ')'
rule 438  constructor_initializer -> ':' THIS '(' argument_list_opt ')'
rule 439  destructor_declaration -> attributes_opt modifiers_opt '~' IDENTIFIER '(' ')' block
rule 440  operator_body -> block
rule 441  operator_body -> ';'
rule 442  constructor_body -> block
rule 443  constructor_body -> ';'
rule 444  struct_declaration -> attributes_opt modifiers_opt STRUCT IDENTIFIER struct_interfaces_opt struct_body comma_opt
rule 445  struct_interfaces_opt ->		/* empty */
rule 446  struct_interfaces_opt -> struct_interfaces
rule 447  struct_interfaces -> ':' interface_type_list
rule 448  struct_body -> '{' struct_member_declarations_opt '}'
rule 449  struct_member_declarations_opt ->		/* empty */
rule 450  struct_member_declarations_opt -> struct_member_declarations
rule 451  struct_member_declarations -> struct_member_declaration
rule 452  struct_member_declarations -> struct_member_declarations struct_member_declaration
rule 453  struct_member_declaration -> constant_declaration
rule 454  struct_member_declaration -> field_declaration
rule 455  struct_member_declaration -> method_declaration
rule 456  struct_member_declaration -> property_declaration
rule 457  struct_member_declaration -> event_declaration
rule 458  struct_member_declaration -> indexer_declaration
rule 459  struct_member_declaration -> operator_declaration
rule 460  struct_member_declaration -> constructor_declaration
rule 461  struct_member_declaration -> type_declaration
rule 462  array_initializer -> '{' variable_initializer_list_opt '}'
rule 463  array_initializer -> '{' variable_initializer_list COMMA '}'
rule 464  variable_initializer_list_opt ->		/* empty */
rule 465  variable_initializer_list_opt -> variable_initializer_list
rule 466  variable_initializer_list -> variable_initializer
rule 467  variable_initializer_list -> variable_initializer_list COMMA variable_initializer
rule 468  interface_declaration -> attributes_opt modifiers_opt INTERFACE IDENTIFIER interface_base_opt interface_body comma_opt
rule 469  interface_base_opt ->		/* empty */
rule 470  interface_base_opt -> interface_base
rule 471  interface_base -> ':' interface_type_list
rule 472  interface_body -> '{' interface_member_declarations_opt '}'
rule 473  interface_member_declarations_opt ->		/* empty */
rule 474  interface_member_declarations_opt -> interface_member_declarations
rule 475  interface_member_declarations -> interface_member_declaration
rule 476  interface_member_declarations -> interface_member_declarations interface_member_declaration
rule 477  interface_member_declaration -> interface_method_declaration
rule 478  interface_member_declaration -> interface_property_declaration
rule 479  interface_member_declaration -> interface_event_declaration
rule 480  interface_member_declaration -> interface_indexer_declaration
rule 481  interface_method_declaration -> attributes_opt new_opt type IDENTIFIER '(' formal_parameter_list_opt ')' interface_empty_body
rule 482  interface_method_declaration -> attributes_opt new_opt VOID IDENTIFIER '(' formal_parameter_list_opt ')' interface_empty_body
rule 483  new_opt ->		/* empty */
rule 484  new_opt -> NEW
rule 485  interface_property_declaration -> attributes_opt new_opt type IDENTIFIER ENTER_getset '{' interface_accessors '}' EXIT_getset
rule 486  interface_indexer_declaration -> attributes_opt new_opt type THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET ENTER_getset '{' interface_accessors '}' EXIT_getset
rule 487  interface_accessors -> attributes_opt GET interface_empty_body
rule 488  interface_accessors -> attributes_opt SET interface_empty_body
rule 489  interface_accessors -> attributes_opt GET interface_empty_body attributes_opt SET interface_empty_body
rule 490  interface_accessors -> attributes_opt SET interface_empty_body attributes_opt GET interface_empty_body
rule 491  interface_event_declaration -> attributes_opt new_opt EVENT type IDENTIFIER interface_empty_body
rule 492  interface_empty_body -> ';'
rule 493  interface_empty_body -> '{' '}'
rule 494  enum_declaration -> attributes_opt modifiers_opt ENUM IDENTIFIER enum_base_opt enum_body comma_opt
rule 495  enum_base_opt ->		/* empty */
rule 496  enum_base_opt -> enum_base
rule 497  enum_base -> ':' integral_type
rule 498  enum_body -> '{' enum_member_declarations_opt '}'
rule 499  enum_body -> '{' enum_member_declarations COMMA '}'
rule 500  enum_member_declarations_opt ->		/* empty */
rule 501  enum_member_declarations_opt -> enum_member_declarations
rule 502  enum_member_declarations -> enum_member_declaration
rule 503  enum_member_declarations -> enum_member_declarations COMMA enum_member_declaration
rule 504  enum_member_declaration -> attributes_opt IDENTIFIER
rule 505  enum_member_declaration -> attributes_opt IDENTIFIER '=' constant_expression
rule 506  delegate_declaration -> attributes_opt modifiers_opt DELEGATE return_type IDENTIFIER '(' formal_parameter_list_opt ')' ';'
rule 507  attributes -> attribute_sections
rule 508  attribute_sections -> attribute_section
rule 509  attribute_sections -> attribute_sections attribute_section
rule 510  attribute_section -> ENTER_attrib LEFT_BRACKET attribute_target_specifier_opt attribute_list RIGHT_BRACKET EXIT_attrib
rule 511  attribute_section -> ENTER_attrib LEFT_BRACKET attribute_target_specifier_opt attribute_list COMMA RIGHT_BRACKET EXIT_attrib
rule 512  attribute_target_specifier_opt ->		/* empty */
rule 513  attribute_target_specifier_opt -> attribute_target_specifier
rule 514  attribute_target_specifier -> attribute_target ':'
rule 515  attribute_target -> ASSEMBLY
rule 516  attribute_target -> FIELD
rule 517  attribute_target -> EVENT
rule 518  attribute_target -> METHOD
rule 519  attribute_target -> MODULE
rule 520  attribute_target -> PARAM
rule 521  attribute_target -> PROPERTY
rule 522  attribute_target -> RETURN
rule 523  attribute_target -> TYPE
rule 524  attribute_list -> attribute
rule 525  attribute_list -> attribute_list COMMA attribute
rule 526  attribute -> attribute_name attribute_arguments_opt
rule 527  attribute_arguments_opt ->		/* empty */
rule 528  attribute_arguments_opt -> attribute_arguments
rule 529  attribute_name -> type_name
rule 530  attribute_arguments -> '(' expression_list_opt ')'
rule 531  ENTER_attrib ->		/* empty */
rule 532  EXIT_attrib ->		/* empty */
rule 533  ENTER_accessor_decl ->		/* empty */
rule 534  EXIT_accessor_decl ->		/* empty */
rule 535  ENTER_getset ->		/* empty */
rule 536  EXIT_getset ->		/* empty */

Terminals, with rules where they appear

$ (-1)
'!' (33) 102 411
'%' (37) 129 419
'&' (38) 94 147 420
'(' (40) 64 68 69 84 89 90 91 92 95 114 115 116 117 118 119 222 223
    224 240 241 242 255 275 276 283 284 287 366 367 407 408 431 432
    434 437 438 439 481 482 506 530
')' (41) 64 68 69 84 89 90 91 92 95 114 115 116 117 118 119 222 223
    224 240 241 242 255 275 276 283 284 287 366 367 407 408 431 432
    434 437 438 439 481 482 506 530
'*' (42) 36 37 110 115 125 127 417
'+' (43) 108 131 409
'-' (45) 109 132 410
'.' (46) 65 66 67 79 304 305
'/' (47) 128 418
':' (58) 157 196 233 234 343 344 345 437 438 447 471 497 514
';' (59) 195 197 198 212 241 242 261 262 263 264 265 266 269 301 311
    312 363 364 373 393 394 441 443 492 506
'<' (60) 137 428
'=' (61) 159 203 211 290 311 505
'>' (62) 138 427
'?' (63) 157
'^' (94) 149 422
'{' (123) 190 225 306 348 383 395 400 448 462 463 472 485 486 493 498
    499
'|' (124) 151 421
'}' (125) 190 225 306 348 383 395 400 448 462 463 472 485 486 493 498
    499
'~' (126) 103 412 439
error (256)
RANK_SPECIFIER (258) 43
IDENTIFIER (259) 65 66 67 79 93 196 202 203 211 255 263 279 290 302
    303 304 305 311 340 378 382 407 408 431 432 434 439 444 468 481
    482 485 491 494 504 505 506
INTEGER_LITERAL (260) 2
REAL_LITERAL (261) 3
CHARACTER_LITERAL (262) 4
STRING_LITERAL (263) 5
ABSTRACT (264) 326
AS (265) 142
BASE (266) 79 80 437
BOOL (267) 19
BREAK (268) 261
BYTE (269) 24
CASE (270) 233 264
CATCH (271) 275 276 277
CHAR (272) 31
CHECKED (273) 91 281
CLASS (274) 340
CONST (275) 208 363
CONTINUE (276) 262
DECIMAL (277) 22
DEFAULT (278) 234 265
DELEGATE (279) 506
DO (280) 241
DOUBLE (281) 33
ELSE (282) 223
ENUM (283) 494
EVENT (284) 394 395 491 517
EXPLICIT (285) 432
EXTERN (286) 327
FALSE (287) 8 416
FINALLY (288) 280
FIXED (289) 287
FLOAT (290) 32
FOR (291) 242
FOREACH (292) 255
GOTO (293) 263 264 265
IF (294) 222 223
IMPLICIT (295) 431
IN (296) 255
INT (297) 27
INTERFACE (298) 468
INTERNAL (299) 328
IS (300) 141
LOCK (301) 283
LONG (302) 29
NAMESPACE (303) 299
NEW (304) 84 85 86 329 484
NULL_LITERAL (305) 6
OBJECT (306) 34
OPERATOR (307) 407 408 431 432
OUT (308) 49 381
OVERRIDE (309) 330
PARAMS (310) 382
PRIVATE (311) 331
PROTECTED (312) 332
PUBLIC (313) 333
READONLY (314) 334
REF (315) 48 380
RETURN (316) 266 522
SBYTE (317) 23
SEALED (318) 335
SHORT (319) 25
SIZEOF (320) 95
STACKALLOC (321) 207
STATIC (322) 336
STRING (323) 35
STRUCT (324) 444
SWITCH (325) 224
THIS (326) 78 401 403 438 486
THROW (327) 269
TRUE (328) 7 415
TRY (329) 270 271 272
TYPEOF (330) 89 90
UINT (331) 28
ULONG (332) 30
UNCHECKED (333) 92 282
UNSAFE (334) 239 337
USHORT (335) 26
USING (336) 284 311 312
VIRTUAL (337) 338
VOID (338) 37 90 119 367 371 482
VOLATILE (339) 339
WHILE (340) 240 241
ASSEMBLY (341) 515
FIELD (342) 516
METHOD (343) 518
MODULE (344) 519
PARAM (345) 520
PROPERTY (346) 521
TYPE (347) 523
GET (348) 390 487 489 490
SET (349) 391 488 489 490
ADD (350) 398
REMOVE (351) 399
COMMA (352) 46 77 201 210 254 289 345 347 375 408 463 467 499 503 511
    525
LEFT_BRACKET (353) 72 73 80 85 207 401 402 486 510 511
RIGHT_BRACKET (354) 72 73 80 85 207 401 402 486 510 511
PLUSEQ (355) 160
MINUSEQ (356) 161
STAREQ (357) 162
DIVEQ (358) 163
MODEQ (359) 164
XOREQ (360) 165
ANDEQ (361) 166
OREQ (362) 167
LTLT (363) 134 423
GTGT (364) 135 424
GTGTEQ (365) 168
LTLTEQ (366) 169
EQEQ (367) 144 425
NOTEQ (368) 145 426
LEQ (369) 139 430
GEQ (370) 140 429
ANDAND (371) 153
OROR (372) 155
PLUSPLUS (373) 81 105 413
MINUSMINUS (374) 82 106 414
ARROW (375) 93

Nonterminals, with rules where they appear

literal (142)
    on left: 1 2 3 4 5 6, on right: 52
boolean_literal (143)
    on left: 7 8, on right: 1
namespace_name (144)
    on left: 9, on right: 312
type_name (145)
    on left: 10, on right: 14 276 346 347 529
type (146)
    on left: 11 12, on right: 36 84 89 95 141 142 199 207 208 255 287
    363 364 366 370 378 382 383 394 395 401 402 407 408 431 432 481
    485 486 491
non_array_type (147)
    on left: 13 14, on right: 11 85
simple_type (148)
    on left: 15 16 17, on right: 13 39
primitive_type (149)
    on left: 18 19, on right: 15 66 117
numeric_type (150)
    on left: 20 21 22, on right: 18
integral_type (151)
    on left: 23 24 25 26 27 28 29 30 31, on right: 20 497
floating_point_type (152)
    on left: 32 33, on right: 21
class_type (153)
    on left: 34 35, on right: 16 67 118 275 343 345
pointer_type (154)
    on left: 36 37, on right: 17
array_type (155)
    on left: 38 39 40, on right: 12 38 86
rank_specifiers_opt (156)
    on left: 41 42, on right: 42 85
rank_specifier (157)
    on left: 43, on right: 38 39 40 42 116 124
variable_reference (158)
    on left: 44, on right: 48 49
argument_list (159)
    on left: 45 46, on right: 46 71
argument (160)
    on left: 47 48 49, on right: 45 46
primary_expression (161)
    on left: 50 51, on right: 65 72 96
primary_expression_no_parenthesis (162)
    on left: 52 53 54 55 56 57 58 59 60 61 62 63, on right: 51 68
parenthesized_expression (163)
    on left: 64, on right: 50
member_access (164)
    on left: 65 66 67, on right: 54
invocation_expression (165)
    on left: 68 69, on right: 55 213
argument_list_opt (166)
    on left: 70 71, on right: 68 69 84 437 438
element_access (167)
    on left: 72 73, on right: 56
expression_list_opt (168)
    on left: 74 75, on right: 530
expression_list (169)
    on left: 76 77, on right: 72 73 75 77 80 85
this_access (170)
    on left: 78, on right: 57
base_access (171)
    on left: 79 80, on right: 58
post_increment_expression (172)
    on left: 81, on right: 98 216
post_decrement_expression (173)
    on left: 82, on right: 99 217
new_expression (174)
    on left: 83, on right: 59
object_creation_expression (175)
    on left: 84, on right: 83 214
array_creation_expression (176)
    on left: 85 86, on right: 53
array_initializer_opt (177)
    on left: 87 88, on right: 85
typeof_expression (178)
    on left: 89 90, on right: 60
checked_expression (179)
    on left: 91, on right: 62
unchecked_expression (180)
    on left: 92, on right: 63
pointer_member_access (181)
    on left: 93, on right: 100
addressof_expression (182)
    on left: 94, on right: 113
sizeof_expression (183)
    on left: 95, on right: 61
postfix_expression (184)
    on left: 96 97 98 99 100, on right: 81 82 93 101
unary_expression_not_plusminus (185)
    on left: 101 102 103 104, on right: 107 114
pre_increment_expression (186)
    on left: 105, on right: 111 218
pre_decrement_expression (187)
    on left: 106, on right: 112 219
unary_expression (188)
    on left: 107 108 109 110 111 112 113, on right: 94 102 103 105
    106 108 109 110 115 116 117 118 119 126 127 128 129 158
cast_expression (189)
    on left: 114 115 116 117 118 119, on right: 104
type_quals_opt (190)
    on left: 120 121, on right: 116 117 118 119
type_quals (191)
    on left: 122 123, on right: 121 123
type_qual (192)
    on left: 124 125, on right: 122 123
multiplicative_expression (193)
    on left: 126 127 128 129, on right: 115 127 128 129 130 131 132
additive_expression (194)
    on left: 130 131 132, on right: 131 132 133 134 135
shift_expression (195)
    on left: 133 134 135, on right: 134 135 136 137 138 139 140
relational_expression (196)
    on left: 136 137 138 139 140 141 142, on right: 137 138 139 140
    141 142 143 144 145
equality_expression (197)
    on left: 143 144 145, on right: 144 145 146 147
and_expression (198)
    on left: 146 147, on right: 147 148 149
exclusive_or_expression (199)
    on left: 148 149, on right: 149 150 151
inclusive_or_expression (200)
    on left: 150 151, on right: 151 152 153
conditional_and_expression (201)
    on left: 152 153, on right: 153 154 155
conditional_or_expression (202)
    on left: 154 155, on right: 155 156 157
conditional_expression (203)
    on left: 156 157, on right: 170
assignment (204)
    on left: 158, on right: 171 215
assignment_operator (205)
    on left: 159 160 161 162 163 164 165 166 167 168 169,
    on right: 158
expression (206)
    on left: 170 171, on right: 44 47 64 76 77 91 92 114 157 158 172
    173 204 207 224 255 268 283 286 290
constant_expression (207)
    on left: 172, on right: 211 233 264 505
boolean_expression (208)
    on left: 173, on right: 222 223 240 241 251
statement (209)
    on left: 174 175 176, on right: 193 194 196
embedded_statement (210)
    on left: 177 178 179 180 181 182 183 184 185 186 187 188 189,
    on right: 176 222 223 240 241 242 255 283 284 287
block (211)
    on left: 190, on right: 177 239 270 271 272 275 276 277 280 281
    282 372 392 398 399 439 440 442
statement_list_opt (212)
    on left: 191 192, on right: 190
statement_list (213)
    on left: 193 194, on right: 192 194 230
empty_statement (214)
    on left: 195, on right: 178
labeled_statement (215)
    on left: 196, on right: 174
declaration_statement (216)
    on left: 197 198, on right: 175
local_variable_declaration (217)
    on left: 199, on right: 197 249 285
variable_declarators (218)
    on left: 200 201, on right: 199 201 364 394
variable_declarator (219)
    on left: 202 203, on right: 200 201
variable_initializer (220)
    on left: 204 205 206, on right: 203 466 467
stackalloc_initializer (221)
    on left: 207, on right: 206
local_constant_declaration (222)
    on left: 208, on right: 198
constant_declarators (223)
    on left: 209 210, on right: 208 210 363
constant_declarator (224)
    on left: 211, on right: 209 210
expression_statement (225)
    on left: 212, on right: 179
statement_expression (226)
    on left: 213 214 215 216 217 218 219, on right: 212 253 254
selection_statement (227)
    on left: 220 221, on right: 180
if_statement (228)
    on left: 222 223, on right: 220
switch_statement (229)
    on left: 224, on right: 221
switch_block (230)
    on left: 225, on right: 224
switch_sections_opt (231)
    on left: 226 227, on right: 225
switch_sections (232)
    on left: 228 229, on right: 227 229
switch_section (233)
    on left: 230, on right: 228 229
switch_labels (234)
    on left: 231 232, on right: 230 232
switch_label (235)
    on left: 233 234, on right: 231 232
iteration_statement (236)
    on left: 235 236 237 238, on right: 181
unsafe_statement (237)
    on left: 239, on right: 188
while_statement (238)
    on left: 240, on right: 235
do_statement (239)
    on left: 241, on right: 236
for_statement (240)
    on left: 242, on right: 237
for_initializer_opt (241)
    on left: 243 244, on right: 242
for_condition_opt (242)
    on left: 245 246, on right: 242
for_iterator_opt (243)
    on left: 247 248, on right: 242
for_initializer (244)
    on left: 249 250, on right: 244
for_condition (245)
    on left: 251, on right: 246
for_iterator (246)
    on left: 252, on right: 248
statement_expression_list (247)
    on left: 253 254, on right: 250 252 254
foreach_statement (248)
    on left: 255, on right: 238
jump_statement (249)
    on left: 256 257 258 259 260, on right: 182
break_statement (250)
    on left: 261, on right: 256
continue_statement (251)
    on left: 262, on right: 257
goto_statement (252)
    on left: 263 264 265, on right: 258
return_statement (253)
    on left: 266, on right: 259
expression_opt (254)
    on left: 267 268, on right: 266 269
throw_statement (255)
    on left: 269, on right: 260
try_statement (256)
    on left: 270 271 272, on right: 183
catch_clauses (257)
    on left: 273 274, on right: 270 272 274
catch_clause (258)
    on left: 275 276 277, on right: 273 274
identifier_opt (259)
    on left: 278 279, on right: 275 276
finally_clause (260)
    on left: 280, on right: 271 272
checked_statement (261)
    on left: 281, on right: 184
unchecked_statement (262)
    on left: 282, on right: 185
lock_statement (263)
    on left: 283, on right: 186
using_statement (264)
    on left: 284, on right: 187
resource_acquisition (265)
    on left: 285 286, on right: 284
fixed_statement (266)
    on left: 287, on right: 189
fixed_pointer_declarators (267)
    on left: 288 289, on right: 287 289
fixed_pointer_declarator (268)
    on left: 290, on right: 288 289
compilation_unit (269)
    on left: 291 292
using_directives_opt (270)
    on left: 293 294, on right: 291 292 306
attributes_opt (271)
    on left: 295 296, on right: 291 299 340 363 364 366 367 378 382
    383 390 391 394 395 398 399 400 404 433 439 444 468 481 482 485
    486 487 488 489 490 491 494 504 505 506
namespace_member_declarations_opt (272)
    on left: 297 298, on right: 306
namespace_declaration (273)
    on left: 299, on right: 315
comma_opt (274)
    on left: 300 301, on right: 299 340 444 468 494
qualified_identifier (275)
    on left: 302 303, on right: 9 10 40 69 73 97 116 299 311 366 367
    383 395
qualifier (276)
    on left: 304 305, on right: 303 305 403
namespace_body (277)
    on left: 306, on right: 299
using_directives (278)
    on left: 307 308, on right: 294 308
using_directive (279)
    on left: 309 310, on right: 307 308
using_alias_directive (280)
    on left: 311, on right: 309
using_namespace_directive (281)
    on left: 312, on right: 310
namespace_member_declarations (282)
    on left: 313 314, on right: 292 298 314
namespace_member_declaration (283)
    on left: 315 316, on right: 313 314
type_declaration (284)
    on left: 317 318 319 320 321, on right: 316 362 461
modifiers_opt (285)
    on left: 322 323, on right: 340 363 364 366 367 383 394 395 400
    404 433 439 444 468 494 506
modifiers (286)
    on left: 324 325, on right: 323 325
modifier (287)
    on left: 326 327 328 329 330 331 332 333 334 335 336 337 338 339
   , on right: 324 325
class_declaration (288)
    on left: 340, on right: 317
class_base_opt (289)
    on left: 341 342, on right: 340
class_base (290)
    on left: 343 344 345, on right: 342
interface_type_list (291)
    on left: 346 347, on right: 344 345 347 447 471
class_body (292)
    on left: 348, on right: 340
class_member_declarations_opt (293)
    on left: 349 350, on right: 348
class_member_declarations (294)
    on left: 351 352, on right: 350 352
class_member_declaration (295)
    on left: 353 354 355 356 357 358 359 360 361 362,
    on right: 351 352
constant_declaration (296)
    on left: 363, on right: 353 453
field_declaration (297)
    on left: 364, on right: 354 454
method_declaration (298)
    on left: 365, on right: 355 455
method_header (299)
    on left: 366 367, on right: 365
formal_parameter_list_opt (300)
    on left: 368 369, on right: 366 367 434 481 482 506
return_type (301)
    on left: 370 371, on right: 506
method_body (302)
    on left: 372 373, on right: 365
formal_parameter_list (303)
    on left: 374 375, on right: 369 375 401 402 486
formal_parameter (304)
    on left: 376 377, on right: 374 375
fixed_parameter (305)
    on left: 378, on right: 376
parameter_modifier_opt (306)
    on left: 379 380 381, on right: 378
parameter_array (307)
    on left: 382, on right: 377
property_declaration (308)
    on left: 383, on right: 356 456
accessor_declarations (309)
    on left: 384 385, on right: 383 400
set_accessor_declaration_opt (310)
    on left: 386 387, on right: 384
get_accessor_declaration_opt (311)
    on left: 388 389, on right: 385
get_accessor_declaration (312)
    on left: 390, on right: 384 389
set_accessor_declaration (313)
    on left: 391, on right: 385 387
accessor_body (314)
    on left: 392 393, on right: 390 391
event_declaration (315)
    on left: 394 395, on right: 357 457
event_accessor_declarations (316)
    on left: 396 397, on right: 395
add_accessor_declaration (317)
    on left: 398, on right: 396 397
remove_accessor_declaration (318)
    on left: 399, on right: 396 397
indexer_declaration (319)
    on left: 400, on right: 358 458
indexer_declarator (320)
    on left: 401 402, on right: 400
qualified_this (321)
    on left: 403, on right: 402
operator_declaration (322)
    on left: 404, on right: 359 459
operator_declarator (323)
    on left: 405 406, on right: 404
overloadable_operator_declarator (324)
    on left: 407 408, on right: 405
overloadable_operator (325)
    on left: 409 410 411 412 413 414 415 416 417 418 419 420 421 422
    423 424 425 426 427 428 429 430, on right: 407 408
conversion_operator_declarator (326)
    on left: 431 432, on right: 406
constructor_declaration (327)
    on left: 433, on right: 360 460
constructor_declarator (328)
    on left: 434, on right: 433
constructor_initializer_opt (329)
    on left: 435 436, on right: 434
constructor_initializer (330)
    on left: 437 438, on right: 436
destructor_declaration (331)
    on left: 439, on right: 361
operator_body (332)
    on left: 440 441, on right: 404
constructor_body (333)
    on left: 442 443, on right: 433
struct_declaration (334)
    on left: 444, on right: 318
struct_interfaces_opt (335)
    on left: 445 446, on right: 444
struct_interfaces (336)
    on left: 447, on right: 446
struct_body (337)
    on left: 448, on right: 444
struct_member_declarations_opt (338)
    on left: 449 450, on right: 448
struct_member_declarations (339)
    on left: 451 452, on right: 450 452
struct_member_declaration (340)
    on left: 453 454 455 456 457 458 459 460 461, on right: 451 452
array_initializer (341)
    on left: 462 463, on right: 86 88 205
variable_initializer_list_opt (342)
    on left: 464 465, on right: 462
variable_initializer_list (343)
    on left: 466 467, on right: 463 465 467
interface_declaration (344)
    on left: 468, on right: 319
interface_base_opt (345)
    on left: 469 470, on right: 468
interface_base (346)
    on left: 471, on right: 470
interface_body (347)
    on left: 472, on right: 468
interface_member_declarations_opt (348)
    on left: 473 474, on right: 472
interface_member_declarations (349)
    on left: 475 476, on right: 474 476
interface_member_declaration (350)
    on left: 477 478 479 480, on right: 475 476
interface_method_declaration (351)
    on left: 481 482, on right: 477
new_opt (352)
    on left: 483 484, on right: 481 482 485 486 491
interface_property_declaration (353)
    on left: 485, on right: 478
interface_indexer_declaration (354)
    on left: 486, on right: 480
interface_accessors (355)
    on left: 487 488 489 490, on right: 485 486
interface_event_declaration (356)
    on left: 491, on right: 479
interface_empty_body (357)
    on left: 492 493, on right: 481 482 487 488 489 490 491
enum_declaration (358)
    on left: 494, on right: 320
enum_base_opt (359)
    on left: 495 496, on right: 494
enum_base (360)
    on left: 497, on right: 496
enum_body (361)
    on left: 498 499, on right: 494
enum_member_declarations_opt (362)
    on left: 500 501, on right: 498
enum_member_declarations (363)
    on left: 502 503, on right: 499 501 503
enum_member_declaration (364)
    on left: 504 505, on right: 502 503
delegate_declaration (365)
    on left: 506, on right: 321
attributes (366)
    on left: 507, on right: 296
attribute_sections (367)
    on left: 508 509, on right: 507 509
attribute_section (368)
    on left: 510 511, on right: 508 509
attribute_target_specifier_opt (369)
    on left: 512 513, on right: 510 511
attribute_target_specifier (370)
    on left: 514, on right: 513
attribute_target (371)
    on left: 515 516 517 518 519 520 521 522 523, on right: 514
attribute_list (372)
    on left: 524 525, on right: 510 511 525
attribute (373)
    on left: 526, on right: 524 525
attribute_arguments_opt (374)
    on left: 527 528, on right: 526
attribute_name (375)
    on left: 529, on right: 526
attribute_arguments (376)
    on left: 530, on right: 528
ENTER_attrib (377)
    on left: 531, on right: 510 511
EXIT_attrib (378)
    on left: 532, on right: 510 511
ENTER_accessor_decl (379)
    on left: 533, on right: 395 398 399
EXIT_accessor_decl (380)
    on left: 534, on right: 395 398 399
ENTER_getset (381)
    on left: 535, on right: 383 390 391 400 485 486
EXIT_getset (382)
    on left: 536, on right: 383 390 391 400 485 486


state 0

    USING	shift, and go to state 1

    $default	reduce using rule 293 (using_directives_opt)

    compilation_unit	go to state 911
    using_directives_opt	go to state 2
    using_directives	go to state 3
    using_directive	go to state 4
    using_alias_directive	go to state 5
    using_namespace_directive	go to state 6



state 1

    using_alias_directive  ->  USING . IDENTIFIER '=' qualified_identifier ';'   (rule 311)
    using_namespace_directive  ->  USING . namespace_name ';'   (rule 312)

    IDENTIFIER	shift, and go to state 7

    namespace_name	go to state 8
    qualified_identifier	go to state 9
    qualifier	go to state 10



state 2

    compilation_unit  ->  using_directives_opt . attributes_opt   (rule 291)
    compilation_unit  ->  using_directives_opt . namespace_member_declarations   (rule 292)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 11
    namespace_declaration	go to state 12
    namespace_member_declarations	go to state 13
    namespace_member_declaration	go to state 14
    type_declaration	go to state 15
    class_declaration	go to state 16
    struct_declaration	go to state 17
    interface_declaration	go to state 18
    enum_declaration	go to state 19
    delegate_declaration	go to state 20
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 3

    using_directives_opt  ->  using_directives .   (rule 294)
    using_directives  ->  using_directives . using_directive   (rule 308)

    USING	shift, and go to state 1

    $default	reduce using rule 294 (using_directives_opt)

    using_directive	go to state 25
    using_alias_directive	go to state 5
    using_namespace_directive	go to state 6



state 4

    using_directives  ->  using_directive .   (rule 307)

    $default	reduce using rule 307 (using_directives)



state 5

    using_directive  ->  using_alias_directive .   (rule 309)

    $default	reduce using rule 309 (using_directive)



state 6

    using_directive  ->  using_namespace_directive .   (rule 310)

    $default	reduce using rule 310 (using_directive)



state 7

    qualified_identifier  ->  IDENTIFIER .   (rule 302)
    qualifier  ->  IDENTIFIER . '.'   (rule 304)
    using_alias_directive  ->  USING IDENTIFIER . '=' qualified_identifier ';'   (rule 311)

    '.' 	shift, and go to state 26
    '=' 	shift, and go to state 27

    $default	reduce using rule 302 (qualified_identifier)



state 8

    using_namespace_directive  ->  USING namespace_name . ';'   (rule 312)

    ';' 	shift, and go to state 28



state 9

    namespace_name  ->  qualified_identifier .   (rule 9)

    $default	reduce using rule 9 (namespace_name)



state 10

    qualified_identifier  ->  qualifier . IDENTIFIER   (rule 303)
    qualifier  ->  qualifier . IDENTIFIER '.'   (rule 305)

    IDENTIFIER	shift, and go to state 29



state 11

    compilation_unit  ->  using_directives_opt attributes_opt .   (rule 291)
    namespace_declaration  ->  attributes_opt . NAMESPACE qualified_identifier namespace_body comma_opt   (rule 299)
    class_declaration  ->  attributes_opt . modifiers_opt CLASS IDENTIFIER class_base_opt class_body comma_opt   (rule 340)
    struct_declaration  ->  attributes_opt . modifiers_opt STRUCT IDENTIFIER struct_interfaces_opt struct_body comma_opt   (rule 444)
    interface_declaration  ->  attributes_opt . modifiers_opt INTERFACE IDENTIFIER interface_base_opt interface_body comma_opt   (rule 468)
    enum_declaration  ->  attributes_opt . modifiers_opt ENUM IDENTIFIER enum_base_opt enum_body comma_opt   (rule 494)
    delegate_declaration  ->  attributes_opt . modifiers_opt DELEGATE return_type IDENTIFIER '(' formal_parameter_list_opt ')' ';'   (rule 506)

    ABSTRACT	shift, and go to state 30
    EXTERN	shift, and go to state 31
    INTERNAL	shift, and go to state 32
    NAMESPACE	shift, and go to state 33
    NEW 	shift, and go to state 34
    OVERRIDE	shift, and go to state 35
    PRIVATE	shift, and go to state 36
    PROTECTED	shift, and go to state 37
    PUBLIC	shift, and go to state 38
    READONLY	shift, and go to state 39
    SEALED	shift, and go to state 40
    STATIC	shift, and go to state 41
    UNSAFE	shift, and go to state 42
    VIRTUAL	shift, and go to state 43
    VOLATILE	shift, and go to state 44

    $   	reduce using rule 291 (compilation_unit)
    $default	reduce using rule 322 (modifiers_opt)

    modifiers_opt	go to state 45
    modifiers	go to state 46
    modifier	go to state 47



state 12

    namespace_member_declaration  ->  namespace_declaration .   (rule 315)

    $default	reduce using rule 315 (namespace_member_declaration)



state 13

    compilation_unit  ->  using_directives_opt namespace_member_declarations .   (rule 292)
    namespace_member_declarations  ->  namespace_member_declarations . namespace_member_declaration   (rule 314)

    $   	reduce using rule 292 (compilation_unit)
    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 48
    namespace_declaration	go to state 12
    namespace_member_declaration	go to state 49
    type_declaration	go to state 15
    class_declaration	go to state 16
    struct_declaration	go to state 17
    interface_declaration	go to state 18
    enum_declaration	go to state 19
    delegate_declaration	go to state 20
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 14

    namespace_member_declarations  ->  namespace_member_declaration .   (rule 313)

    $default	reduce using rule 313 (namespace_member_declarations)



state 15

    namespace_member_declaration  ->  type_declaration .   (rule 316)

    $default	reduce using rule 316 (namespace_member_declaration)



state 16

    type_declaration  ->  class_declaration .   (rule 317)

    $default	reduce using rule 317 (type_declaration)



state 17

    type_declaration  ->  struct_declaration .   (rule 318)

    $default	reduce using rule 318 (type_declaration)



state 18

    type_declaration  ->  interface_declaration .   (rule 319)

    $default	reduce using rule 319 (type_declaration)



state 19

    type_declaration  ->  enum_declaration .   (rule 320)

    $default	reduce using rule 320 (type_declaration)



state 20

    type_declaration  ->  delegate_declaration .   (rule 321)

    $default	reduce using rule 321 (type_declaration)



state 21

    attributes_opt  ->  attributes .   (rule 296)

    $default	reduce using rule 296 (attributes_opt)



state 22

    attributes  ->  attribute_sections .   (rule 507)
    attribute_sections  ->  attribute_sections . attribute_section   (rule 509)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    $default	reduce using rule 507 (attributes)

    attribute_section	go to state 50
    ENTER_attrib	go to state 24



state 23

    attribute_sections  ->  attribute_section .   (rule 508)

    $default	reduce using rule 508 (attribute_sections)



state 24

    attribute_section  ->  ENTER_attrib . LEFT_BRACKET attribute_target_specifier_opt attribute_list RIGHT_BRACKET EXIT_attrib   (rule 510)
    attribute_section  ->  ENTER_attrib . LEFT_BRACKET attribute_target_specifier_opt attribute_list COMMA RIGHT_BRACKET EXIT_attrib   (rule 511)

    LEFT_BRACKET	shift, and go to state 51



state 25

    using_directives  ->  using_directives using_directive .   (rule 308)

    $default	reduce using rule 308 (using_directives)



state 26

    qualifier  ->  IDENTIFIER '.' .   (rule 304)

    $default	reduce using rule 304 (qualifier)



state 27

    using_alias_directive  ->  USING IDENTIFIER '=' . qualified_identifier ';'   (rule 311)

    IDENTIFIER	shift, and go to state 52

    qualified_identifier	go to state 53
    qualifier	go to state 10



state 28

    using_namespace_directive  ->  USING namespace_name ';' .   (rule 312)

    $default	reduce using rule 312 (using_namespace_directive)



state 29

    qualified_identifier  ->  qualifier IDENTIFIER .   (rule 303)
    qualifier  ->  qualifier IDENTIFIER . '.'   (rule 305)

    '.' 	shift, and go to state 54

    $default	reduce using rule 303 (qualified_identifier)



state 30

    modifier  ->  ABSTRACT .   (rule 326)

    $default	reduce using rule 326 (modifier)



state 31

    modifier  ->  EXTERN .   (rule 327)

    $default	reduce using rule 327 (modifier)



state 32

    modifier  ->  INTERNAL .   (rule 328)

    $default	reduce using rule 328 (modifier)



state 33

    namespace_declaration  ->  attributes_opt NAMESPACE . qualified_identifier namespace_body comma_opt   (rule 299)

    IDENTIFIER	shift, and go to state 52

    qualified_identifier	go to state 55
    qualifier	go to state 10



state 34

    modifier  ->  NEW .   (rule 329)

    $default	reduce using rule 329 (modifier)



state 35

    modifier  ->  OVERRIDE .   (rule 330)

    $default	reduce using rule 330 (modifier)



state 36

    modifier  ->  PRIVATE .   (rule 331)

    $default	reduce using rule 331 (modifier)



state 37

    modifier  ->  PROTECTED .   (rule 332)

    $default	reduce using rule 332 (modifier)



state 38

    modifier  ->  PUBLIC .   (rule 333)

    $default	reduce using rule 333 (modifier)



state 39

    modifier  ->  READONLY .   (rule 334)

    $default	reduce using rule 334 (modifier)



state 40

    modifier  ->  SEALED .   (rule 335)

    $default	reduce using rule 335 (modifier)



state 41

    modifier  ->  STATIC .   (rule 336)

    $default	reduce using rule 336 (modifier)



state 42

    modifier  ->  UNSAFE .   (rule 337)

    $default	reduce using rule 337 (modifier)



state 43

    modifier  ->  VIRTUAL .   (rule 338)

    $default	reduce using rule 338 (modifier)



state 44

    modifier  ->  VOLATILE .   (rule 339)

    $default	reduce using rule 339 (modifier)



state 45

    class_declaration  ->  attributes_opt modifiers_opt . CLASS IDENTIFIER class_base_opt class_body comma_opt   (rule 340)
    struct_declaration  ->  attributes_opt modifiers_opt . STRUCT IDENTIFIER struct_interfaces_opt struct_body comma_opt   (rule 444)
    interface_declaration  ->  attributes_opt modifiers_opt . INTERFACE IDENTIFIER interface_base_opt interface_body comma_opt   (rule 468)
    enum_declaration  ->  attributes_opt modifiers_opt . ENUM IDENTIFIER enum_base_opt enum_body comma_opt   (rule 494)
    delegate_declaration  ->  attributes_opt modifiers_opt . DELEGATE return_type IDENTIFIER '(' formal_parameter_list_opt ')' ';'   (rule 506)

    CLASS	shift, and go to state 56
    DELEGATE	shift, and go to state 57
    ENUM	shift, and go to state 58
    INTERFACE	shift, and go to state 59
    STRUCT	shift, and go to state 60



state 46

    modifiers_opt  ->  modifiers .   (rule 323)
    modifiers  ->  modifiers . modifier   (rule 325)

    ABSTRACT	shift, and go to state 30
    EXTERN	shift, and go to state 31
    INTERNAL	shift, and go to state 32
    NEW 	shift, and go to state 34
    OVERRIDE	shift, and go to state 35
    PRIVATE	shift, and go to state 36
    PROTECTED	shift, and go to state 37
    PUBLIC	shift, and go to state 38
    READONLY	shift, and go to state 39
    SEALED	shift, and go to state 40
    STATIC	shift, and go to state 41
    UNSAFE	shift, and go to state 42
    VIRTUAL	shift, and go to state 43
    VOLATILE	shift, and go to state 44

    $default	reduce using rule 323 (modifiers_opt)

    modifier	go to state 61



state 47

    modifiers  ->  modifier .   (rule 324)

    $default	reduce using rule 324 (modifiers)



state 48

    namespace_declaration  ->  attributes_opt . NAMESPACE qualified_identifier namespace_body comma_opt   (rule 299)
    class_declaration  ->  attributes_opt . modifiers_opt CLASS IDENTIFIER class_base_opt class_body comma_opt   (rule 340)
    struct_declaration  ->  attributes_opt . modifiers_opt STRUCT IDENTIFIER struct_interfaces_opt struct_body comma_opt   (rule 444)
    interface_declaration  ->  attributes_opt . modifiers_opt INTERFACE IDENTIFIER interface_base_opt interface_body comma_opt   (rule 468)
    enum_declaration  ->  attributes_opt . modifiers_opt ENUM IDENTIFIER enum_base_opt enum_body comma_opt   (rule 494)
    delegate_declaration  ->  attributes_opt . modifiers_opt DELEGATE return_type IDENTIFIER '(' formal_parameter_list_opt ')' ';'   (rule 506)

    ABSTRACT	shift, and go to state 30
    EXTERN	shift, and go to state 31
    INTERNAL	shift, and go to state 32
    NAMESPACE	shift, and go to state 33
    NEW 	shift, and go to state 34
    OVERRIDE	shift, and go to state 35
    PRIVATE	shift, and go to state 36
    PROTECTED	shift, and go to state 37
    PUBLIC	shift, and go to state 38
    READONLY	shift, and go to state 39
    SEALED	shift, and go to state 40
    STATIC	shift, and go to state 41
    UNSAFE	shift, and go to state 42
    VIRTUAL	shift, and go to state 43
    VOLATILE	shift, and go to state 44

    $default	reduce using rule 322 (modifiers_opt)

    modifiers_opt	go to state 45
    modifiers	go to state 46
    modifier	go to state 47



state 49

    namespace_member_declarations  ->  namespace_member_declarations namespace_member_declaration .   (rule 314)

    $default	reduce using rule 314 (namespace_member_declarations)



state 50

    attribute_sections  ->  attribute_sections attribute_section .   (rule 509)

    $default	reduce using rule 509 (attribute_sections)



state 51

    attribute_section  ->  ENTER_attrib LEFT_BRACKET . attribute_target_specifier_opt attribute_list RIGHT_BRACKET EXIT_attrib   (rule 510)
    attribute_section  ->  ENTER_attrib LEFT_BRACKET . attribute_target_specifier_opt attribute_list COMMA RIGHT_BRACKET EXIT_attrib   (rule 511)

    EVENT	shift, and go to state 62
    RETURN	shift, and go to state 63
    ASSEMBLY	shift, and go to state 64
    FIELD	shift, and go to state 65
    METHOD	shift, and go to state 66
    MODULE	shift, and go to state 67
    PARAM	shift, and go to state 68
    PROPERTY	shift, and go to state 69
    TYPE	shift, and go to state 70

    $default	reduce using rule 512 (attribute_target_specifier_opt)

    attribute_target_specifier_opt	go to state 71
    attribute_target_specifier	go to state 72
    attribute_target	go to state 73



state 52

    qualified_identifier  ->  IDENTIFIER .   (rule 302)
    qualifier  ->  IDENTIFIER . '.'   (rule 304)

    '.' 	shift, and go to state 26

    $default	reduce using rule 302 (qualified_identifier)



state 53

    using_alias_directive  ->  USING IDENTIFIER '=' qualified_identifier . ';'   (rule 311)

    ';' 	shift, and go to state 74



state 54

    qualifier  ->  qualifier IDENTIFIER '.' .   (rule 305)

    $default	reduce using rule 305 (qualifier)



state 55

    namespace_declaration  ->  attributes_opt NAMESPACE qualified_identifier . namespace_body comma_opt   (rule 299)

    '{' 	shift, and go to state 75

    namespace_body	go to state 76



state 56

    class_declaration  ->  attributes_opt modifiers_opt CLASS . IDENTIFIER class_base_opt class_body comma_opt   (rule 340)

    IDENTIFIER	shift, and go to state 77



state 57

    delegate_declaration  ->  attributes_opt modifiers_opt DELEGATE . return_type IDENTIFIER '(' formal_parameter_list_opt ')' ';'   (rule 506)

    IDENTIFIER	shift, and go to state 52
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 93

    type_name	go to state 94
    type	go to state 95
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10
    return_type	go to state 106



state 58

    enum_declaration  ->  attributes_opt modifiers_opt ENUM . IDENTIFIER enum_base_opt enum_body comma_opt   (rule 494)

    IDENTIFIER	shift, and go to state 107



state 59

    interface_declaration  ->  attributes_opt modifiers_opt INTERFACE . IDENTIFIER interface_base_opt interface_body comma_opt   (rule 468)

    IDENTIFIER	shift, and go to state 108



state 60

    struct_declaration  ->  attributes_opt modifiers_opt STRUCT . IDENTIFIER struct_interfaces_opt struct_body comma_opt   (rule 444)

    IDENTIFIER	shift, and go to state 109



state 61

    modifiers  ->  modifiers modifier .   (rule 325)

    $default	reduce using rule 325 (modifiers)



state 62

    attribute_target  ->  EVENT .   (rule 517)

    $default	reduce using rule 517 (attribute_target)



state 63

    attribute_target  ->  RETURN .   (rule 522)

    $default	reduce using rule 522 (attribute_target)



state 64

    attribute_target  ->  ASSEMBLY .   (rule 515)

    $default	reduce using rule 515 (attribute_target)



state 65

    attribute_target  ->  FIELD .   (rule 516)

    $default	reduce using rule 516 (attribute_target)



state 66

    attribute_target  ->  METHOD .   (rule 518)

    $default	reduce using rule 518 (attribute_target)



state 67

    attribute_target  ->  MODULE .   (rule 519)

    $default	reduce using rule 519 (attribute_target)



state 68

    attribute_target  ->  PARAM .   (rule 520)

    $default	reduce using rule 520 (attribute_target)



state 69

    attribute_target  ->  PROPERTY .   (rule 521)

    $default	reduce using rule 521 (attribute_target)



state 70

    attribute_target  ->  TYPE .   (rule 523)

    $default	reduce using rule 523 (attribute_target)



state 71

    attribute_section  ->  ENTER_attrib LEFT_BRACKET attribute_target_specifier_opt . attribute_list RIGHT_BRACKET EXIT_attrib   (rule 510)
    attribute_section  ->  ENTER_attrib LEFT_BRACKET attribute_target_specifier_opt . attribute_list COMMA RIGHT_BRACKET EXIT_attrib   (rule 511)

    IDENTIFIER	shift, and go to state 52

    type_name	go to state 110
    qualified_identifier	go to state 111
    qualifier	go to state 10
    attribute_list	go to state 112
    attribute	go to state 113
    attribute_name	go to state 114



state 72

    attribute_target_specifier_opt  ->  attribute_target_specifier .   (rule 513)

    $default	reduce using rule 513 (attribute_target_specifier_opt)



state 73

    attribute_target_specifier  ->  attribute_target . ':'   (rule 514)

    ':' 	shift, and go to state 115



state 74

    using_alias_directive  ->  USING IDENTIFIER '=' qualified_identifier ';' .   (rule 311)

    $default	reduce using rule 311 (using_alias_directive)



state 75

    namespace_body  ->  '{' . using_directives_opt namespace_member_declarations_opt '}'   (rule 306)

    USING	shift, and go to state 1

    $default	reduce using rule 293 (using_directives_opt)

    using_directives_opt	go to state 116
    using_directives	go to state 3
    using_directive	go to state 4
    using_alias_directive	go to state 5
    using_namespace_directive	go to state 6



state 76

    namespace_declaration  ->  attributes_opt NAMESPACE qualified_identifier namespace_body . comma_opt   (rule 299)

    ';' 	shift, and go to state 117

    $default	reduce using rule 300 (comma_opt)

    comma_opt	go to state 118



state 77

    class_declaration  ->  attributes_opt modifiers_opt CLASS IDENTIFIER . class_base_opt class_body comma_opt   (rule 340)

    ':' 	shift, and go to state 119

    $default	reduce using rule 341 (class_base_opt)

    class_base_opt	go to state 120
    class_base	go to state 121



state 78

    primitive_type  ->  BOOL .   (rule 19)

    $default	reduce using rule 19 (primitive_type)



state 79

    integral_type  ->  BYTE .   (rule 24)

    $default	reduce using rule 24 (integral_type)



state 80

    integral_type  ->  CHAR .   (rule 31)

    $default	reduce using rule 31 (integral_type)



state 81

    numeric_type  ->  DECIMAL .   (rule 22)

    $default	reduce using rule 22 (numeric_type)



state 82

    floating_point_type  ->  DOUBLE .   (rule 33)

    $default	reduce using rule 33 (floating_point_type)



state 83

    floating_point_type  ->  FLOAT .   (rule 32)

    $default	reduce using rule 32 (floating_point_type)



state 84

    integral_type  ->  INT .   (rule 27)

    $default	reduce using rule 27 (integral_type)



state 85

    integral_type  ->  LONG .   (rule 29)

    $default	reduce using rule 29 (integral_type)



state 86

    class_type  ->  OBJECT .   (rule 34)

    $default	reduce using rule 34 (class_type)



state 87

    integral_type  ->  SBYTE .   (rule 23)

    $default	reduce using rule 23 (integral_type)



state 88

    integral_type  ->  SHORT .   (rule 25)

    $default	reduce using rule 25 (integral_type)



state 89

    class_type  ->  STRING .   (rule 35)

    $default	reduce using rule 35 (class_type)



state 90

    integral_type  ->  UINT .   (rule 28)

    $default	reduce using rule 28 (integral_type)



state 91

    integral_type  ->  ULONG .   (rule 30)

    $default	reduce using rule 30 (integral_type)



state 92

    integral_type  ->  USHORT .   (rule 26)

    $default	reduce using rule 26 (integral_type)



state 93

    pointer_type  ->  VOID . '*'   (rule 37)
    return_type  ->  VOID .   (rule 371)

    '*' 	shift, and go to state 122

    $default	reduce using rule 371 (return_type)



state 94

    non_array_type  ->  type_name .   (rule 14)

    $default	reduce using rule 14 (non_array_type)



state 95

    pointer_type  ->  type . '*'   (rule 36)
    return_type  ->  type .   (rule 370)

    '*' 	shift, and go to state 123

    $default	reduce using rule 370 (return_type)



state 96

    type  ->  non_array_type .   (rule 11)

    $default	reduce using rule 11 (type)



state 97

    non_array_type  ->  simple_type .   (rule 13)
    array_type  ->  simple_type . rank_specifier   (rule 39)

    RANK_SPECIFIER	shift, and go to state 124

    $default	reduce using rule 13 (non_array_type)

    rank_specifier	go to state 125



state 98

    simple_type  ->  primitive_type .   (rule 15)

    $default	reduce using rule 15 (simple_type)



state 99

    primitive_type  ->  numeric_type .   (rule 18)

    $default	reduce using rule 18 (primitive_type)



state 100

    numeric_type  ->  integral_type .   (rule 20)

    $default	reduce using rule 20 (numeric_type)



state 101

    numeric_type  ->  floating_point_type .   (rule 21)

    $default	reduce using rule 21 (numeric_type)



state 102

    simple_type  ->  class_type .   (rule 16)

    $default	reduce using rule 16 (simple_type)



state 103

    simple_type  ->  pointer_type .   (rule 17)

    $default	reduce using rule 17 (simple_type)



state 104

    type  ->  array_type .   (rule 12)
    array_type  ->  array_type . rank_specifier   (rule 38)

    RANK_SPECIFIER	shift, and go to state 124

    $default	reduce using rule 12 (type)

    rank_specifier	go to state 126



state 105

    type_name  ->  qualified_identifier .   (rule 10)
    array_type  ->  qualified_identifier . rank_specifier   (rule 40)

    RANK_SPECIFIER	shift, and go to state 124

    $default	reduce using rule 10 (type_name)

    rank_specifier	go to state 127



state 106

    delegate_declaration  ->  attributes_opt modifiers_opt DELEGATE return_type . IDENTIFIER '(' formal_parameter_list_opt ')' ';'   (rule 506)

    IDENTIFIER	shift, and go to state 128



state 107

    enum_declaration  ->  attributes_opt modifiers_opt ENUM IDENTIFIER . enum_base_opt enum_body comma_opt   (rule 494)

    ':' 	shift, and go to state 129

    $default	reduce using rule 495 (enum_base_opt)

    enum_base_opt	go to state 130
    enum_base	go to state 131



state 108

    interface_declaration  ->  attributes_opt modifiers_opt INTERFACE IDENTIFIER . interface_base_opt interface_body comma_opt   (rule 468)

    ':' 	shift, and go to state 132

    $default	reduce using rule 469 (interface_base_opt)

    interface_base_opt	go to state 133
    interface_base	go to state 134



state 109

    struct_declaration  ->  attributes_opt modifiers_opt STRUCT IDENTIFIER . struct_interfaces_opt struct_body comma_opt   (rule 444)

    ':' 	shift, and go to state 135

    $default	reduce using rule 445 (struct_interfaces_opt)

    struct_interfaces_opt	go to state 136
    struct_interfaces	go to state 137



state 110

    attribute_name  ->  type_name .   (rule 529)

    $default	reduce using rule 529 (attribute_name)



state 111

    type_name  ->  qualified_identifier .   (rule 10)

    $default	reduce using rule 10 (type_name)



state 112

    attribute_section  ->  ENTER_attrib LEFT_BRACKET attribute_target_specifier_opt attribute_list . RIGHT_BRACKET EXIT_attrib   (rule 510)
    attribute_section  ->  ENTER_attrib LEFT_BRACKET attribute_target_specifier_opt attribute_list . COMMA RIGHT_BRACKET EXIT_attrib   (rule 511)
    attribute_list  ->  attribute_list . COMMA attribute   (rule 525)

    COMMA	shift, and go to state 138
    RIGHT_BRACKET	shift, and go to state 139



state 113

    attribute_list  ->  attribute .   (rule 524)

    $default	reduce using rule 524 (attribute_list)



state 114

    attribute  ->  attribute_name . attribute_arguments_opt   (rule 526)

    '(' 	shift, and go to state 140

    $default	reduce using rule 527 (attribute_arguments_opt)

    attribute_arguments_opt	go to state 141
    attribute_arguments	go to state 142



state 115

    attribute_target_specifier  ->  attribute_target ':' .   (rule 514)

    $default	reduce using rule 514 (attribute_target_specifier)



state 116

    namespace_body  ->  '{' using_directives_opt . namespace_member_declarations_opt '}'   (rule 306)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    '}' 	reduce using rule 297 (namespace_member_declarations_opt)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 48
    namespace_member_declarations_opt	go to state 143
    namespace_declaration	go to state 12
    namespace_member_declarations	go to state 144
    namespace_member_declaration	go to state 14
    type_declaration	go to state 15
    class_declaration	go to state 16
    struct_declaration	go to state 17
    interface_declaration	go to state 18
    enum_declaration	go to state 19
    delegate_declaration	go to state 20
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 117

    comma_opt  ->  ';' .   (rule 301)

    $default	reduce using rule 301 (comma_opt)



state 118

    namespace_declaration  ->  attributes_opt NAMESPACE qualified_identifier namespace_body comma_opt .   (rule 299)

    $default	reduce using rule 299 (namespace_declaration)



state 119

    class_base  ->  ':' . class_type   (rule 343)
    class_base  ->  ':' . interface_type_list   (rule 344)
    class_base  ->  ':' . class_type COMMA interface_type_list   (rule 345)

    IDENTIFIER	shift, and go to state 52
    OBJECT	shift, and go to state 86
    STRING	shift, and go to state 89

    type_name	go to state 145
    class_type	go to state 146
    qualified_identifier	go to state 111
    qualifier	go to state 10
    interface_type_list	go to state 147



state 120

    class_declaration  ->  attributes_opt modifiers_opt CLASS IDENTIFIER class_base_opt . class_body comma_opt   (rule 340)

    '{' 	shift, and go to state 148

    class_body	go to state 149



state 121

    class_base_opt  ->  class_base .   (rule 342)

    $default	reduce using rule 342 (class_base_opt)



state 122

    pointer_type  ->  VOID '*' .   (rule 37)

    $default	reduce using rule 37 (pointer_type)



state 123

    pointer_type  ->  type '*' .   (rule 36)

    $default	reduce using rule 36 (pointer_type)



state 124

    rank_specifier  ->  RANK_SPECIFIER .   (rule 43)

    $default	reduce using rule 43 (rank_specifier)



state 125

    array_type  ->  simple_type rank_specifier .   (rule 39)

    $default	reduce using rule 39 (array_type)



state 126

    array_type  ->  array_type rank_specifier .   (rule 38)

    $default	reduce using rule 38 (array_type)



state 127

    array_type  ->  qualified_identifier rank_specifier .   (rule 40)

    $default	reduce using rule 40 (array_type)



state 128

    delegate_declaration  ->  attributes_opt modifiers_opt DELEGATE return_type IDENTIFIER . '(' formal_parameter_list_opt ')' ';'   (rule 506)

    '(' 	shift, and go to state 150



state 129

    enum_base  ->  ':' . integral_type   (rule 497)

    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92

    integral_type	go to state 151



state 130

    enum_declaration  ->  attributes_opt modifiers_opt ENUM IDENTIFIER enum_base_opt . enum_body comma_opt   (rule 494)

    '{' 	shift, and go to state 152

    enum_body	go to state 153



state 131

    enum_base_opt  ->  enum_base .   (rule 496)

    $default	reduce using rule 496 (enum_base_opt)



state 132

    interface_base  ->  ':' . interface_type_list   (rule 471)

    IDENTIFIER	shift, and go to state 52

    type_name	go to state 145
    qualified_identifier	go to state 111
    qualifier	go to state 10
    interface_type_list	go to state 154



state 133

    interface_declaration  ->  attributes_opt modifiers_opt INTERFACE IDENTIFIER interface_base_opt . interface_body comma_opt   (rule 468)

    '{' 	shift, and go to state 155

    interface_body	go to state 156



state 134

    interface_base_opt  ->  interface_base .   (rule 470)

    $default	reduce using rule 470 (interface_base_opt)



state 135

    struct_interfaces  ->  ':' . interface_type_list   (rule 447)

    IDENTIFIER	shift, and go to state 52

    type_name	go to state 145
    qualified_identifier	go to state 111
    qualifier	go to state 10
    interface_type_list	go to state 157



state 136

    struct_declaration  ->  attributes_opt modifiers_opt STRUCT IDENTIFIER struct_interfaces_opt . struct_body comma_opt   (rule 444)

    '{' 	shift, and go to state 158

    struct_body	go to state 159



state 137

    struct_interfaces_opt  ->  struct_interfaces .   (rule 446)

    $default	reduce using rule 446 (struct_interfaces_opt)



state 138

    attribute_section  ->  ENTER_attrib LEFT_BRACKET attribute_target_specifier_opt attribute_list COMMA . RIGHT_BRACKET EXIT_attrib   (rule 511)
    attribute_list  ->  attribute_list COMMA . attribute   (rule 525)

    IDENTIFIER	shift, and go to state 52
    RIGHT_BRACKET	shift, and go to state 160

    type_name	go to state 110
    qualified_identifier	go to state 111
    qualifier	go to state 10
    attribute	go to state 161
    attribute_name	go to state 114



state 139

    attribute_section  ->  ENTER_attrib LEFT_BRACKET attribute_target_specifier_opt attribute_list RIGHT_BRACKET . EXIT_attrib   (rule 510)

    $default	reduce using rule 532 (EXIT_attrib)

    EXIT_attrib	go to state 162



state 140

    attribute_arguments  ->  '(' . expression_list_opt ')'   (rule 530)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    $default	reduce using rule 74 (expression_list_opt)

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    expression_list_opt	go to state 196
    expression_list	go to state 197
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 229
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 141

    attribute  ->  attribute_name attribute_arguments_opt .   (rule 526)

    $default	reduce using rule 526 (attribute)



state 142

    attribute_arguments_opt  ->  attribute_arguments .   (rule 528)

    $default	reduce using rule 528 (attribute_arguments_opt)



state 143

    namespace_body  ->  '{' using_directives_opt namespace_member_declarations_opt . '}'   (rule 306)

    '}' 	shift, and go to state 231



state 144

    namespace_member_declarations_opt  ->  namespace_member_declarations .   (rule 298)
    namespace_member_declarations  ->  namespace_member_declarations . namespace_member_declaration   (rule 314)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    '}' 	reduce using rule 298 (namespace_member_declarations_opt)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 48
    namespace_declaration	go to state 12
    namespace_member_declaration	go to state 49
    type_declaration	go to state 15
    class_declaration	go to state 16
    struct_declaration	go to state 17
    interface_declaration	go to state 18
    enum_declaration	go to state 19
    delegate_declaration	go to state 20
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 145

    interface_type_list  ->  type_name .   (rule 346)

    $default	reduce using rule 346 (interface_type_list)



state 146

    class_base  ->  ':' class_type .   (rule 343)
    class_base  ->  ':' class_type . COMMA interface_type_list   (rule 345)

    COMMA	shift, and go to state 232

    $default	reduce using rule 343 (class_base)



state 147

    class_base  ->  ':' interface_type_list .   (rule 344)
    interface_type_list  ->  interface_type_list . COMMA type_name   (rule 347)

    COMMA	shift, and go to state 233

    $default	reduce using rule 344 (class_base)



state 148

    class_body  ->  '{' . class_member_declarations_opt '}'   (rule 348)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    '}' 	reduce using rule 349 (class_member_declarations_opt)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 234
    type_declaration	go to state 235
    class_declaration	go to state 16
    class_member_declarations_opt	go to state 236
    class_member_declarations	go to state 237
    class_member_declaration	go to state 238
    constant_declaration	go to state 239
    field_declaration	go to state 240
    method_declaration	go to state 241
    method_header	go to state 242
    property_declaration	go to state 243
    event_declaration	go to state 244
    indexer_declaration	go to state 245
    operator_declaration	go to state 246
    constructor_declaration	go to state 247
    destructor_declaration	go to state 248
    struct_declaration	go to state 17
    interface_declaration	go to state 18
    enum_declaration	go to state 19
    delegate_declaration	go to state 20
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 149

    class_declaration  ->  attributes_opt modifiers_opt CLASS IDENTIFIER class_base_opt class_body . comma_opt   (rule 340)

    ';' 	shift, and go to state 117

    $default	reduce using rule 300 (comma_opt)

    comma_opt	go to state 249



state 150

    delegate_declaration  ->  attributes_opt modifiers_opt DELEGATE return_type IDENTIFIER '(' . formal_parameter_list_opt ')' ';'   (rule 506)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    ')' 	reduce using rule 368 (formal_parameter_list_opt)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 250
    formal_parameter_list_opt	go to state 251
    formal_parameter_list	go to state 252
    formal_parameter	go to state 253
    fixed_parameter	go to state 254
    parameter_array	go to state 255
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 151

    enum_base  ->  ':' integral_type .   (rule 497)

    $default	reduce using rule 497 (enum_base)



state 152

    enum_body  ->  '{' . enum_member_declarations_opt '}'   (rule 498)
    enum_body  ->  '{' . enum_member_declarations COMMA '}'   (rule 499)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    '}' 	reduce using rule 500 (enum_member_declarations_opt)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 256
    enum_member_declarations_opt	go to state 257
    enum_member_declarations	go to state 258
    enum_member_declaration	go to state 259
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 153

    enum_declaration  ->  attributes_opt modifiers_opt ENUM IDENTIFIER enum_base_opt enum_body . comma_opt   (rule 494)

    ';' 	shift, and go to state 117

    $default	reduce using rule 300 (comma_opt)

    comma_opt	go to state 260



state 154

    interface_type_list  ->  interface_type_list . COMMA type_name   (rule 347)
    interface_base  ->  ':' interface_type_list .   (rule 471)

    COMMA	shift, and go to state 233

    $default	reduce using rule 471 (interface_base)



state 155

    interface_body  ->  '{' . interface_member_declarations_opt '}'   (rule 472)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    '}' 	reduce using rule 473 (interface_member_declarations_opt)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 261
    interface_member_declarations_opt	go to state 262
    interface_member_declarations	go to state 263
    interface_member_declaration	go to state 264
    interface_method_declaration	go to state 265
    interface_property_declaration	go to state 266
    interface_indexer_declaration	go to state 267
    interface_event_declaration	go to state 268
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 156

    interface_declaration  ->  attributes_opt modifiers_opt INTERFACE IDENTIFIER interface_base_opt interface_body . comma_opt   (rule 468)

    ';' 	shift, and go to state 117

    $default	reduce using rule 300 (comma_opt)

    comma_opt	go to state 269



state 157

    interface_type_list  ->  interface_type_list . COMMA type_name   (rule 347)
    struct_interfaces  ->  ':' interface_type_list .   (rule 447)

    COMMA	shift, and go to state 233

    $default	reduce using rule 447 (struct_interfaces)



state 158

    struct_body  ->  '{' . struct_member_declarations_opt '}'   (rule 448)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    '}' 	reduce using rule 449 (struct_member_declarations_opt)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 270
    type_declaration	go to state 271
    class_declaration	go to state 16
    constant_declaration	go to state 272
    field_declaration	go to state 273
    method_declaration	go to state 274
    method_header	go to state 242
    property_declaration	go to state 275
    event_declaration	go to state 276
    indexer_declaration	go to state 277
    operator_declaration	go to state 278
    constructor_declaration	go to state 279
    struct_declaration	go to state 17
    struct_member_declarations_opt	go to state 280
    struct_member_declarations	go to state 281
    struct_member_declaration	go to state 282
    interface_declaration	go to state 18
    enum_declaration	go to state 19
    delegate_declaration	go to state 20
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 159

    struct_declaration  ->  attributes_opt modifiers_opt STRUCT IDENTIFIER struct_interfaces_opt struct_body . comma_opt   (rule 444)

    ';' 	shift, and go to state 117

    $default	reduce using rule 300 (comma_opt)

    comma_opt	go to state 283



state 160

    attribute_section  ->  ENTER_attrib LEFT_BRACKET attribute_target_specifier_opt attribute_list COMMA RIGHT_BRACKET . EXIT_attrib   (rule 511)

    $default	reduce using rule 532 (EXIT_attrib)

    EXIT_attrib	go to state 284



state 161

    attribute_list  ->  attribute_list COMMA attribute .   (rule 525)

    $default	reduce using rule 525 (attribute_list)



state 162

    attribute_section  ->  ENTER_attrib LEFT_BRACKET attribute_target_specifier_opt attribute_list RIGHT_BRACKET EXIT_attrib .   (rule 510)

    $default	reduce using rule 510 (attribute_section)



state 163

    literal  ->  INTEGER_LITERAL .   (rule 2)

    $default	reduce using rule 2 (literal)



state 164

    literal  ->  REAL_LITERAL .   (rule 3)

    $default	reduce using rule 3 (literal)



state 165

    literal  ->  CHARACTER_LITERAL .   (rule 4)

    $default	reduce using rule 4 (literal)



state 166

    literal  ->  STRING_LITERAL .   (rule 5)

    $default	reduce using rule 5 (literal)



state 167

    base_access  ->  BASE . '.' IDENTIFIER   (rule 79)
    base_access  ->  BASE . LEFT_BRACKET expression_list RIGHT_BRACKET   (rule 80)

    LEFT_BRACKET	shift, and go to state 285
    '.' 	shift, and go to state 286



state 168

    checked_expression  ->  CHECKED . '(' expression ')'   (rule 91)

    '(' 	shift, and go to state 287



state 169

    boolean_literal  ->  FALSE .   (rule 8)

    $default	reduce using rule 8 (boolean_literal)



state 170

    object_creation_expression  ->  NEW . type '(' argument_list_opt ')'   (rule 84)
    array_creation_expression  ->  NEW . non_array_type LEFT_BRACKET expression_list RIGHT_BRACKET rank_specifiers_opt array_initializer_opt   (rule 85)
    array_creation_expression  ->  NEW . array_type array_initializer   (rule 86)

    IDENTIFIER	shift, and go to state 52
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 288

    type_name	go to state 94
    type	go to state 289
    non_array_type	go to state 290
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 291
    qualified_identifier	go to state 105
    qualifier	go to state 10



state 171

    literal  ->  NULL_LITERAL .   (rule 6)

    $default	reduce using rule 6 (literal)



state 172

    sizeof_expression  ->  SIZEOF . '(' type ')'   (rule 95)

    '(' 	shift, and go to state 292



state 173

    this_access  ->  THIS .   (rule 78)

    $default	reduce using rule 78 (this_access)



state 174

    boolean_literal  ->  TRUE .   (rule 7)

    $default	reduce using rule 7 (boolean_literal)



state 175

    typeof_expression  ->  TYPEOF . '(' type ')'   (rule 89)
    typeof_expression  ->  TYPEOF . '(' VOID ')'   (rule 90)

    '(' 	shift, and go to state 293



state 176

    unchecked_expression  ->  UNCHECKED . '(' expression ')'   (rule 92)

    '(' 	shift, and go to state 294



state 177

    pre_increment_expression  ->  PLUSPLUS . unary_expression   (rule 105)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 295
    cast_expression	go to state 216
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 178

    pre_decrement_expression  ->  MINUSMINUS . unary_expression   (rule 106)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 296
    cast_expression	go to state 216
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 179

    unary_expression  ->  '*' . unary_expression   (rule 110)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 297
    cast_expression	go to state 216
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 180

    parenthesized_expression  ->  '(' . expression ')'   (rule 64)
    cast_expression  ->  '(' . expression ')' unary_expression_not_plusminus   (rule 114)
    cast_expression  ->  '(' . multiplicative_expression '*' ')' unary_expression   (rule 115)
    cast_expression  ->  '(' . qualified_identifier rank_specifier type_quals_opt ')' unary_expression   (rule 116)
    cast_expression  ->  '(' . primitive_type type_quals_opt ')' unary_expression   (rule 117)
    cast_expression  ->  '(' . class_type type_quals_opt ')' unary_expression   (rule 118)
    cast_expression  ->  '(' . VOID type_quals_opt ')' unary_expression   (rule 119)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 298
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 299
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 300
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 301
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 302
    qualified_identifier	go to state 303
    qualifier	go to state 10



state 181

    addressof_expression  ->  '&' . unary_expression   (rule 94)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 304
    cast_expression	go to state 216
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 182

    unary_expression_not_plusminus  ->  '!' . unary_expression   (rule 102)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 305
    cast_expression	go to state 216
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 183

    unary_expression_not_plusminus  ->  '~' . unary_expression   (rule 103)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 306
    cast_expression	go to state 216
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 184

    unary_expression  ->  '+' . unary_expression   (rule 108)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 307
    cast_expression	go to state 216
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 185

    unary_expression  ->  '-' . unary_expression   (rule 109)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 308
    cast_expression	go to state 216
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 186

    primary_expression_no_parenthesis  ->  literal .   (rule 52)

    $default	reduce using rule 52 (primary_expression_no_parenthesis)



state 187

    literal  ->  boolean_literal .   (rule 1)

    $default	reduce using rule 1 (literal)



state 188

    member_access  ->  primitive_type . '.' IDENTIFIER   (rule 66)

    '.' 	shift, and go to state 309



state 189

    member_access  ->  class_type . '.' IDENTIFIER   (rule 67)

    '.' 	shift, and go to state 310



state 190

    member_access  ->  primary_expression . '.' IDENTIFIER   (rule 65)
    element_access  ->  primary_expression . LEFT_BRACKET expression_list RIGHT_BRACKET   (rule 72)
    postfix_expression  ->  primary_expression .   (rule 96)

    LEFT_BRACKET	shift, and go to state 311
    '.' 	shift, and go to state 312

    $default	reduce using rule 96 (postfix_expression)



state 191

    primary_expression  ->  primary_expression_no_parenthesis .   (rule 51)
    invocation_expression  ->  primary_expression_no_parenthesis . '(' argument_list_opt ')'   (rule 68)

    '(' 	shift, and go to state 313

    $default	reduce using rule 51 (primary_expression)



state 192

    primary_expression  ->  parenthesized_expression .   (rule 50)

    $default	reduce using rule 50 (primary_expression)



state 193

    primary_expression_no_parenthesis  ->  member_access .   (rule 54)

    $default	reduce using rule 54 (primary_expression_no_parenthesis)



state 194

    primary_expression_no_parenthesis  ->  invocation_expression .   (rule 55)

    $default	reduce using rule 55 (primary_expression_no_parenthesis)



state 195

    primary_expression_no_parenthesis  ->  element_access .   (rule 56)

    $default	reduce using rule 56 (primary_expression_no_parenthesis)



state 196

    attribute_arguments  ->  '(' expression_list_opt . ')'   (rule 530)

    ')' 	shift, and go to state 314



state 197

    expression_list_opt  ->  expression_list .   (rule 75)
    expression_list  ->  expression_list . COMMA expression   (rule 77)

    COMMA	shift, and go to state 315

    $default	reduce using rule 75 (expression_list_opt)



state 198

    primary_expression_no_parenthesis  ->  this_access .   (rule 57)

    $default	reduce using rule 57 (primary_expression_no_parenthesis)



state 199

    primary_expression_no_parenthesis  ->  base_access .   (rule 58)

    $default	reduce using rule 58 (primary_expression_no_parenthesis)



state 200

    postfix_expression  ->  post_increment_expression .   (rule 98)

    $default	reduce using rule 98 (postfix_expression)



state 201

    postfix_expression  ->  post_decrement_expression .   (rule 99)

    $default	reduce using rule 99 (postfix_expression)



state 202

    primary_expression_no_parenthesis  ->  new_expression .   (rule 59)

    $default	reduce using rule 59 (primary_expression_no_parenthesis)



state 203

    new_expression  ->  object_creation_expression .   (rule 83)

    $default	reduce using rule 83 (new_expression)



state 204

    primary_expression_no_parenthesis  ->  array_creation_expression .   (rule 53)

    $default	reduce using rule 53 (primary_expression_no_parenthesis)



state 205

    primary_expression_no_parenthesis  ->  typeof_expression .   (rule 60)

    $default	reduce using rule 60 (primary_expression_no_parenthesis)



state 206

    primary_expression_no_parenthesis  ->  checked_expression .   (rule 62)

    $default	reduce using rule 62 (primary_expression_no_parenthesis)



state 207

    primary_expression_no_parenthesis  ->  unchecked_expression .   (rule 63)

    $default	reduce using rule 63 (primary_expression_no_parenthesis)



state 208

    postfix_expression  ->  pointer_member_access .   (rule 100)

    $default	reduce using rule 100 (postfix_expression)



state 209

    unary_expression  ->  addressof_expression .   (rule 113)

    $default	reduce using rule 113 (unary_expression)



state 210

    primary_expression_no_parenthesis  ->  sizeof_expression .   (rule 61)

    $default	reduce using rule 61 (primary_expression_no_parenthesis)



state 211

    post_increment_expression  ->  postfix_expression . PLUSPLUS   (rule 81)
    post_decrement_expression  ->  postfix_expression . MINUSMINUS   (rule 82)
    pointer_member_access  ->  postfix_expression . ARROW IDENTIFIER   (rule 93)
    unary_expression_not_plusminus  ->  postfix_expression .   (rule 101)

    PLUSPLUS	shift, and go to state 316
    MINUSMINUS	shift, and go to state 317
    ARROW	shift, and go to state 318

    $default	reduce using rule 101 (unary_expression_not_plusminus)



state 212

    unary_expression  ->  unary_expression_not_plusminus .   (rule 107)

    $default	reduce using rule 107 (unary_expression)



state 213

    unary_expression  ->  pre_increment_expression .   (rule 111)

    $default	reduce using rule 111 (unary_expression)



state 214

    unary_expression  ->  pre_decrement_expression .   (rule 112)

    $default	reduce using rule 112 (unary_expression)



state 215

    multiplicative_expression  ->  unary_expression .   (rule 126)
    assignment  ->  unary_expression . assignment_operator expression   (rule 158)

    PLUSEQ	shift, and go to state 319
    MINUSEQ	shift, and go to state 320
    STAREQ	shift, and go to state 321
    DIVEQ	shift, and go to state 322
    MODEQ	shift, and go to state 323
    XOREQ	shift, and go to state 324
    ANDEQ	shift, and go to state 325
    OREQ	shift, and go to state 326
    GTGTEQ	shift, and go to state 327
    LTLTEQ	shift, and go to state 328
    '=' 	shift, and go to state 329

    $default	reduce using rule 126 (multiplicative_expression)

    assignment_operator	go to state 330



state 216

    unary_expression_not_plusminus  ->  cast_expression .   (rule 104)

    $default	reduce using rule 104 (unary_expression_not_plusminus)



state 217

    multiplicative_expression  ->  multiplicative_expression . '*' unary_expression   (rule 127)
    multiplicative_expression  ->  multiplicative_expression . '/' unary_expression   (rule 128)
    multiplicative_expression  ->  multiplicative_expression . '%' unary_expression   (rule 129)
    additive_expression  ->  multiplicative_expression .   (rule 130)

    '*' 	shift, and go to state 331
    '/' 	shift, and go to state 332
    '%' 	shift, and go to state 333

    $default	reduce using rule 130 (additive_expression)



state 218

    additive_expression  ->  additive_expression . '+' multiplicative_expression   (rule 131)
    additive_expression  ->  additive_expression . '-' multiplicative_expression   (rule 132)
    shift_expression  ->  additive_expression .   (rule 133)

    '+' 	shift, and go to state 334
    '-' 	shift, and go to state 335

    $default	reduce using rule 133 (shift_expression)



state 219

    shift_expression  ->  shift_expression . LTLT additive_expression   (rule 134)
    shift_expression  ->  shift_expression . GTGT additive_expression   (rule 135)
    relational_expression  ->  shift_expression .   (rule 136)

    LTLT	shift, and go to state 336
    GTGT	shift, and go to state 337

    $default	reduce using rule 136 (relational_expression)



state 220

    relational_expression  ->  relational_expression . '<' shift_expression   (rule 137)
    relational_expression  ->  relational_expression . '>' shift_expression   (rule 138)
    relational_expression  ->  relational_expression . LEQ shift_expression   (rule 139)
    relational_expression  ->  relational_expression . GEQ shift_expression   (rule 140)
    relational_expression  ->  relational_expression . IS type   (rule 141)
    relational_expression  ->  relational_expression . AS type   (rule 142)
    equality_expression  ->  relational_expression .   (rule 143)

    AS  	shift, and go to state 338
    IS  	shift, and go to state 339
    LEQ 	shift, and go to state 340
    GEQ 	shift, and go to state 341
    '<' 	shift, and go to state 342
    '>' 	shift, and go to state 343

    $default	reduce using rule 143 (equality_expression)



state 221

    equality_expression  ->  equality_expression . EQEQ relational_expression   (rule 144)
    equality_expression  ->  equality_expression . NOTEQ relational_expression   (rule 145)
    and_expression  ->  equality_expression .   (rule 146)

    EQEQ	shift, and go to state 344
    NOTEQ	shift, and go to state 345

    $default	reduce using rule 146 (and_expression)



state 222

    and_expression  ->  and_expression . '&' equality_expression   (rule 147)
    exclusive_or_expression  ->  and_expression .   (rule 148)

    '&' 	shift, and go to state 346

    $default	reduce using rule 148 (exclusive_or_expression)



state 223

    exclusive_or_expression  ->  exclusive_or_expression . '^' and_expression   (rule 149)
    inclusive_or_expression  ->  exclusive_or_expression .   (rule 150)

    '^' 	shift, and go to state 347

    $default	reduce using rule 150 (inclusive_or_expression)



state 224

    inclusive_or_expression  ->  inclusive_or_expression . '|' exclusive_or_expression   (rule 151)
    conditional_and_expression  ->  inclusive_or_expression .   (rule 152)

    '|' 	shift, and go to state 348

    $default	reduce using rule 152 (conditional_and_expression)



state 225

    conditional_and_expression  ->  conditional_and_expression . ANDAND inclusive_or_expression   (rule 153)
    conditional_or_expression  ->  conditional_and_expression .   (rule 154)

    ANDAND	shift, and go to state 349

    $default	reduce using rule 154 (conditional_or_expression)



state 226

    conditional_or_expression  ->  conditional_or_expression . OROR conditional_and_expression   (rule 155)
    conditional_expression  ->  conditional_or_expression .   (rule 156)
    conditional_expression  ->  conditional_or_expression . '?' expression ':' expression   (rule 157)

    OROR	shift, and go to state 350
    '?' 	shift, and go to state 351

    $default	reduce using rule 156 (conditional_expression)



state 227

    expression  ->  conditional_expression .   (rule 170)

    $default	reduce using rule 170 (expression)



state 228

    expression  ->  assignment .   (rule 171)

    $default	reduce using rule 171 (expression)



state 229

    expression_list  ->  expression .   (rule 76)

    $default	reduce using rule 76 (expression_list)



state 230

    invocation_expression  ->  qualified_identifier . '(' argument_list_opt ')'   (rule 69)
    element_access  ->  qualified_identifier . LEFT_BRACKET expression_list RIGHT_BRACKET   (rule 73)
    postfix_expression  ->  qualified_identifier .   (rule 97)

    LEFT_BRACKET	shift, and go to state 352
    '(' 	shift, and go to state 353

    $default	reduce using rule 97 (postfix_expression)



state 231

    namespace_body  ->  '{' using_directives_opt namespace_member_declarations_opt '}' .   (rule 306)

    $default	reduce using rule 306 (namespace_body)



state 232

    class_base  ->  ':' class_type COMMA . interface_type_list   (rule 345)

    IDENTIFIER	shift, and go to state 52

    type_name	go to state 145
    qualified_identifier	go to state 111
    qualifier	go to state 10
    interface_type_list	go to state 354



state 233

    interface_type_list  ->  interface_type_list COMMA . type_name   (rule 347)

    IDENTIFIER	shift, and go to state 52

    type_name	go to state 355
    qualified_identifier	go to state 111
    qualifier	go to state 10



state 234

    class_declaration  ->  attributes_opt . modifiers_opt CLASS IDENTIFIER class_base_opt class_body comma_opt   (rule 340)
    constant_declaration  ->  attributes_opt . modifiers_opt CONST type constant_declarators ';'   (rule 363)
    field_declaration  ->  attributes_opt . modifiers_opt type variable_declarators ';'   (rule 364)
    method_header  ->  attributes_opt . modifiers_opt type qualified_identifier '(' formal_parameter_list_opt ')'   (rule 366)
    method_header  ->  attributes_opt . modifiers_opt VOID qualified_identifier '(' formal_parameter_list_opt ')'   (rule 367)
    property_declaration  ->  attributes_opt . modifiers_opt type qualified_identifier ENTER_getset '{' accessor_declarations '}' EXIT_getset   (rule 383)
    event_declaration  ->  attributes_opt . modifiers_opt EVENT type variable_declarators ';'   (rule 394)
    event_declaration  ->  attributes_opt . modifiers_opt EVENT type qualified_identifier ENTER_accessor_decl '{' event_accessor_declarations '}' EXIT_accessor_decl   (rule 395)
    indexer_declaration  ->  attributes_opt . modifiers_opt indexer_declarator ENTER_getset '{' accessor_declarations '}' EXIT_getset   (rule 400)
    operator_declaration  ->  attributes_opt . modifiers_opt operator_declarator operator_body   (rule 404)
    constructor_declaration  ->  attributes_opt . modifiers_opt constructor_declarator constructor_body   (rule 433)
    destructor_declaration  ->  attributes_opt . modifiers_opt '~' IDENTIFIER '(' ')' block   (rule 439)
    struct_declaration  ->  attributes_opt . modifiers_opt STRUCT IDENTIFIER struct_interfaces_opt struct_body comma_opt   (rule 444)
    interface_declaration  ->  attributes_opt . modifiers_opt INTERFACE IDENTIFIER interface_base_opt interface_body comma_opt   (rule 468)
    enum_declaration  ->  attributes_opt . modifiers_opt ENUM IDENTIFIER enum_base_opt enum_body comma_opt   (rule 494)
    delegate_declaration  ->  attributes_opt . modifiers_opt DELEGATE return_type IDENTIFIER '(' formal_parameter_list_opt ')' ';'   (rule 506)

    ABSTRACT	shift, and go to state 30
    EXTERN	shift, and go to state 31
    INTERNAL	shift, and go to state 32
    NEW 	shift, and go to state 34
    OVERRIDE	shift, and go to state 35
    PRIVATE	shift, and go to state 36
    PROTECTED	shift, and go to state 37
    PUBLIC	shift, and go to state 38
    READONLY	shift, and go to state 39
    SEALED	shift, and go to state 40
    STATIC	shift, and go to state 41
    UNSAFE	shift, and go to state 42
    VIRTUAL	shift, and go to state 43
    VOLATILE	shift, and go to state 44

    $default	reduce using rule 322 (modifiers_opt)

    modifiers_opt	go to state 356
    modifiers	go to state 46
    modifier	go to state 47



state 235

    class_member_declaration  ->  type_declaration .   (rule 362)

    $default	reduce using rule 362 (class_member_declaration)



state 236

    class_body  ->  '{' class_member_declarations_opt . '}'   (rule 348)

    '}' 	shift, and go to state 357



state 237

    class_member_declarations_opt  ->  class_member_declarations .   (rule 350)
    class_member_declarations  ->  class_member_declarations . class_member_declaration   (rule 352)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    '}' 	reduce using rule 350 (class_member_declarations_opt)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 234
    type_declaration	go to state 235
    class_declaration	go to state 16
    class_member_declaration	go to state 358
    constant_declaration	go to state 239
    field_declaration	go to state 240
    method_declaration	go to state 241
    method_header	go to state 242
    property_declaration	go to state 243
    event_declaration	go to state 244
    indexer_declaration	go to state 245
    operator_declaration	go to state 246
    constructor_declaration	go to state 247
    destructor_declaration	go to state 248
    struct_declaration	go to state 17
    interface_declaration	go to state 18
    enum_declaration	go to state 19
    delegate_declaration	go to state 20
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 238

    class_member_declarations  ->  class_member_declaration .   (rule 351)

    $default	reduce using rule 351 (class_member_declarations)



state 239

    class_member_declaration  ->  constant_declaration .   (rule 353)

    $default	reduce using rule 353 (class_member_declaration)



state 240

    class_member_declaration  ->  field_declaration .   (rule 354)

    $default	reduce using rule 354 (class_member_declaration)



state 241

    class_member_declaration  ->  method_declaration .   (rule 355)

    $default	reduce using rule 355 (class_member_declaration)



state 242

    method_declaration  ->  method_header . method_body   (rule 365)

    '{' 	shift, and go to state 359
    ';' 	shift, and go to state 360

    block	go to state 361
    method_body	go to state 362



state 243

    class_member_declaration  ->  property_declaration .   (rule 356)

    $default	reduce using rule 356 (class_member_declaration)



state 244

    class_member_declaration  ->  event_declaration .   (rule 357)

    $default	reduce using rule 357 (class_member_declaration)



state 245

    class_member_declaration  ->  indexer_declaration .   (rule 358)

    $default	reduce using rule 358 (class_member_declaration)



state 246

    class_member_declaration  ->  operator_declaration .   (rule 359)

    $default	reduce using rule 359 (class_member_declaration)



state 247

    class_member_declaration  ->  constructor_declaration .   (rule 360)

    $default	reduce using rule 360 (class_member_declaration)



state 248

    class_member_declaration  ->  destructor_declaration .   (rule 361)

    $default	reduce using rule 361 (class_member_declaration)



state 249

    class_declaration  ->  attributes_opt modifiers_opt CLASS IDENTIFIER class_base_opt class_body comma_opt .   (rule 340)

    $default	reduce using rule 340 (class_declaration)



state 250

    fixed_parameter  ->  attributes_opt . parameter_modifier_opt type IDENTIFIER   (rule 378)
    parameter_array  ->  attributes_opt . PARAMS type IDENTIFIER   (rule 382)

    OUT 	shift, and go to state 363
    PARAMS	shift, and go to state 364
    REF 	shift, and go to state 365

    $default	reduce using rule 379 (parameter_modifier_opt)

    parameter_modifier_opt	go to state 366



state 251

    delegate_declaration  ->  attributes_opt modifiers_opt DELEGATE return_type IDENTIFIER '(' formal_parameter_list_opt . ')' ';'   (rule 506)

    ')' 	shift, and go to state 367



state 252

    formal_parameter_list_opt  ->  formal_parameter_list .   (rule 369)
    formal_parameter_list  ->  formal_parameter_list . COMMA formal_parameter   (rule 375)

    COMMA	shift, and go to state 368

    $default	reduce using rule 369 (formal_parameter_list_opt)



state 253

    formal_parameter_list  ->  formal_parameter .   (rule 374)

    $default	reduce using rule 374 (formal_parameter_list)



state 254

    formal_parameter  ->  fixed_parameter .   (rule 376)

    $default	reduce using rule 376 (formal_parameter)



state 255

    formal_parameter  ->  parameter_array .   (rule 377)

    $default	reduce using rule 377 (formal_parameter)



state 256

    enum_member_declaration  ->  attributes_opt . IDENTIFIER   (rule 504)
    enum_member_declaration  ->  attributes_opt . IDENTIFIER '=' constant_expression   (rule 505)

    IDENTIFIER	shift, and go to state 369



state 257

    enum_body  ->  '{' enum_member_declarations_opt . '}'   (rule 498)

    '}' 	shift, and go to state 370



state 258

    enum_body  ->  '{' enum_member_declarations . COMMA '}'   (rule 499)
    enum_member_declarations_opt  ->  enum_member_declarations .   (rule 501)
    enum_member_declarations  ->  enum_member_declarations . COMMA enum_member_declaration   (rule 503)

    COMMA	shift, and go to state 371

    $default	reduce using rule 501 (enum_member_declarations_opt)



state 259

    enum_member_declarations  ->  enum_member_declaration .   (rule 502)

    $default	reduce using rule 502 (enum_member_declarations)



state 260

    enum_declaration  ->  attributes_opt modifiers_opt ENUM IDENTIFIER enum_base_opt enum_body comma_opt .   (rule 494)

    $default	reduce using rule 494 (enum_declaration)



state 261

    interface_method_declaration  ->  attributes_opt . new_opt type IDENTIFIER '(' formal_parameter_list_opt ')' interface_empty_body   (rule 481)
    interface_method_declaration  ->  attributes_opt . new_opt VOID IDENTIFIER '(' formal_parameter_list_opt ')' interface_empty_body   (rule 482)
    interface_property_declaration  ->  attributes_opt . new_opt type IDENTIFIER ENTER_getset '{' interface_accessors '}' EXIT_getset   (rule 485)
    interface_indexer_declaration  ->  attributes_opt . new_opt type THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET ENTER_getset '{' interface_accessors '}' EXIT_getset   (rule 486)
    interface_event_declaration  ->  attributes_opt . new_opt EVENT type IDENTIFIER interface_empty_body   (rule 491)

    NEW 	shift, and go to state 372

    $default	reduce using rule 483 (new_opt)

    new_opt	go to state 373



state 262

    interface_body  ->  '{' interface_member_declarations_opt . '}'   (rule 472)

    '}' 	shift, and go to state 374



state 263

    interface_member_declarations_opt  ->  interface_member_declarations .   (rule 474)
    interface_member_declarations  ->  interface_member_declarations . interface_member_declaration   (rule 476)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    '}' 	reduce using rule 474 (interface_member_declarations_opt)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 261
    interface_member_declaration	go to state 375
    interface_method_declaration	go to state 265
    interface_property_declaration	go to state 266
    interface_indexer_declaration	go to state 267
    interface_event_declaration	go to state 268
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 264

    interface_member_declarations  ->  interface_member_declaration .   (rule 475)

    $default	reduce using rule 475 (interface_member_declarations)



state 265

    interface_member_declaration  ->  interface_method_declaration .   (rule 477)

    $default	reduce using rule 477 (interface_member_declaration)



state 266

    interface_member_declaration  ->  interface_property_declaration .   (rule 478)

    $default	reduce using rule 478 (interface_member_declaration)



state 267

    interface_member_declaration  ->  interface_indexer_declaration .   (rule 480)

    $default	reduce using rule 480 (interface_member_declaration)



state 268

    interface_member_declaration  ->  interface_event_declaration .   (rule 479)

    $default	reduce using rule 479 (interface_member_declaration)



state 269

    interface_declaration  ->  attributes_opt modifiers_opt INTERFACE IDENTIFIER interface_base_opt interface_body comma_opt .   (rule 468)

    $default	reduce using rule 468 (interface_declaration)



state 270

    class_declaration  ->  attributes_opt . modifiers_opt CLASS IDENTIFIER class_base_opt class_body comma_opt   (rule 340)
    constant_declaration  ->  attributes_opt . modifiers_opt CONST type constant_declarators ';'   (rule 363)
    field_declaration  ->  attributes_opt . modifiers_opt type variable_declarators ';'   (rule 364)
    method_header  ->  attributes_opt . modifiers_opt type qualified_identifier '(' formal_parameter_list_opt ')'   (rule 366)
    method_header  ->  attributes_opt . modifiers_opt VOID qualified_identifier '(' formal_parameter_list_opt ')'   (rule 367)
    property_declaration  ->  attributes_opt . modifiers_opt type qualified_identifier ENTER_getset '{' accessor_declarations '}' EXIT_getset   (rule 383)
    event_declaration  ->  attributes_opt . modifiers_opt EVENT type variable_declarators ';'   (rule 394)
    event_declaration  ->  attributes_opt . modifiers_opt EVENT type qualified_identifier ENTER_accessor_decl '{' event_accessor_declarations '}' EXIT_accessor_decl   (rule 395)
    indexer_declaration  ->  attributes_opt . modifiers_opt indexer_declarator ENTER_getset '{' accessor_declarations '}' EXIT_getset   (rule 400)
    operator_declaration  ->  attributes_opt . modifiers_opt operator_declarator operator_body   (rule 404)
    constructor_declaration  ->  attributes_opt . modifiers_opt constructor_declarator constructor_body   (rule 433)
    struct_declaration  ->  attributes_opt . modifiers_opt STRUCT IDENTIFIER struct_interfaces_opt struct_body comma_opt   (rule 444)
    interface_declaration  ->  attributes_opt . modifiers_opt INTERFACE IDENTIFIER interface_base_opt interface_body comma_opt   (rule 468)
    enum_declaration  ->  attributes_opt . modifiers_opt ENUM IDENTIFIER enum_base_opt enum_body comma_opt   (rule 494)
    delegate_declaration  ->  attributes_opt . modifiers_opt DELEGATE return_type IDENTIFIER '(' formal_parameter_list_opt ')' ';'   (rule 506)

    ABSTRACT	shift, and go to state 30
    EXTERN	shift, and go to state 31
    INTERNAL	shift, and go to state 32
    NEW 	shift, and go to state 34
    OVERRIDE	shift, and go to state 35
    PRIVATE	shift, and go to state 36
    PROTECTED	shift, and go to state 37
    PUBLIC	shift, and go to state 38
    READONLY	shift, and go to state 39
    SEALED	shift, and go to state 40
    STATIC	shift, and go to state 41
    UNSAFE	shift, and go to state 42
    VIRTUAL	shift, and go to state 43
    VOLATILE	shift, and go to state 44

    $default	reduce using rule 322 (modifiers_opt)

    modifiers_opt	go to state 376
    modifiers	go to state 46
    modifier	go to state 47



state 271

    struct_member_declaration  ->  type_declaration .   (rule 461)

    $default	reduce using rule 461 (struct_member_declaration)



state 272

    struct_member_declaration  ->  constant_declaration .   (rule 453)

    $default	reduce using rule 453 (struct_member_declaration)



state 273

    struct_member_declaration  ->  field_declaration .   (rule 454)

    $default	reduce using rule 454 (struct_member_declaration)



state 274

    struct_member_declaration  ->  method_declaration .   (rule 455)

    $default	reduce using rule 455 (struct_member_declaration)



state 275

    struct_member_declaration  ->  property_declaration .   (rule 456)

    $default	reduce using rule 456 (struct_member_declaration)



state 276

    struct_member_declaration  ->  event_declaration .   (rule 457)

    $default	reduce using rule 457 (struct_member_declaration)



state 277

    struct_member_declaration  ->  indexer_declaration .   (rule 458)

    $default	reduce using rule 458 (struct_member_declaration)



state 278

    struct_member_declaration  ->  operator_declaration .   (rule 459)

    $default	reduce using rule 459 (struct_member_declaration)



state 279

    struct_member_declaration  ->  constructor_declaration .   (rule 460)

    $default	reduce using rule 460 (struct_member_declaration)



state 280

    struct_body  ->  '{' struct_member_declarations_opt . '}'   (rule 448)

    '}' 	shift, and go to state 377



state 281

    struct_member_declarations_opt  ->  struct_member_declarations .   (rule 450)
    struct_member_declarations  ->  struct_member_declarations . struct_member_declaration   (rule 452)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    '}' 	reduce using rule 450 (struct_member_declarations_opt)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 270
    type_declaration	go to state 271
    class_declaration	go to state 16
    constant_declaration	go to state 272
    field_declaration	go to state 273
    method_declaration	go to state 274
    method_header	go to state 242
    property_declaration	go to state 275
    event_declaration	go to state 276
    indexer_declaration	go to state 277
    operator_declaration	go to state 278
    constructor_declaration	go to state 279
    struct_declaration	go to state 17
    struct_member_declaration	go to state 378
    interface_declaration	go to state 18
    enum_declaration	go to state 19
    delegate_declaration	go to state 20
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 282

    struct_member_declarations  ->  struct_member_declaration .   (rule 451)

    $default	reduce using rule 451 (struct_member_declarations)



state 283

    struct_declaration  ->  attributes_opt modifiers_opt STRUCT IDENTIFIER struct_interfaces_opt struct_body comma_opt .   (rule 444)

    $default	reduce using rule 444 (struct_declaration)



state 284

    attribute_section  ->  ENTER_attrib LEFT_BRACKET attribute_target_specifier_opt attribute_list COMMA RIGHT_BRACKET EXIT_attrib .   (rule 511)

    $default	reduce using rule 511 (attribute_section)



state 285

    base_access  ->  BASE LEFT_BRACKET . expression_list RIGHT_BRACKET   (rule 80)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    expression_list	go to state 379
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 229
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 286

    base_access  ->  BASE '.' . IDENTIFIER   (rule 79)

    IDENTIFIER	shift, and go to state 380



state 287

    checked_expression  ->  CHECKED '(' . expression ')'   (rule 91)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 381
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 288

    pointer_type  ->  VOID . '*'   (rule 37)

    '*' 	shift, and go to state 122



state 289

    pointer_type  ->  type . '*'   (rule 36)
    object_creation_expression  ->  NEW type . '(' argument_list_opt ')'   (rule 84)

    '*' 	shift, and go to state 123
    '(' 	shift, and go to state 382



state 290

    type  ->  non_array_type .   (rule 11)
    array_creation_expression  ->  NEW non_array_type . LEFT_BRACKET expression_list RIGHT_BRACKET rank_specifiers_opt array_initializer_opt   (rule 85)

    LEFT_BRACKET	shift, and go to state 383

    $default	reduce using rule 11 (type)



state 291

    type  ->  array_type .   (rule 12)
    array_type  ->  array_type . rank_specifier   (rule 38)
    array_creation_expression  ->  NEW array_type . array_initializer   (rule 86)

    RANK_SPECIFIER	shift, and go to state 124
    '{' 	shift, and go to state 384

    $default	reduce using rule 12 (type)

    rank_specifier	go to state 126
    array_initializer	go to state 385



state 292

    sizeof_expression  ->  SIZEOF '(' . type ')'   (rule 95)

    IDENTIFIER	shift, and go to state 52
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 288

    type_name	go to state 94
    type	go to state 386
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10



state 293

    typeof_expression  ->  TYPEOF '(' . type ')'   (rule 89)
    typeof_expression  ->  TYPEOF '(' . VOID ')'   (rule 90)

    IDENTIFIER	shift, and go to state 52
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 387

    type_name	go to state 94
    type	go to state 388
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10



state 294

    unchecked_expression  ->  UNCHECKED '(' . expression ')'   (rule 92)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 389
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 295

    pre_increment_expression  ->  PLUSPLUS unary_expression .   (rule 105)

    $default	reduce using rule 105 (pre_increment_expression)



state 296

    pre_decrement_expression  ->  MINUSMINUS unary_expression .   (rule 106)

    $default	reduce using rule 106 (pre_decrement_expression)



state 297

    unary_expression  ->  '*' unary_expression .   (rule 110)

    $default	reduce using rule 110 (unary_expression)



state 298

    cast_expression  ->  '(' VOID . type_quals_opt ')' unary_expression   (rule 119)

    RANK_SPECIFIER	shift, and go to state 124
    '*' 	shift, and go to state 390

    $default	reduce using rule 120 (type_quals_opt)

    rank_specifier	go to state 391
    type_quals_opt	go to state 392
    type_quals	go to state 393
    type_qual	go to state 394



state 299

    member_access  ->  primitive_type . '.' IDENTIFIER   (rule 66)
    cast_expression  ->  '(' primitive_type . type_quals_opt ')' unary_expression   (rule 117)

    RANK_SPECIFIER	shift, and go to state 124
    '*' 	shift, and go to state 390
    '.' 	shift, and go to state 309

    $default	reduce using rule 120 (type_quals_opt)

    rank_specifier	go to state 391
    type_quals_opt	go to state 395
    type_quals	go to state 393
    type_qual	go to state 394



state 300

    member_access  ->  class_type . '.' IDENTIFIER   (rule 67)
    cast_expression  ->  '(' class_type . type_quals_opt ')' unary_expression   (rule 118)

    RANK_SPECIFIER	shift, and go to state 124
    '*' 	shift, and go to state 390
    '.' 	shift, and go to state 310

    $default	reduce using rule 120 (type_quals_opt)

    rank_specifier	go to state 391
    type_quals_opt	go to state 396
    type_quals	go to state 393
    type_qual	go to state 394



state 301

    cast_expression  ->  '(' multiplicative_expression . '*' ')' unary_expression   (rule 115)
    multiplicative_expression  ->  multiplicative_expression . '*' unary_expression   (rule 127)
    multiplicative_expression  ->  multiplicative_expression . '/' unary_expression   (rule 128)
    multiplicative_expression  ->  multiplicative_expression . '%' unary_expression   (rule 129)
    additive_expression  ->  multiplicative_expression .   (rule 130)

    '*' 	shift, and go to state 397
    '/' 	shift, and go to state 332
    '%' 	shift, and go to state 333

    $default	reduce using rule 130 (additive_expression)



state 302

    parenthesized_expression  ->  '(' expression . ')'   (rule 64)
    cast_expression  ->  '(' expression . ')' unary_expression_not_plusminus   (rule 114)

    ')' 	shift, and go to state 398



state 303

    invocation_expression  ->  qualified_identifier . '(' argument_list_opt ')'   (rule 69)
    element_access  ->  qualified_identifier . LEFT_BRACKET expression_list RIGHT_BRACKET   (rule 73)
    postfix_expression  ->  qualified_identifier .   (rule 97)
    cast_expression  ->  '(' qualified_identifier . rank_specifier type_quals_opt ')' unary_expression   (rule 116)

    RANK_SPECIFIER	shift, and go to state 124
    LEFT_BRACKET	shift, and go to state 352
    '(' 	shift, and go to state 353

    $default	reduce using rule 97 (postfix_expression)

    rank_specifier	go to state 399



state 304

    addressof_expression  ->  '&' unary_expression .   (rule 94)

    $default	reduce using rule 94 (addressof_expression)



state 305

    unary_expression_not_plusminus  ->  '!' unary_expression .   (rule 102)

    $default	reduce using rule 102 (unary_expression_not_plusminus)



state 306

    unary_expression_not_plusminus  ->  '~' unary_expression .   (rule 103)

    $default	reduce using rule 103 (unary_expression_not_plusminus)



state 307

    unary_expression  ->  '+' unary_expression .   (rule 108)

    $default	reduce using rule 108 (unary_expression)



state 308

    unary_expression  ->  '-' unary_expression .   (rule 109)

    $default	reduce using rule 109 (unary_expression)



state 309

    member_access  ->  primitive_type '.' . IDENTIFIER   (rule 66)

    IDENTIFIER	shift, and go to state 400



state 310

    member_access  ->  class_type '.' . IDENTIFIER   (rule 67)

    IDENTIFIER	shift, and go to state 401



state 311

    element_access  ->  primary_expression LEFT_BRACKET . expression_list RIGHT_BRACKET   (rule 72)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    expression_list	go to state 402
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 229
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 312

    member_access  ->  primary_expression '.' . IDENTIFIER   (rule 65)

    IDENTIFIER	shift, and go to state 403



state 313

    invocation_expression  ->  primary_expression_no_parenthesis '(' . argument_list_opt ')'   (rule 68)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    OUT 	shift, and go to state 404
    REF 	shift, and go to state 405
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    $default	reduce using rule 70 (argument_list_opt)

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    argument_list	go to state 406
    argument	go to state 407
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    argument_list_opt	go to state 408
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 409
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 314

    attribute_arguments  ->  '(' expression_list_opt ')' .   (rule 530)

    $default	reduce using rule 530 (attribute_arguments)



state 315

    expression_list  ->  expression_list COMMA . expression   (rule 77)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 410
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 316

    post_increment_expression  ->  postfix_expression PLUSPLUS .   (rule 81)

    $default	reduce using rule 81 (post_increment_expression)



state 317

    post_decrement_expression  ->  postfix_expression MINUSMINUS .   (rule 82)

    $default	reduce using rule 82 (post_decrement_expression)



state 318

    pointer_member_access  ->  postfix_expression ARROW . IDENTIFIER   (rule 93)

    IDENTIFIER	shift, and go to state 411



state 319

    assignment_operator  ->  PLUSEQ .   (rule 160)

    $default	reduce using rule 160 (assignment_operator)



state 320

    assignment_operator  ->  MINUSEQ .   (rule 161)

    $default	reduce using rule 161 (assignment_operator)



state 321

    assignment_operator  ->  STAREQ .   (rule 162)

    $default	reduce using rule 162 (assignment_operator)



state 322

    assignment_operator  ->  DIVEQ .   (rule 163)

    $default	reduce using rule 163 (assignment_operator)



state 323

    assignment_operator  ->  MODEQ .   (rule 164)

    $default	reduce using rule 164 (assignment_operator)



state 324

    assignment_operator  ->  XOREQ .   (rule 165)

    $default	reduce using rule 165 (assignment_operator)



state 325

    assignment_operator  ->  ANDEQ .   (rule 166)

    $default	reduce using rule 166 (assignment_operator)



state 326

    assignment_operator  ->  OREQ .   (rule 167)

    $default	reduce using rule 167 (assignment_operator)



state 327

    assignment_operator  ->  GTGTEQ .   (rule 168)

    $default	reduce using rule 168 (assignment_operator)



state 328

    assignment_operator  ->  LTLTEQ .   (rule 169)

    $default	reduce using rule 169 (assignment_operator)



state 329

    assignment_operator  ->  '=' .   (rule 159)

    $default	reduce using rule 159 (assignment_operator)



state 330

    assignment  ->  unary_expression assignment_operator . expression   (rule 158)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 412
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 331

    multiplicative_expression  ->  multiplicative_expression '*' . unary_expression   (rule 127)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 413
    cast_expression	go to state 216
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 332

    multiplicative_expression  ->  multiplicative_expression '/' . unary_expression   (rule 128)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 414
    cast_expression	go to state 216
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 333

    multiplicative_expression  ->  multiplicative_expression '%' . unary_expression   (rule 129)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 415
    cast_expression	go to state 216
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 334

    additive_expression  ->  additive_expression '+' . multiplicative_expression   (rule 131)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 416
    cast_expression	go to state 216
    multiplicative_expression	go to state 417
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 335

    additive_expression  ->  additive_expression '-' . multiplicative_expression   (rule 132)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 416
    cast_expression	go to state 216
    multiplicative_expression	go to state 418
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 336

    shift_expression  ->  shift_expression LTLT . additive_expression   (rule 134)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 416
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 419
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 337

    shift_expression  ->  shift_expression GTGT . additive_expression   (rule 135)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 416
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 420
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 338

    relational_expression  ->  relational_expression AS . type   (rule 142)

    IDENTIFIER	shift, and go to state 52
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 288

    type_name	go to state 94
    type	go to state 421
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10



state 339

    relational_expression  ->  relational_expression IS . type   (rule 141)

    IDENTIFIER	shift, and go to state 52
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 288

    type_name	go to state 94
    type	go to state 422
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10



state 340

    relational_expression  ->  relational_expression LEQ . shift_expression   (rule 139)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 416
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 423
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 341

    relational_expression  ->  relational_expression GEQ . shift_expression   (rule 140)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 416
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 424
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 342

    relational_expression  ->  relational_expression '<' . shift_expression   (rule 137)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 416
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 425
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 343

    relational_expression  ->  relational_expression '>' . shift_expression   (rule 138)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 416
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 426
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 344

    equality_expression  ->  equality_expression EQEQ . relational_expression   (rule 144)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 416
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 427
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 345

    equality_expression  ->  equality_expression NOTEQ . relational_expression   (rule 145)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 416
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 428
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 346

    and_expression  ->  and_expression '&' . equality_expression   (rule 147)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 416
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 429
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 347

    exclusive_or_expression  ->  exclusive_or_expression '^' . and_expression   (rule 149)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 416
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 430
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 348

    inclusive_or_expression  ->  inclusive_or_expression '|' . exclusive_or_expression   (rule 151)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 416
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 431
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 349

    conditional_and_expression  ->  conditional_and_expression ANDAND . inclusive_or_expression   (rule 153)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 416
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 432
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 350

    conditional_or_expression  ->  conditional_or_expression OROR . conditional_and_expression   (rule 155)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 416
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 433
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 351

    conditional_expression  ->  conditional_or_expression '?' . expression ':' expression   (rule 157)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 434
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 352

    element_access  ->  qualified_identifier LEFT_BRACKET . expression_list RIGHT_BRACKET   (rule 73)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    expression_list	go to state 435
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 229
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 353

    invocation_expression  ->  qualified_identifier '(' . argument_list_opt ')'   (rule 69)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    OUT 	shift, and go to state 404
    REF 	shift, and go to state 405
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    $default	reduce using rule 70 (argument_list_opt)

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    argument_list	go to state 406
    argument	go to state 407
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    argument_list_opt	go to state 436
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 409
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 354

    class_base  ->  ':' class_type COMMA interface_type_list .   (rule 345)
    interface_type_list  ->  interface_type_list . COMMA type_name   (rule 347)

    COMMA	shift, and go to state 233

    $default	reduce using rule 345 (class_base)



state 355

    interface_type_list  ->  interface_type_list COMMA type_name .   (rule 347)

    $default	reduce using rule 347 (interface_type_list)



state 356

    class_declaration  ->  attributes_opt modifiers_opt . CLASS IDENTIFIER class_base_opt class_body comma_opt   (rule 340)
    constant_declaration  ->  attributes_opt modifiers_opt . CONST type constant_declarators ';'   (rule 363)
    field_declaration  ->  attributes_opt modifiers_opt . type variable_declarators ';'   (rule 364)
    method_header  ->  attributes_opt modifiers_opt . type qualified_identifier '(' formal_parameter_list_opt ')'   (rule 366)
    method_header  ->  attributes_opt modifiers_opt . VOID qualified_identifier '(' formal_parameter_list_opt ')'   (rule 367)
    property_declaration  ->  attributes_opt modifiers_opt . type qualified_identifier ENTER_getset '{' accessor_declarations '}' EXIT_getset   (rule 383)
    event_declaration  ->  attributes_opt modifiers_opt . EVENT type variable_declarators ';'   (rule 394)
    event_declaration  ->  attributes_opt modifiers_opt . EVENT type qualified_identifier ENTER_accessor_decl '{' event_accessor_declarations '}' EXIT_accessor_decl   (rule 395)
    indexer_declaration  ->  attributes_opt modifiers_opt . indexer_declarator ENTER_getset '{' accessor_declarations '}' EXIT_getset   (rule 400)
    operator_declaration  ->  attributes_opt modifiers_opt . operator_declarator operator_body   (rule 404)
    constructor_declaration  ->  attributes_opt modifiers_opt . constructor_declarator constructor_body   (rule 433)
    destructor_declaration  ->  attributes_opt modifiers_opt . '~' IDENTIFIER '(' ')' block   (rule 439)
    struct_declaration  ->  attributes_opt modifiers_opt . STRUCT IDENTIFIER struct_interfaces_opt struct_body comma_opt   (rule 444)
    interface_declaration  ->  attributes_opt modifiers_opt . INTERFACE IDENTIFIER interface_base_opt interface_body comma_opt   (rule 468)
    enum_declaration  ->  attributes_opt modifiers_opt . ENUM IDENTIFIER enum_base_opt enum_body comma_opt   (rule 494)
    delegate_declaration  ->  attributes_opt modifiers_opt . DELEGATE return_type IDENTIFIER '(' formal_parameter_list_opt ')' ';'   (rule 506)

    IDENTIFIER	shift, and go to state 437
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CLASS	shift, and go to state 56
    CONST	shift, and go to state 438
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 57
    DOUBLE	shift, and go to state 82
    ENUM	shift, and go to state 58
    EVENT	shift, and go to state 439
    EXPLICIT	shift, and go to state 440
    FLOAT	shift, and go to state 83
    IMPLICIT	shift, and go to state 441
    INT 	shift, and go to state 84
    INTERFACE	shift, and go to state 59
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    STRUCT	shift, and go to state 60
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 442
    '~' 	shift, and go to state 443

    type_name	go to state 94
    type	go to state 444
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10
    indexer_declarator	go to state 445
    operator_declarator	go to state 446
    overloadable_operator_declarator	go to state 447
    conversion_operator_declarator	go to state 448
    constructor_declarator	go to state 449



state 357

    class_body  ->  '{' class_member_declarations_opt '}' .   (rule 348)

    $default	reduce using rule 348 (class_body)



state 358

    class_member_declarations  ->  class_member_declarations class_member_declaration .   (rule 352)

    $default	reduce using rule 352 (class_member_declarations)



state 359

    block  ->  '{' . statement_list_opt '}'   (rule 190)

    IDENTIFIER	shift, and go to state 450
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 451
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 452
    CONST	shift, and go to state 453
    CONTINUE	shift, and go to state 454
    DECIMAL	shift, and go to state 81
    DO  	shift, and go to state 455
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FIXED	shift, and go to state 456
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 457
    FOREACH	shift, and go to state 458
    GOTO	shift, and go to state 459
    IF  	shift, and go to state 460
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 461
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    RETURN	shift, and go to state 462
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    SWITCH	shift, and go to state 463
    THIS	shift, and go to state 173
    THROW	shift, and go to state 464
    TRUE	shift, and go to state 174
    TRY 	shift, and go to state 465
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 466
    UNSAFE	shift, and go to state 467
    USHORT	shift, and go to state 92
    USING	shift, and go to state 468
    VOID	shift, and go to state 288
    WHILE	shift, and go to state 469
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185
    '{' 	shift, and go to state 359
    ';' 	shift, and go to state 470

    $default	reduce using rule 191 (statement_list_opt)

    literal	go to state 186
    boolean_literal	go to state 187
    type_name	go to state 94
    type	go to state 471
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 472
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 473
    pointer_type	go to state 103
    array_type	go to state 104
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 474
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 475
    post_decrement_expression	go to state 476
    new_expression	go to state 202
    object_creation_expression	go to state 477
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 478
    pre_decrement_expression	go to state 479
    unary_expression	go to state 480
    cast_expression	go to state 216
    assignment	go to state 481
    statement	go to state 482
    embedded_statement	go to state 483
    block	go to state 484
    statement_list_opt	go to state 485
    statement_list	go to state 486
    empty_statement	go to state 487
    labeled_statement	go to state 488
    declaration_statement	go to state 489
    local_variable_declaration	go to state 490
    local_constant_declaration	go to state 491
    expression_statement	go to state 492
    statement_expression	go to state 493
    selection_statement	go to state 494
    if_statement	go to state 495
    switch_statement	go to state 496
    iteration_statement	go to state 497
    unsafe_statement	go to state 498
    while_statement	go to state 499
    do_statement	go to state 500
    for_statement	go to state 501
    foreach_statement	go to state 502
    jump_statement	go to state 503
    break_statement	go to state 504
    continue_statement	go to state 505
    goto_statement	go to state 506
    return_statement	go to state 507
    throw_statement	go to state 508
    try_statement	go to state 509
    checked_statement	go to state 510
    unchecked_statement	go to state 511
    lock_statement	go to state 512
    using_statement	go to state 513
    fixed_statement	go to state 514
    qualified_identifier	go to state 515
    qualifier	go to state 10



state 360

    method_body  ->  ';' .   (rule 373)

    $default	reduce using rule 373 (method_body)



state 361

    method_body  ->  block .   (rule 372)

    $default	reduce using rule 372 (method_body)



state 362

    method_declaration  ->  method_header method_body .   (rule 365)

    $default	reduce using rule 365 (method_declaration)



state 363

    parameter_modifier_opt  ->  OUT .   (rule 381)

    $default	reduce using rule 381 (parameter_modifier_opt)



state 364

    parameter_array  ->  attributes_opt PARAMS . type IDENTIFIER   (rule 382)

    IDENTIFIER	shift, and go to state 52
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 288

    type_name	go to state 94
    type	go to state 516
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10



state 365

    parameter_modifier_opt  ->  REF .   (rule 380)

    $default	reduce using rule 380 (parameter_modifier_opt)



state 366

    fixed_parameter  ->  attributes_opt parameter_modifier_opt . type IDENTIFIER   (rule 378)

    IDENTIFIER	shift, and go to state 52
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 288

    type_name	go to state 94
    type	go to state 517
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10



state 367

    delegate_declaration  ->  attributes_opt modifiers_opt DELEGATE return_type IDENTIFIER '(' formal_parameter_list_opt ')' . ';'   (rule 506)

    ';' 	shift, and go to state 518



state 368

    formal_parameter_list  ->  formal_parameter_list COMMA . formal_parameter   (rule 375)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 250
    formal_parameter	go to state 519
    fixed_parameter	go to state 254
    parameter_array	go to state 255
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 369

    enum_member_declaration  ->  attributes_opt IDENTIFIER .   (rule 504)
    enum_member_declaration  ->  attributes_opt IDENTIFIER . '=' constant_expression   (rule 505)

    '=' 	shift, and go to state 520

    $default	reduce using rule 504 (enum_member_declaration)



state 370

    enum_body  ->  '{' enum_member_declarations_opt '}' .   (rule 498)

    $default	reduce using rule 498 (enum_body)



state 371

    enum_body  ->  '{' enum_member_declarations COMMA . '}'   (rule 499)
    enum_member_declarations  ->  enum_member_declarations COMMA . enum_member_declaration   (rule 503)

    '}' 	shift, and go to state 521

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 256
    enum_member_declaration	go to state 522
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 372

    new_opt  ->  NEW .   (rule 484)

    $default	reduce using rule 484 (new_opt)



state 373

    interface_method_declaration  ->  attributes_opt new_opt . type IDENTIFIER '(' formal_parameter_list_opt ')' interface_empty_body   (rule 481)
    interface_method_declaration  ->  attributes_opt new_opt . VOID IDENTIFIER '(' formal_parameter_list_opt ')' interface_empty_body   (rule 482)
    interface_property_declaration  ->  attributes_opt new_opt . type IDENTIFIER ENTER_getset '{' interface_accessors '}' EXIT_getset   (rule 485)
    interface_indexer_declaration  ->  attributes_opt new_opt . type THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET ENTER_getset '{' interface_accessors '}' EXIT_getset   (rule 486)
    interface_event_declaration  ->  attributes_opt new_opt . EVENT type IDENTIFIER interface_empty_body   (rule 491)

    IDENTIFIER	shift, and go to state 52
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    EVENT	shift, and go to state 523
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 524

    type_name	go to state 94
    type	go to state 525
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10



state 374

    interface_body  ->  '{' interface_member_declarations_opt '}' .   (rule 472)

    $default	reduce using rule 472 (interface_body)



state 375

    interface_member_declarations  ->  interface_member_declarations interface_member_declaration .   (rule 476)

    $default	reduce using rule 476 (interface_member_declarations)



state 376

    class_declaration  ->  attributes_opt modifiers_opt . CLASS IDENTIFIER class_base_opt class_body comma_opt   (rule 340)
    constant_declaration  ->  attributes_opt modifiers_opt . CONST type constant_declarators ';'   (rule 363)
    field_declaration  ->  attributes_opt modifiers_opt . type variable_declarators ';'   (rule 364)
    method_header  ->  attributes_opt modifiers_opt . type qualified_identifier '(' formal_parameter_list_opt ')'   (rule 366)
    method_header  ->  attributes_opt modifiers_opt . VOID qualified_identifier '(' formal_parameter_list_opt ')'   (rule 367)
    property_declaration  ->  attributes_opt modifiers_opt . type qualified_identifier ENTER_getset '{' accessor_declarations '}' EXIT_getset   (rule 383)
    event_declaration  ->  attributes_opt modifiers_opt . EVENT type variable_declarators ';'   (rule 394)
    event_declaration  ->  attributes_opt modifiers_opt . EVENT type qualified_identifier ENTER_accessor_decl '{' event_accessor_declarations '}' EXIT_accessor_decl   (rule 395)
    indexer_declaration  ->  attributes_opt modifiers_opt . indexer_declarator ENTER_getset '{' accessor_declarations '}' EXIT_getset   (rule 400)
    operator_declaration  ->  attributes_opt modifiers_opt . operator_declarator operator_body   (rule 404)
    constructor_declaration  ->  attributes_opt modifiers_opt . constructor_declarator constructor_body   (rule 433)
    struct_declaration  ->  attributes_opt modifiers_opt . STRUCT IDENTIFIER struct_interfaces_opt struct_body comma_opt   (rule 444)
    interface_declaration  ->  attributes_opt modifiers_opt . INTERFACE IDENTIFIER interface_base_opt interface_body comma_opt   (rule 468)
    enum_declaration  ->  attributes_opt modifiers_opt . ENUM IDENTIFIER enum_base_opt enum_body comma_opt   (rule 494)
    delegate_declaration  ->  attributes_opt modifiers_opt . DELEGATE return_type IDENTIFIER '(' formal_parameter_list_opt ')' ';'   (rule 506)

    IDENTIFIER	shift, and go to state 437
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CLASS	shift, and go to state 56
    CONST	shift, and go to state 438
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 57
    DOUBLE	shift, and go to state 82
    ENUM	shift, and go to state 58
    EVENT	shift, and go to state 439
    EXPLICIT	shift, and go to state 440
    FLOAT	shift, and go to state 83
    IMPLICIT	shift, and go to state 441
    INT 	shift, and go to state 84
    INTERFACE	shift, and go to state 59
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    STRUCT	shift, and go to state 60
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 442

    type_name	go to state 94
    type	go to state 444
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10
    indexer_declarator	go to state 445
    operator_declarator	go to state 446
    overloadable_operator_declarator	go to state 447
    conversion_operator_declarator	go to state 448
    constructor_declarator	go to state 449



state 377

    struct_body  ->  '{' struct_member_declarations_opt '}' .   (rule 448)

    $default	reduce using rule 448 (struct_body)



state 378

    struct_member_declarations  ->  struct_member_declarations struct_member_declaration .   (rule 452)

    $default	reduce using rule 452 (struct_member_declarations)



state 379

    expression_list  ->  expression_list . COMMA expression   (rule 77)
    base_access  ->  BASE LEFT_BRACKET expression_list . RIGHT_BRACKET   (rule 80)

    COMMA	shift, and go to state 315
    RIGHT_BRACKET	shift, and go to state 526



state 380

    base_access  ->  BASE '.' IDENTIFIER .   (rule 79)

    $default	reduce using rule 79 (base_access)



state 381

    checked_expression  ->  CHECKED '(' expression . ')'   (rule 91)

    ')' 	shift, and go to state 527



state 382

    object_creation_expression  ->  NEW type '(' . argument_list_opt ')'   (rule 84)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    OUT 	shift, and go to state 404
    REF 	shift, and go to state 405
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    $default	reduce using rule 70 (argument_list_opt)

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    argument_list	go to state 406
    argument	go to state 407
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    argument_list_opt	go to state 528
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 409
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 383

    array_creation_expression  ->  NEW non_array_type LEFT_BRACKET . expression_list RIGHT_BRACKET rank_specifiers_opt array_initializer_opt   (rule 85)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    expression_list	go to state 529
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 229
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 384

    array_initializer  ->  '{' . variable_initializer_list_opt '}'   (rule 462)
    array_initializer  ->  '{' . variable_initializer_list COMMA '}'   (rule 463)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STACKALLOC	shift, and go to state 530
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185
    '{' 	shift, and go to state 384

    $default	reduce using rule 464 (variable_initializer_list_opt)

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 531
    variable_initializer	go to state 532
    stackalloc_initializer	go to state 533
    qualified_identifier	go to state 230
    qualifier	go to state 10
    array_initializer	go to state 534
    variable_initializer_list_opt	go to state 535
    variable_initializer_list	go to state 536



state 385

    array_creation_expression  ->  NEW array_type array_initializer .   (rule 86)

    $default	reduce using rule 86 (array_creation_expression)



state 386

    pointer_type  ->  type . '*'   (rule 36)
    sizeof_expression  ->  SIZEOF '(' type . ')'   (rule 95)

    '*' 	shift, and go to state 123
    ')' 	shift, and go to state 537



state 387

    pointer_type  ->  VOID . '*'   (rule 37)
    typeof_expression  ->  TYPEOF '(' VOID . ')'   (rule 90)

    '*' 	shift, and go to state 122
    ')' 	shift, and go to state 538



state 388

    pointer_type  ->  type . '*'   (rule 36)
    typeof_expression  ->  TYPEOF '(' type . ')'   (rule 89)

    '*' 	shift, and go to state 123
    ')' 	shift, and go to state 539



state 389

    unchecked_expression  ->  UNCHECKED '(' expression . ')'   (rule 92)

    ')' 	shift, and go to state 540



state 390

    type_qual  ->  '*' .   (rule 125)

    $default	reduce using rule 125 (type_qual)



state 391

    type_qual  ->  rank_specifier .   (rule 124)

    $default	reduce using rule 124 (type_qual)



state 392

    cast_expression  ->  '(' VOID type_quals_opt . ')' unary_expression   (rule 119)

    ')' 	shift, and go to state 541



state 393

    type_quals_opt  ->  type_quals .   (rule 121)
    type_quals  ->  type_quals . type_qual   (rule 123)

    RANK_SPECIFIER	shift, and go to state 124
    '*' 	shift, and go to state 390

    $default	reduce using rule 121 (type_quals_opt)

    rank_specifier	go to state 391
    type_qual	go to state 542



state 394

    type_quals  ->  type_qual .   (rule 122)

    $default	reduce using rule 122 (type_quals)



state 395

    cast_expression  ->  '(' primitive_type type_quals_opt . ')' unary_expression   (rule 117)

    ')' 	shift, and go to state 543



state 396

    cast_expression  ->  '(' class_type type_quals_opt . ')' unary_expression   (rule 118)

    ')' 	shift, and go to state 544



state 397

    cast_expression  ->  '(' multiplicative_expression '*' . ')' unary_expression   (rule 115)
    multiplicative_expression  ->  multiplicative_expression '*' . unary_expression   (rule 127)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    ')' 	shift, and go to state 545
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 413
    cast_expression	go to state 216
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 398

    parenthesized_expression  ->  '(' expression ')' .   (rule 64)
    cast_expression  ->  '(' expression ')' . unary_expression_not_plusminus   (rule 114)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    '(' 	shift, and go to state 180
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183

    $default	reduce using rule 64 (parenthesized_expression)

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 546
    cast_expression	go to state 216
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 399

    cast_expression  ->  '(' qualified_identifier rank_specifier . type_quals_opt ')' unary_expression   (rule 116)

    RANK_SPECIFIER	shift, and go to state 124
    '*' 	shift, and go to state 390

    $default	reduce using rule 120 (type_quals_opt)

    rank_specifier	go to state 391
    type_quals_opt	go to state 547
    type_quals	go to state 393
    type_qual	go to state 394



state 400

    member_access  ->  primitive_type '.' IDENTIFIER .   (rule 66)

    $default	reduce using rule 66 (member_access)



state 401

    member_access  ->  class_type '.' IDENTIFIER .   (rule 67)

    $default	reduce using rule 67 (member_access)



state 402

    element_access  ->  primary_expression LEFT_BRACKET expression_list . RIGHT_BRACKET   (rule 72)
    expression_list  ->  expression_list . COMMA expression   (rule 77)

    COMMA	shift, and go to state 315
    RIGHT_BRACKET	shift, and go to state 548



state 403

    member_access  ->  primary_expression '.' IDENTIFIER .   (rule 65)

    $default	reduce using rule 65 (member_access)



state 404

    argument  ->  OUT . variable_reference   (rule 49)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    variable_reference	go to state 549
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 550
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 405

    argument  ->  REF . variable_reference   (rule 48)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    variable_reference	go to state 551
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 550
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 406

    argument_list  ->  argument_list . COMMA argument   (rule 46)
    argument_list_opt  ->  argument_list .   (rule 71)

    COMMA	shift, and go to state 552

    $default	reduce using rule 71 (argument_list_opt)



state 407

    argument_list  ->  argument .   (rule 45)

    $default	reduce using rule 45 (argument_list)



state 408

    invocation_expression  ->  primary_expression_no_parenthesis '(' argument_list_opt . ')'   (rule 68)

    ')' 	shift, and go to state 553



state 409

    argument  ->  expression .   (rule 47)

    $default	reduce using rule 47 (argument)



state 410

    expression_list  ->  expression_list COMMA expression .   (rule 77)

    $default	reduce using rule 77 (expression_list)



state 411

    pointer_member_access  ->  postfix_expression ARROW IDENTIFIER .   (rule 93)

    $default	reduce using rule 93 (pointer_member_access)



state 412

    assignment  ->  unary_expression assignment_operator expression .   (rule 158)

    $default	reduce using rule 158 (assignment)



state 413

    multiplicative_expression  ->  multiplicative_expression '*' unary_expression .   (rule 127)

    $default	reduce using rule 127 (multiplicative_expression)



state 414

    multiplicative_expression  ->  multiplicative_expression '/' unary_expression .   (rule 128)

    $default	reduce using rule 128 (multiplicative_expression)



state 415

    multiplicative_expression  ->  multiplicative_expression '%' unary_expression .   (rule 129)

    $default	reduce using rule 129 (multiplicative_expression)



state 416

    multiplicative_expression  ->  unary_expression .   (rule 126)

    $default	reduce using rule 126 (multiplicative_expression)



state 417

    multiplicative_expression  ->  multiplicative_expression . '*' unary_expression   (rule 127)
    multiplicative_expression  ->  multiplicative_expression . '/' unary_expression   (rule 128)
    multiplicative_expression  ->  multiplicative_expression . '%' unary_expression   (rule 129)
    additive_expression  ->  additive_expression '+' multiplicative_expression .   (rule 131)

    '*' 	shift, and go to state 331
    '/' 	shift, and go to state 332
    '%' 	shift, and go to state 333

    $default	reduce using rule 131 (additive_expression)



state 418

    multiplicative_expression  ->  multiplicative_expression . '*' unary_expression   (rule 127)
    multiplicative_expression  ->  multiplicative_expression . '/' unary_expression   (rule 128)
    multiplicative_expression  ->  multiplicative_expression . '%' unary_expression   (rule 129)
    additive_expression  ->  additive_expression '-' multiplicative_expression .   (rule 132)

    '*' 	shift, and go to state 331
    '/' 	shift, and go to state 332
    '%' 	shift, and go to state 333

    $default	reduce using rule 132 (additive_expression)



state 419

    additive_expression  ->  additive_expression . '+' multiplicative_expression   (rule 131)
    additive_expression  ->  additive_expression . '-' multiplicative_expression   (rule 132)
    shift_expression  ->  shift_expression LTLT additive_expression .   (rule 134)

    '+' 	shift, and go to state 334
    '-' 	shift, and go to state 335

    $default	reduce using rule 134 (shift_expression)



state 420

    additive_expression  ->  additive_expression . '+' multiplicative_expression   (rule 131)
    additive_expression  ->  additive_expression . '-' multiplicative_expression   (rule 132)
    shift_expression  ->  shift_expression GTGT additive_expression .   (rule 135)

    '+' 	shift, and go to state 334
    '-' 	shift, and go to state 335

    $default	reduce using rule 135 (shift_expression)



state 421

    pointer_type  ->  type . '*'   (rule 36)
    relational_expression  ->  relational_expression AS type .   (rule 142)

    '*' 	shift, and go to state 123

    $default	reduce using rule 142 (relational_expression)



state 422

    pointer_type  ->  type . '*'   (rule 36)
    relational_expression  ->  relational_expression IS type .   (rule 141)

    '*' 	shift, and go to state 123

    $default	reduce using rule 141 (relational_expression)



state 423

    shift_expression  ->  shift_expression . LTLT additive_expression   (rule 134)
    shift_expression  ->  shift_expression . GTGT additive_expression   (rule 135)
    relational_expression  ->  relational_expression LEQ shift_expression .   (rule 139)

    LTLT	shift, and go to state 336
    GTGT	shift, and go to state 337

    $default	reduce using rule 139 (relational_expression)



state 424

    shift_expression  ->  shift_expression . LTLT additive_expression   (rule 134)
    shift_expression  ->  shift_expression . GTGT additive_expression   (rule 135)
    relational_expression  ->  relational_expression GEQ shift_expression .   (rule 140)

    LTLT	shift, and go to state 336
    GTGT	shift, and go to state 337

    $default	reduce using rule 140 (relational_expression)



state 425

    shift_expression  ->  shift_expression . LTLT additive_expression   (rule 134)
    shift_expression  ->  shift_expression . GTGT additive_expression   (rule 135)
    relational_expression  ->  relational_expression '<' shift_expression .   (rule 137)

    LTLT	shift, and go to state 336
    GTGT	shift, and go to state 337

    $default	reduce using rule 137 (relational_expression)



state 426

    shift_expression  ->  shift_expression . LTLT additive_expression   (rule 134)
    shift_expression  ->  shift_expression . GTGT additive_expression   (rule 135)
    relational_expression  ->  relational_expression '>' shift_expression .   (rule 138)

    LTLT	shift, and go to state 336
    GTGT	shift, and go to state 337

    $default	reduce using rule 138 (relational_expression)



state 427

    relational_expression  ->  relational_expression . '<' shift_expression   (rule 137)
    relational_expression  ->  relational_expression . '>' shift_expression   (rule 138)
    relational_expression  ->  relational_expression . LEQ shift_expression   (rule 139)
    relational_expression  ->  relational_expression . GEQ shift_expression   (rule 140)
    relational_expression  ->  relational_expression . IS type   (rule 141)
    relational_expression  ->  relational_expression . AS type   (rule 142)
    equality_expression  ->  equality_expression EQEQ relational_expression .   (rule 144)

    AS  	shift, and go to state 338
    IS  	shift, and go to state 339
    LEQ 	shift, and go to state 340
    GEQ 	shift, and go to state 341
    '<' 	shift, and go to state 342
    '>' 	shift, and go to state 343

    $default	reduce using rule 144 (equality_expression)



state 428

    relational_expression  ->  relational_expression . '<' shift_expression   (rule 137)
    relational_expression  ->  relational_expression . '>' shift_expression   (rule 138)
    relational_expression  ->  relational_expression . LEQ shift_expression   (rule 139)
    relational_expression  ->  relational_expression . GEQ shift_expression   (rule 140)
    relational_expression  ->  relational_expression . IS type   (rule 141)
    relational_expression  ->  relational_expression . AS type   (rule 142)
    equality_expression  ->  equality_expression NOTEQ relational_expression .   (rule 145)

    AS  	shift, and go to state 338
    IS  	shift, and go to state 339
    LEQ 	shift, and go to state 340
    GEQ 	shift, and go to state 341
    '<' 	shift, and go to state 342
    '>' 	shift, and go to state 343

    $default	reduce using rule 145 (equality_expression)



state 429

    equality_expression  ->  equality_expression . EQEQ relational_expression   (rule 144)
    equality_expression  ->  equality_expression . NOTEQ relational_expression   (rule 145)
    and_expression  ->  and_expression '&' equality_expression .   (rule 147)

    EQEQ	shift, and go to state 344
    NOTEQ	shift, and go to state 345

    $default	reduce using rule 147 (and_expression)



state 430

    and_expression  ->  and_expression . '&' equality_expression   (rule 147)
    exclusive_or_expression  ->  exclusive_or_expression '^' and_expression .   (rule 149)

    '&' 	shift, and go to state 346

    $default	reduce using rule 149 (exclusive_or_expression)



state 431

    exclusive_or_expression  ->  exclusive_or_expression . '^' and_expression   (rule 149)
    inclusive_or_expression  ->  inclusive_or_expression '|' exclusive_or_expression .   (rule 151)

    '^' 	shift, and go to state 347

    $default	reduce using rule 151 (inclusive_or_expression)



state 432

    inclusive_or_expression  ->  inclusive_or_expression . '|' exclusive_or_expression   (rule 151)
    conditional_and_expression  ->  conditional_and_expression ANDAND inclusive_or_expression .   (rule 153)

    '|' 	shift, and go to state 348

    $default	reduce using rule 153 (conditional_and_expression)



state 433

    conditional_and_expression  ->  conditional_and_expression . ANDAND inclusive_or_expression   (rule 153)
    conditional_or_expression  ->  conditional_or_expression OROR conditional_and_expression .   (rule 155)

    ANDAND	shift, and go to state 349

    $default	reduce using rule 155 (conditional_or_expression)



state 434

    conditional_expression  ->  conditional_or_expression '?' expression . ':' expression   (rule 157)

    ':' 	shift, and go to state 554



state 435

    element_access  ->  qualified_identifier LEFT_BRACKET expression_list . RIGHT_BRACKET   (rule 73)
    expression_list  ->  expression_list . COMMA expression   (rule 77)

    COMMA	shift, and go to state 315
    RIGHT_BRACKET	shift, and go to state 555



state 436

    invocation_expression  ->  qualified_identifier '(' argument_list_opt . ')'   (rule 69)

    ')' 	shift, and go to state 556



state 437

    qualified_identifier  ->  IDENTIFIER .   (rule 302)
    qualifier  ->  IDENTIFIER . '.'   (rule 304)
    constructor_declarator  ->  IDENTIFIER . '(' formal_parameter_list_opt ')' constructor_initializer_opt   (rule 434)

    '(' 	shift, and go to state 557
    '.' 	shift, and go to state 26

    $default	reduce using rule 302 (qualified_identifier)



state 438

    constant_declaration  ->  attributes_opt modifiers_opt CONST . type constant_declarators ';'   (rule 363)

    IDENTIFIER	shift, and go to state 52
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 288

    type_name	go to state 94
    type	go to state 558
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10



state 439

    event_declaration  ->  attributes_opt modifiers_opt EVENT . type variable_declarators ';'   (rule 394)
    event_declaration  ->  attributes_opt modifiers_opt EVENT . type qualified_identifier ENTER_accessor_decl '{' event_accessor_declarations '}' EXIT_accessor_decl   (rule 395)

    IDENTIFIER	shift, and go to state 52
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 288

    type_name	go to state 94
    type	go to state 559
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10



state 440

    conversion_operator_declarator  ->  EXPLICIT . OPERATOR type '(' type IDENTIFIER ')'   (rule 432)

    OPERATOR	shift, and go to state 560



state 441

    conversion_operator_declarator  ->  IMPLICIT . OPERATOR type '(' type IDENTIFIER ')'   (rule 431)

    OPERATOR	shift, and go to state 561



state 442

    pointer_type  ->  VOID . '*'   (rule 37)
    method_header  ->  attributes_opt modifiers_opt VOID . qualified_identifier '(' formal_parameter_list_opt ')'   (rule 367)

    IDENTIFIER	shift, and go to state 52
    '*' 	shift, and go to state 122

    qualified_identifier	go to state 562
    qualifier	go to state 10



state 443

    destructor_declaration  ->  attributes_opt modifiers_opt '~' . IDENTIFIER '(' ')' block   (rule 439)

    IDENTIFIER	shift, and go to state 563



state 444

    pointer_type  ->  type . '*'   (rule 36)
    field_declaration  ->  attributes_opt modifiers_opt type . variable_declarators ';'   (rule 364)
    method_header  ->  attributes_opt modifiers_opt type . qualified_identifier '(' formal_parameter_list_opt ')'   (rule 366)
    property_declaration  ->  attributes_opt modifiers_opt type . qualified_identifier ENTER_getset '{' accessor_declarations '}' EXIT_getset   (rule 383)
    indexer_declarator  ->  type . THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET   (rule 401)
    indexer_declarator  ->  type . qualified_this LEFT_BRACKET formal_parameter_list RIGHT_BRACKET   (rule 402)
    overloadable_operator_declarator  ->  type . OPERATOR overloadable_operator '(' type IDENTIFIER ')'   (rule 407)
    overloadable_operator_declarator  ->  type . OPERATOR overloadable_operator '(' type IDENTIFIER COMMA type IDENTIFIER ')'   (rule 408)

    IDENTIFIER	shift, and go to state 564
    OPERATOR	shift, and go to state 565
    THIS	shift, and go to state 566
    '*' 	shift, and go to state 123

    variable_declarators	go to state 567
    variable_declarator	go to state 568
    qualified_identifier	go to state 569
    qualifier	go to state 570
    qualified_this	go to state 571



state 445

    indexer_declaration  ->  attributes_opt modifiers_opt indexer_declarator . ENTER_getset '{' accessor_declarations '}' EXIT_getset   (rule 400)

    $default	reduce using rule 535 (ENTER_getset)

    ENTER_getset	go to state 572



state 446

    operator_declaration  ->  attributes_opt modifiers_opt operator_declarator . operator_body   (rule 404)

    '{' 	shift, and go to state 359
    ';' 	shift, and go to state 573

    block	go to state 574
    operator_body	go to state 575



state 447

    operator_declarator  ->  overloadable_operator_declarator .   (rule 405)

    $default	reduce using rule 405 (operator_declarator)



state 448

    operator_declarator  ->  conversion_operator_declarator .   (rule 406)

    $default	reduce using rule 406 (operator_declarator)



state 449

    constructor_declaration  ->  attributes_opt modifiers_opt constructor_declarator . constructor_body   (rule 433)

    '{' 	shift, and go to state 359
    ';' 	shift, and go to state 576

    block	go to state 577
    constructor_body	go to state 578



state 450

    labeled_statement  ->  IDENTIFIER . ':' statement   (rule 196)
    qualified_identifier  ->  IDENTIFIER .   (rule 302)
    qualifier  ->  IDENTIFIER . '.'   (rule 304)

    '.' 	shift, and go to state 26
    ':' 	shift, and go to state 579

    $default	reduce using rule 302 (qualified_identifier)



state 451

    break_statement  ->  BREAK . ';'   (rule 261)

    ';' 	shift, and go to state 580



state 452

    checked_expression  ->  CHECKED . '(' expression ')'   (rule 91)
    checked_statement  ->  CHECKED . block   (rule 281)

    '(' 	shift, and go to state 287
    '{' 	shift, and go to state 359

    block	go to state 581



state 453

    local_constant_declaration  ->  CONST . type constant_declarators   (rule 208)

    IDENTIFIER	shift, and go to state 52
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 288

    type_name	go to state 94
    type	go to state 582
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10



state 454

    continue_statement  ->  CONTINUE . ';'   (rule 262)

    ';' 	shift, and go to state 583



state 455

    do_statement  ->  DO . embedded_statement WHILE '(' boolean_expression ')' ';'   (rule 241)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 451
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 452
    CONTINUE	shift, and go to state 454
    DECIMAL	shift, and go to state 81
    DO  	shift, and go to state 455
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FIXED	shift, and go to state 456
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 457
    FOREACH	shift, and go to state 458
    GOTO	shift, and go to state 459
    IF  	shift, and go to state 460
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 461
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    RETURN	shift, and go to state 462
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    SWITCH	shift, and go to state 463
    THIS	shift, and go to state 173
    THROW	shift, and go to state 464
    TRUE	shift, and go to state 174
    TRY 	shift, and go to state 465
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 466
    UNSAFE	shift, and go to state 467
    USHORT	shift, and go to state 92
    USING	shift, and go to state 468
    WHILE	shift, and go to state 469
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185
    '{' 	shift, and go to state 359
    ';' 	shift, and go to state 470

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 474
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 475
    post_decrement_expression	go to state 476
    new_expression	go to state 202
    object_creation_expression	go to state 477
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 478
    pre_decrement_expression	go to state 479
    unary_expression	go to state 480
    cast_expression	go to state 216
    assignment	go to state 481
    embedded_statement	go to state 584
    block	go to state 484
    empty_statement	go to state 487
    expression_statement	go to state 492
    statement_expression	go to state 493
    selection_statement	go to state 494
    if_statement	go to state 495
    switch_statement	go to state 496
    iteration_statement	go to state 497
    unsafe_statement	go to state 498
    while_statement	go to state 499
    do_statement	go to state 500
    for_statement	go to state 501
    foreach_statement	go to state 502
    jump_statement	go to state 503
    break_statement	go to state 504
    continue_statement	go to state 505
    goto_statement	go to state 506
    return_statement	go to state 507
    throw_statement	go to state 508
    try_statement	go to state 509
    checked_statement	go to state 510
    unchecked_statement	go to state 511
    lock_statement	go to state 512
    using_statement	go to state 513
    fixed_statement	go to state 514
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 456

    fixed_statement  ->  FIXED . '(' type fixed_pointer_declarators ')' embedded_statement   (rule 287)

    '(' 	shift, and go to state 585



state 457

    for_statement  ->  FOR . '(' for_initializer_opt ';' for_condition_opt ';' for_iterator_opt ')' embedded_statement   (rule 242)

    '(' 	shift, and go to state 586



state 458

    foreach_statement  ->  FOREACH . '(' type IDENTIFIER IN expression ')' embedded_statement   (rule 255)

    '(' 	shift, and go to state 587



state 459

    goto_statement  ->  GOTO . IDENTIFIER ';'   (rule 263)
    goto_statement  ->  GOTO . CASE constant_expression ';'   (rule 264)
    goto_statement  ->  GOTO . DEFAULT ';'   (rule 265)

    IDENTIFIER	shift, and go to state 588
    CASE	shift, and go to state 589
    DEFAULT	shift, and go to state 590



state 460

    if_statement  ->  IF . '(' boolean_expression ')' embedded_statement   (rule 222)
    if_statement  ->  IF . '(' boolean_expression ')' embedded_statement ELSE embedded_statement   (rule 223)

    '(' 	shift, and go to state 591



state 461

    lock_statement  ->  LOCK . '(' expression ')' embedded_statement   (rule 283)

    '(' 	shift, and go to state 592



state 462

    return_statement  ->  RETURN . expression_opt ';'   (rule 266)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    $default	reduce using rule 267 (expression_opt)

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 593
    expression_opt	go to state 594
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 463

    switch_statement  ->  SWITCH . '(' expression ')' switch_block   (rule 224)

    '(' 	shift, and go to state 595



state 464

    throw_statement  ->  THROW . expression_opt ';'   (rule 269)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    $default	reduce using rule 267 (expression_opt)

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 593
    expression_opt	go to state 596
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 465

    try_statement  ->  TRY . block catch_clauses   (rule 270)
    try_statement  ->  TRY . block finally_clause   (rule 271)
    try_statement  ->  TRY . block catch_clauses finally_clause   (rule 272)

    '{' 	shift, and go to state 359

    block	go to state 597



state 466

    unchecked_expression  ->  UNCHECKED . '(' expression ')'   (rule 92)
    unchecked_statement  ->  UNCHECKED . block   (rule 282)

    '(' 	shift, and go to state 294
    '{' 	shift, and go to state 359

    block	go to state 598



state 467

    unsafe_statement  ->  UNSAFE . block   (rule 239)

    '{' 	shift, and go to state 359

    block	go to state 599



state 468

    using_statement  ->  USING . '(' resource_acquisition ')' embedded_statement   (rule 284)

    '(' 	shift, and go to state 600



state 469

    while_statement  ->  WHILE . '(' boolean_expression ')' embedded_statement   (rule 240)

    '(' 	shift, and go to state 601



state 470

    empty_statement  ->  ';' .   (rule 195)

    $default	reduce using rule 195 (empty_statement)



state 471

    pointer_type  ->  type . '*'   (rule 36)
    local_variable_declaration  ->  type . variable_declarators   (rule 199)

    IDENTIFIER	shift, and go to state 602
    '*' 	shift, and go to state 123

    variable_declarators	go to state 603
    variable_declarator	go to state 568



state 472

    simple_type  ->  primitive_type .   (rule 15)
    member_access  ->  primitive_type . '.' IDENTIFIER   (rule 66)

    '.' 	shift, and go to state 309

    $default	reduce using rule 15 (simple_type)



state 473

    simple_type  ->  class_type .   (rule 16)
    member_access  ->  class_type . '.' IDENTIFIER   (rule 67)

    '.' 	shift, and go to state 310

    $default	reduce using rule 16 (simple_type)



state 474

    primary_expression_no_parenthesis  ->  invocation_expression .   (rule 55)
    statement_expression  ->  invocation_expression .   (rule 213)

    COMMA	reduce using rule 213 (statement_expression)
    ')' 	reduce using rule 213 (statement_expression)
    ';' 	reduce using rule 213 (statement_expression)
    $default	reduce using rule 55 (primary_expression_no_parenthesis)



state 475

    postfix_expression  ->  post_increment_expression .   (rule 98)
    statement_expression  ->  post_increment_expression .   (rule 216)

    COMMA	reduce using rule 216 (statement_expression)
    ')' 	reduce using rule 216 (statement_expression)
    ';' 	reduce using rule 216 (statement_expression)
    $default	reduce using rule 98 (postfix_expression)



state 476

    postfix_expression  ->  post_decrement_expression .   (rule 99)
    statement_expression  ->  post_decrement_expression .   (rule 217)

    COMMA	reduce using rule 217 (statement_expression)
    ')' 	reduce using rule 217 (statement_expression)
    ';' 	reduce using rule 217 (statement_expression)
    $default	reduce using rule 99 (postfix_expression)



state 477

    new_expression  ->  object_creation_expression .   (rule 83)
    statement_expression  ->  object_creation_expression .   (rule 214)

    COMMA	reduce using rule 214 (statement_expression)
    ')' 	reduce using rule 214 (statement_expression)
    ';' 	reduce using rule 214 (statement_expression)
    $default	reduce using rule 83 (new_expression)



state 478

    unary_expression  ->  pre_increment_expression .   (rule 111)
    statement_expression  ->  pre_increment_expression .   (rule 218)

    COMMA	reduce using rule 218 (statement_expression)
    ')' 	reduce using rule 218 (statement_expression)
    ';' 	reduce using rule 218 (statement_expression)
    $default	reduce using rule 111 (unary_expression)



state 479

    unary_expression  ->  pre_decrement_expression .   (rule 112)
    statement_expression  ->  pre_decrement_expression .   (rule 219)

    COMMA	reduce using rule 219 (statement_expression)
    ')' 	reduce using rule 219 (statement_expression)
    ';' 	reduce using rule 219 (statement_expression)
    $default	reduce using rule 112 (unary_expression)



state 480

    assignment  ->  unary_expression . assignment_operator expression   (rule 158)

    PLUSEQ	shift, and go to state 319
    MINUSEQ	shift, and go to state 320
    STAREQ	shift, and go to state 321
    DIVEQ	shift, and go to state 322
    MODEQ	shift, and go to state 323
    XOREQ	shift, and go to state 324
    ANDEQ	shift, and go to state 325
    OREQ	shift, and go to state 326
    GTGTEQ	shift, and go to state 327
    LTLTEQ	shift, and go to state 328
    '=' 	shift, and go to state 329

    assignment_operator	go to state 330



state 481

    statement_expression  ->  assignment .   (rule 215)

    $default	reduce using rule 215 (statement_expression)



state 482

    statement_list  ->  statement .   (rule 193)

    $default	reduce using rule 193 (statement_list)



state 483

    statement  ->  embedded_statement .   (rule 176)

    $default	reduce using rule 176 (statement)



state 484

    embedded_statement  ->  block .   (rule 177)

    $default	reduce using rule 177 (embedded_statement)



state 485

    block  ->  '{' statement_list_opt . '}'   (rule 190)

    '}' 	shift, and go to state 604



state 486

    statement_list_opt  ->  statement_list .   (rule 192)
    statement_list  ->  statement_list . statement   (rule 194)

    IDENTIFIER	shift, and go to state 450
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 451
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 452
    CONST	shift, and go to state 453
    CONTINUE	shift, and go to state 454
    DECIMAL	shift, and go to state 81
    DO  	shift, and go to state 455
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FIXED	shift, and go to state 456
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 457
    FOREACH	shift, and go to state 458
    GOTO	shift, and go to state 459
    IF  	shift, and go to state 460
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 461
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    RETURN	shift, and go to state 462
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    SWITCH	shift, and go to state 463
    THIS	shift, and go to state 173
    THROW	shift, and go to state 464
    TRUE	shift, and go to state 174
    TRY 	shift, and go to state 465
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 466
    UNSAFE	shift, and go to state 467
    USHORT	shift, and go to state 92
    USING	shift, and go to state 468
    VOID	shift, and go to state 288
    WHILE	shift, and go to state 469
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185
    '{' 	shift, and go to state 359
    ';' 	shift, and go to state 470

    $default	reduce using rule 192 (statement_list_opt)

    literal	go to state 186
    boolean_literal	go to state 187
    type_name	go to state 94
    type	go to state 471
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 472
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 473
    pointer_type	go to state 103
    array_type	go to state 104
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 474
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 475
    post_decrement_expression	go to state 476
    new_expression	go to state 202
    object_creation_expression	go to state 477
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 478
    pre_decrement_expression	go to state 479
    unary_expression	go to state 480
    cast_expression	go to state 216
    assignment	go to state 481
    statement	go to state 605
    embedded_statement	go to state 483
    block	go to state 484
    empty_statement	go to state 487
    labeled_statement	go to state 488
    declaration_statement	go to state 489
    local_variable_declaration	go to state 490
    local_constant_declaration	go to state 491
    expression_statement	go to state 492
    statement_expression	go to state 493
    selection_statement	go to state 494
    if_statement	go to state 495
    switch_statement	go to state 496
    iteration_statement	go to state 497
    unsafe_statement	go to state 498
    while_statement	go to state 499
    do_statement	go to state 500
    for_statement	go to state 501
    foreach_statement	go to state 502
    jump_statement	go to state 503
    break_statement	go to state 504
    continue_statement	go to state 505
    goto_statement	go to state 506
    return_statement	go to state 507
    throw_statement	go to state 508
    try_statement	go to state 509
    checked_statement	go to state 510
    unchecked_statement	go to state 511
    lock_statement	go to state 512
    using_statement	go to state 513
    fixed_statement	go to state 514
    qualified_identifier	go to state 515
    qualifier	go to state 10



state 487

    embedded_statement  ->  empty_statement .   (rule 178)

    $default	reduce using rule 178 (embedded_statement)



state 488

    statement  ->  labeled_statement .   (rule 174)

    $default	reduce using rule 174 (statement)



state 489

    statement  ->  declaration_statement .   (rule 175)

    $default	reduce using rule 175 (statement)



state 490

    declaration_statement  ->  local_variable_declaration . ';'   (rule 197)

    ';' 	shift, and go to state 606



state 491

    declaration_statement  ->  local_constant_declaration . ';'   (rule 198)

    ';' 	shift, and go to state 607



state 492

    embedded_statement  ->  expression_statement .   (rule 179)

    $default	reduce using rule 179 (embedded_statement)



state 493

    expression_statement  ->  statement_expression . ';'   (rule 212)

    ';' 	shift, and go to state 608



state 494

    embedded_statement  ->  selection_statement .   (rule 180)

    $default	reduce using rule 180 (embedded_statement)



state 495

    selection_statement  ->  if_statement .   (rule 220)

    $default	reduce using rule 220 (selection_statement)



state 496

    selection_statement  ->  switch_statement .   (rule 221)

    $default	reduce using rule 221 (selection_statement)



state 497

    embedded_statement  ->  iteration_statement .   (rule 181)

    $default	reduce using rule 181 (embedded_statement)



state 498

    embedded_statement  ->  unsafe_statement .   (rule 188)

    $default	reduce using rule 188 (embedded_statement)



state 499

    iteration_statement  ->  while_statement .   (rule 235)

    $default	reduce using rule 235 (iteration_statement)



state 500

    iteration_statement  ->  do_statement .   (rule 236)

    $default	reduce using rule 236 (iteration_statement)



state 501

    iteration_statement  ->  for_statement .   (rule 237)

    $default	reduce using rule 237 (iteration_statement)



state 502

    iteration_statement  ->  foreach_statement .   (rule 238)

    $default	reduce using rule 238 (iteration_statement)



state 503

    embedded_statement  ->  jump_statement .   (rule 182)

    $default	reduce using rule 182 (embedded_statement)



state 504

    jump_statement  ->  break_statement .   (rule 256)

    $default	reduce using rule 256 (jump_statement)



state 505

    jump_statement  ->  continue_statement .   (rule 257)

    $default	reduce using rule 257 (jump_statement)



state 506

    jump_statement  ->  goto_statement .   (rule 258)

    $default	reduce using rule 258 (jump_statement)



state 507

    jump_statement  ->  return_statement .   (rule 259)

    $default	reduce using rule 259 (jump_statement)



state 508

    jump_statement  ->  throw_statement .   (rule 260)

    $default	reduce using rule 260 (jump_statement)



state 509

    embedded_statement  ->  try_statement .   (rule 183)

    $default	reduce using rule 183 (embedded_statement)



state 510

    embedded_statement  ->  checked_statement .   (rule 184)

    $default	reduce using rule 184 (embedded_statement)



state 511

    embedded_statement  ->  unchecked_statement .   (rule 185)

    $default	reduce using rule 185 (embedded_statement)



state 512

    embedded_statement  ->  lock_statement .   (rule 186)

    $default	reduce using rule 186 (embedded_statement)



state 513

    embedded_statement  ->  using_statement .   (rule 187)

    $default	reduce using rule 187 (embedded_statement)



state 514

    embedded_statement  ->  fixed_statement .   (rule 189)

    $default	reduce using rule 189 (embedded_statement)



state 515

    type_name  ->  qualified_identifier .   (rule 10)
    array_type  ->  qualified_identifier . rank_specifier   (rule 40)
    invocation_expression  ->  qualified_identifier . '(' argument_list_opt ')'   (rule 69)
    element_access  ->  qualified_identifier . LEFT_BRACKET expression_list RIGHT_BRACKET   (rule 73)
    postfix_expression  ->  qualified_identifier .   (rule 97)

    RANK_SPECIFIER	shift, and go to state 124
    LEFT_BRACKET	shift, and go to state 352
    '(' 	shift, and go to state 353

    IDENTIFIER	reduce using rule 10 (type_name)
    '*' 	reduce using rule 10 (type_name)
    '*' 	[reduce using rule 97 (postfix_expression)]
    $default	reduce using rule 97 (postfix_expression)

    rank_specifier	go to state 127



state 516

    pointer_type  ->  type . '*'   (rule 36)
    parameter_array  ->  attributes_opt PARAMS type . IDENTIFIER   (rule 382)

    IDENTIFIER	shift, and go to state 609
    '*' 	shift, and go to state 123



state 517

    pointer_type  ->  type . '*'   (rule 36)
    fixed_parameter  ->  attributes_opt parameter_modifier_opt type . IDENTIFIER   (rule 378)

    IDENTIFIER	shift, and go to state 610
    '*' 	shift, and go to state 123



state 518

    delegate_declaration  ->  attributes_opt modifiers_opt DELEGATE return_type IDENTIFIER '(' formal_parameter_list_opt ')' ';' .   (rule 506)

    $default	reduce using rule 506 (delegate_declaration)



state 519

    formal_parameter_list  ->  formal_parameter_list COMMA formal_parameter .   (rule 375)

    $default	reduce using rule 375 (formal_parameter_list)



state 520

    enum_member_declaration  ->  attributes_opt IDENTIFIER '=' . constant_expression   (rule 505)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 611
    constant_expression	go to state 612
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 521

    enum_body  ->  '{' enum_member_declarations COMMA '}' .   (rule 499)

    $default	reduce using rule 499 (enum_body)



state 522

    enum_member_declarations  ->  enum_member_declarations COMMA enum_member_declaration .   (rule 503)

    $default	reduce using rule 503 (enum_member_declarations)



state 523

    interface_event_declaration  ->  attributes_opt new_opt EVENT . type IDENTIFIER interface_empty_body   (rule 491)

    IDENTIFIER	shift, and go to state 52
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 288

    type_name	go to state 94
    type	go to state 613
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10



state 524

    pointer_type  ->  VOID . '*'   (rule 37)
    interface_method_declaration  ->  attributes_opt new_opt VOID . IDENTIFIER '(' formal_parameter_list_opt ')' interface_empty_body   (rule 482)

    IDENTIFIER	shift, and go to state 614
    '*' 	shift, and go to state 122



state 525

    pointer_type  ->  type . '*'   (rule 36)
    interface_method_declaration  ->  attributes_opt new_opt type . IDENTIFIER '(' formal_parameter_list_opt ')' interface_empty_body   (rule 481)
    interface_property_declaration  ->  attributes_opt new_opt type . IDENTIFIER ENTER_getset '{' interface_accessors '}' EXIT_getset   (rule 485)
    interface_indexer_declaration  ->  attributes_opt new_opt type . THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET ENTER_getset '{' interface_accessors '}' EXIT_getset   (rule 486)

    IDENTIFIER	shift, and go to state 615
    THIS	shift, and go to state 616
    '*' 	shift, and go to state 123



state 526

    base_access  ->  BASE LEFT_BRACKET expression_list RIGHT_BRACKET .   (rule 80)

    $default	reduce using rule 80 (base_access)



state 527

    checked_expression  ->  CHECKED '(' expression ')' .   (rule 91)

    $default	reduce using rule 91 (checked_expression)



state 528

    object_creation_expression  ->  NEW type '(' argument_list_opt . ')'   (rule 84)

    ')' 	shift, and go to state 617



state 529

    expression_list  ->  expression_list . COMMA expression   (rule 77)
    array_creation_expression  ->  NEW non_array_type LEFT_BRACKET expression_list . RIGHT_BRACKET rank_specifiers_opt array_initializer_opt   (rule 85)

    COMMA	shift, and go to state 315
    RIGHT_BRACKET	shift, and go to state 618



state 530

    stackalloc_initializer  ->  STACKALLOC . type LEFT_BRACKET expression RIGHT_BRACKET   (rule 207)

    IDENTIFIER	shift, and go to state 52
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 288

    type_name	go to state 94
    type	go to state 619
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10



state 531

    variable_initializer  ->  expression .   (rule 204)

    $default	reduce using rule 204 (variable_initializer)



state 532

    variable_initializer_list  ->  variable_initializer .   (rule 466)

    $default	reduce using rule 466 (variable_initializer_list)



state 533

    variable_initializer  ->  stackalloc_initializer .   (rule 206)

    $default	reduce using rule 206 (variable_initializer)



state 534

    variable_initializer  ->  array_initializer .   (rule 205)

    $default	reduce using rule 205 (variable_initializer)



state 535

    array_initializer  ->  '{' variable_initializer_list_opt . '}'   (rule 462)

    '}' 	shift, and go to state 620



state 536

    array_initializer  ->  '{' variable_initializer_list . COMMA '}'   (rule 463)
    variable_initializer_list_opt  ->  variable_initializer_list .   (rule 465)
    variable_initializer_list  ->  variable_initializer_list . COMMA variable_initializer   (rule 467)

    COMMA	shift, and go to state 621

    $default	reduce using rule 465 (variable_initializer_list_opt)



state 537

    sizeof_expression  ->  SIZEOF '(' type ')' .   (rule 95)

    $default	reduce using rule 95 (sizeof_expression)



state 538

    typeof_expression  ->  TYPEOF '(' VOID ')' .   (rule 90)

    $default	reduce using rule 90 (typeof_expression)



state 539

    typeof_expression  ->  TYPEOF '(' type ')' .   (rule 89)

    $default	reduce using rule 89 (typeof_expression)



state 540

    unchecked_expression  ->  UNCHECKED '(' expression ')' .   (rule 92)

    $default	reduce using rule 92 (unchecked_expression)



state 541

    cast_expression  ->  '(' VOID type_quals_opt ')' . unary_expression   (rule 119)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 622
    cast_expression	go to state 216
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 542

    type_quals  ->  type_quals type_qual .   (rule 123)

    $default	reduce using rule 123 (type_quals)



state 543

    cast_expression  ->  '(' primitive_type type_quals_opt ')' . unary_expression   (rule 117)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 623
    cast_expression	go to state 216
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 544

    cast_expression  ->  '(' class_type type_quals_opt ')' . unary_expression   (rule 118)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 624
    cast_expression	go to state 216
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 545

    cast_expression  ->  '(' multiplicative_expression '*' ')' . unary_expression   (rule 115)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 625
    cast_expression	go to state 216
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 546

    cast_expression  ->  '(' expression ')' unary_expression_not_plusminus .   (rule 114)

    $default	reduce using rule 114 (cast_expression)



state 547

    cast_expression  ->  '(' qualified_identifier rank_specifier type_quals_opt . ')' unary_expression   (rule 116)

    ')' 	shift, and go to state 626



state 548

    element_access  ->  primary_expression LEFT_BRACKET expression_list RIGHT_BRACKET .   (rule 72)

    $default	reduce using rule 72 (element_access)



state 549

    argument  ->  OUT variable_reference .   (rule 49)

    $default	reduce using rule 49 (argument)



state 550

    variable_reference  ->  expression .   (rule 44)

    $default	reduce using rule 44 (variable_reference)



state 551

    argument  ->  REF variable_reference .   (rule 48)

    $default	reduce using rule 48 (argument)



state 552

    argument_list  ->  argument_list COMMA . argument   (rule 46)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    OUT 	shift, and go to state 404
    REF 	shift, and go to state 405
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    argument	go to state 627
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 409
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 553

    invocation_expression  ->  primary_expression_no_parenthesis '(' argument_list_opt ')' .   (rule 68)

    $default	reduce using rule 68 (invocation_expression)



state 554

    conditional_expression  ->  conditional_or_expression '?' expression ':' . expression   (rule 157)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 628
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 555

    element_access  ->  qualified_identifier LEFT_BRACKET expression_list RIGHT_BRACKET .   (rule 73)

    $default	reduce using rule 73 (element_access)



state 556

    invocation_expression  ->  qualified_identifier '(' argument_list_opt ')' .   (rule 69)

    $default	reduce using rule 69 (invocation_expression)



state 557

    constructor_declarator  ->  IDENTIFIER '(' . formal_parameter_list_opt ')' constructor_initializer_opt   (rule 434)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    ')' 	reduce using rule 368 (formal_parameter_list_opt)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 250
    formal_parameter_list_opt	go to state 629
    formal_parameter_list	go to state 252
    formal_parameter	go to state 253
    fixed_parameter	go to state 254
    parameter_array	go to state 255
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 558

    pointer_type  ->  type . '*'   (rule 36)
    constant_declaration  ->  attributes_opt modifiers_opt CONST type . constant_declarators ';'   (rule 363)

    IDENTIFIER	shift, and go to state 630
    '*' 	shift, and go to state 123

    constant_declarators	go to state 631
    constant_declarator	go to state 632



state 559

    pointer_type  ->  type . '*'   (rule 36)
    event_declaration  ->  attributes_opt modifiers_opt EVENT type . variable_declarators ';'   (rule 394)
    event_declaration  ->  attributes_opt modifiers_opt EVENT type . qualified_identifier ENTER_accessor_decl '{' event_accessor_declarations '}' EXIT_accessor_decl   (rule 395)

    IDENTIFIER	shift, and go to state 564
    '*' 	shift, and go to state 123

    variable_declarators	go to state 633
    variable_declarator	go to state 568
    qualified_identifier	go to state 634
    qualifier	go to state 10



state 560

    conversion_operator_declarator  ->  EXPLICIT OPERATOR . type '(' type IDENTIFIER ')'   (rule 432)

    IDENTIFIER	shift, and go to state 52
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 288

    type_name	go to state 94
    type	go to state 635
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10



state 561

    conversion_operator_declarator  ->  IMPLICIT OPERATOR . type '(' type IDENTIFIER ')'   (rule 431)

    IDENTIFIER	shift, and go to state 52
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 288

    type_name	go to state 94
    type	go to state 636
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10



state 562

    method_header  ->  attributes_opt modifiers_opt VOID qualified_identifier . '(' formal_parameter_list_opt ')'   (rule 367)

    '(' 	shift, and go to state 637



state 563

    destructor_declaration  ->  attributes_opt modifiers_opt '~' IDENTIFIER . '(' ')' block   (rule 439)

    '(' 	shift, and go to state 638



state 564

    variable_declarator  ->  IDENTIFIER .   (rule 202)
    variable_declarator  ->  IDENTIFIER . '=' variable_initializer   (rule 203)
    qualified_identifier  ->  IDENTIFIER .   (rule 302)
    qualifier  ->  IDENTIFIER . '.'   (rule 304)

    '.' 	shift, and go to state 26
    '=' 	shift, and go to state 639

    '(' 	reduce using rule 302 (qualified_identifier)
    '{' 	reduce using rule 302 (qualified_identifier)
    $default	reduce using rule 202 (variable_declarator)



state 565

    overloadable_operator_declarator  ->  type OPERATOR . overloadable_operator '(' type IDENTIFIER ')'   (rule 407)
    overloadable_operator_declarator  ->  type OPERATOR . overloadable_operator '(' type IDENTIFIER COMMA type IDENTIFIER ')'   (rule 408)

    FALSE	shift, and go to state 640
    TRUE	shift, and go to state 641
    LTLT	shift, and go to state 642
    GTGT	shift, and go to state 643
    EQEQ	shift, and go to state 644
    NOTEQ	shift, and go to state 645
    LEQ 	shift, and go to state 646
    GEQ 	shift, and go to state 647
    PLUSPLUS	shift, and go to state 648
    MINUSMINUS	shift, and go to state 649
    '*' 	shift, and go to state 650
    '&' 	shift, and go to state 651
    '!' 	shift, and go to state 652
    '~' 	shift, and go to state 653
    '+' 	shift, and go to state 654
    '-' 	shift, and go to state 655
    '/' 	shift, and go to state 656
    '%' 	shift, and go to state 657
    '<' 	shift, and go to state 658
    '>' 	shift, and go to state 659
    '^' 	shift, and go to state 660
    '|' 	shift, and go to state 661

    overloadable_operator	go to state 662



state 566

    indexer_declarator  ->  type THIS . LEFT_BRACKET formal_parameter_list RIGHT_BRACKET   (rule 401)

    LEFT_BRACKET	shift, and go to state 663



state 567

    variable_declarators  ->  variable_declarators . COMMA variable_declarator   (rule 201)
    field_declaration  ->  attributes_opt modifiers_opt type variable_declarators . ';'   (rule 364)

    COMMA	shift, and go to state 664
    ';' 	shift, and go to state 665



state 568

    variable_declarators  ->  variable_declarator .   (rule 200)

    $default	reduce using rule 200 (variable_declarators)



state 569

    method_header  ->  attributes_opt modifiers_opt type qualified_identifier . '(' formal_parameter_list_opt ')'   (rule 366)
    property_declaration  ->  attributes_opt modifiers_opt type qualified_identifier . ENTER_getset '{' accessor_declarations '}' EXIT_getset   (rule 383)

    '(' 	shift, and go to state 666

    $default	reduce using rule 535 (ENTER_getset)

    ENTER_getset	go to state 667



state 570

    qualified_identifier  ->  qualifier . IDENTIFIER   (rule 303)
    qualifier  ->  qualifier . IDENTIFIER '.'   (rule 305)
    qualified_this  ->  qualifier . THIS   (rule 403)

    IDENTIFIER	shift, and go to state 29
    THIS	shift, and go to state 668



state 571

    indexer_declarator  ->  type qualified_this . LEFT_BRACKET formal_parameter_list RIGHT_BRACKET   (rule 402)

    LEFT_BRACKET	shift, and go to state 669



state 572

    indexer_declaration  ->  attributes_opt modifiers_opt indexer_declarator ENTER_getset . '{' accessor_declarations '}' EXIT_getset   (rule 400)

    '{' 	shift, and go to state 670



state 573

    operator_body  ->  ';' .   (rule 441)

    $default	reduce using rule 441 (operator_body)



state 574

    operator_body  ->  block .   (rule 440)

    $default	reduce using rule 440 (operator_body)



state 575

    operator_declaration  ->  attributes_opt modifiers_opt operator_declarator operator_body .   (rule 404)

    $default	reduce using rule 404 (operator_declaration)



state 576

    constructor_body  ->  ';' .   (rule 443)

    $default	reduce using rule 443 (constructor_body)



state 577

    constructor_body  ->  block .   (rule 442)

    $default	reduce using rule 442 (constructor_body)



state 578

    constructor_declaration  ->  attributes_opt modifiers_opt constructor_declarator constructor_body .   (rule 433)

    $default	reduce using rule 433 (constructor_declaration)



state 579

    labeled_statement  ->  IDENTIFIER ':' . statement   (rule 196)

    IDENTIFIER	shift, and go to state 450
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 451
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 452
    CONST	shift, and go to state 453
    CONTINUE	shift, and go to state 454
    DECIMAL	shift, and go to state 81
    DO  	shift, and go to state 455
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FIXED	shift, and go to state 456
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 457
    FOREACH	shift, and go to state 458
    GOTO	shift, and go to state 459
    IF  	shift, and go to state 460
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 461
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    RETURN	shift, and go to state 462
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    SWITCH	shift, and go to state 463
    THIS	shift, and go to state 173
    THROW	shift, and go to state 464
    TRUE	shift, and go to state 174
    TRY 	shift, and go to state 465
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 466
    UNSAFE	shift, and go to state 467
    USHORT	shift, and go to state 92
    USING	shift, and go to state 468
    VOID	shift, and go to state 288
    WHILE	shift, and go to state 469
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185
    '{' 	shift, and go to state 359
    ';' 	shift, and go to state 470

    literal	go to state 186
    boolean_literal	go to state 187
    type_name	go to state 94
    type	go to state 471
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 472
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 473
    pointer_type	go to state 103
    array_type	go to state 104
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 474
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 475
    post_decrement_expression	go to state 476
    new_expression	go to state 202
    object_creation_expression	go to state 477
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 478
    pre_decrement_expression	go to state 479
    unary_expression	go to state 480
    cast_expression	go to state 216
    assignment	go to state 481
    statement	go to state 671
    embedded_statement	go to state 483
    block	go to state 484
    empty_statement	go to state 487
    labeled_statement	go to state 488
    declaration_statement	go to state 489
    local_variable_declaration	go to state 490
    local_constant_declaration	go to state 491
    expression_statement	go to state 492
    statement_expression	go to state 493
    selection_statement	go to state 494
    if_statement	go to state 495
    switch_statement	go to state 496
    iteration_statement	go to state 497
    unsafe_statement	go to state 498
    while_statement	go to state 499
    do_statement	go to state 500
    for_statement	go to state 501
    foreach_statement	go to state 502
    jump_statement	go to state 503
    break_statement	go to state 504
    continue_statement	go to state 505
    goto_statement	go to state 506
    return_statement	go to state 507
    throw_statement	go to state 508
    try_statement	go to state 509
    checked_statement	go to state 510
    unchecked_statement	go to state 511
    lock_statement	go to state 512
    using_statement	go to state 513
    fixed_statement	go to state 514
    qualified_identifier	go to state 515
    qualifier	go to state 10



state 580

    break_statement  ->  BREAK ';' .   (rule 261)

    $default	reduce using rule 261 (break_statement)



state 581

    checked_statement  ->  CHECKED block .   (rule 281)

    $default	reduce using rule 281 (checked_statement)



state 582

    pointer_type  ->  type . '*'   (rule 36)
    local_constant_declaration  ->  CONST type . constant_declarators   (rule 208)

    IDENTIFIER	shift, and go to state 630
    '*' 	shift, and go to state 123

    constant_declarators	go to state 672
    constant_declarator	go to state 632



state 583

    continue_statement  ->  CONTINUE ';' .   (rule 262)

    $default	reduce using rule 262 (continue_statement)



state 584

    do_statement  ->  DO embedded_statement . WHILE '(' boolean_expression ')' ';'   (rule 241)

    WHILE	shift, and go to state 673



state 585

    fixed_statement  ->  FIXED '(' . type fixed_pointer_declarators ')' embedded_statement   (rule 287)

    IDENTIFIER	shift, and go to state 52
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 288

    type_name	go to state 94
    type	go to state 674
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10



state 586

    for_statement  ->  FOR '(' . for_initializer_opt ';' for_condition_opt ';' for_iterator_opt ')' embedded_statement   (rule 242)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 288
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    $default	reduce using rule 243 (for_initializer_opt)

    literal	go to state 186
    boolean_literal	go to state 187
    type_name	go to state 94
    type	go to state 471
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 472
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 473
    pointer_type	go to state 103
    array_type	go to state 104
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 474
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 475
    post_decrement_expression	go to state 476
    new_expression	go to state 202
    object_creation_expression	go to state 477
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 478
    pre_decrement_expression	go to state 479
    unary_expression	go to state 480
    cast_expression	go to state 216
    assignment	go to state 481
    local_variable_declaration	go to state 675
    statement_expression	go to state 676
    for_initializer_opt	go to state 677
    for_initializer	go to state 678
    statement_expression_list	go to state 679
    qualified_identifier	go to state 515
    qualifier	go to state 10



state 587

    foreach_statement  ->  FOREACH '(' . type IDENTIFIER IN expression ')' embedded_statement   (rule 255)

    IDENTIFIER	shift, and go to state 52
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 288

    type_name	go to state 94
    type	go to state 680
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10



state 588

    goto_statement  ->  GOTO IDENTIFIER . ';'   (rule 263)

    ';' 	shift, and go to state 681



state 589

    goto_statement  ->  GOTO CASE . constant_expression ';'   (rule 264)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 611
    constant_expression	go to state 682
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 590

    goto_statement  ->  GOTO DEFAULT . ';'   (rule 265)

    ';' 	shift, and go to state 683



state 591

    if_statement  ->  IF '(' . boolean_expression ')' embedded_statement   (rule 222)
    if_statement  ->  IF '(' . boolean_expression ')' embedded_statement ELSE embedded_statement   (rule 223)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 684
    boolean_expression	go to state 685
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 592

    lock_statement  ->  LOCK '(' . expression ')' embedded_statement   (rule 283)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 686
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 593

    expression_opt  ->  expression .   (rule 268)

    $default	reduce using rule 268 (expression_opt)



state 594

    return_statement  ->  RETURN expression_opt . ';'   (rule 266)

    ';' 	shift, and go to state 687



state 595

    switch_statement  ->  SWITCH '(' . expression ')' switch_block   (rule 224)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 688
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 596

    throw_statement  ->  THROW expression_opt . ';'   (rule 269)

    ';' 	shift, and go to state 689



state 597

    try_statement  ->  TRY block . catch_clauses   (rule 270)
    try_statement  ->  TRY block . finally_clause   (rule 271)
    try_statement  ->  TRY block . catch_clauses finally_clause   (rule 272)

    CATCH	shift, and go to state 690
    FINALLY	shift, and go to state 691

    catch_clauses	go to state 692
    catch_clause	go to state 693
    finally_clause	go to state 694



state 598

    unchecked_statement  ->  UNCHECKED block .   (rule 282)

    $default	reduce using rule 282 (unchecked_statement)



state 599

    unsafe_statement  ->  UNSAFE block .   (rule 239)

    $default	reduce using rule 239 (unsafe_statement)



state 600

    using_statement  ->  USING '(' . resource_acquisition ')' embedded_statement   (rule 284)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 288
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    type_name	go to state 94
    type	go to state 471
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 472
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 473
    pointer_type	go to state 103
    array_type	go to state 104
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 695
    local_variable_declaration	go to state 696
    resource_acquisition	go to state 697
    qualified_identifier	go to state 515
    qualifier	go to state 10



state 601

    while_statement  ->  WHILE '(' . boolean_expression ')' embedded_statement   (rule 240)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 684
    boolean_expression	go to state 698
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 602

    variable_declarator  ->  IDENTIFIER .   (rule 202)
    variable_declarator  ->  IDENTIFIER . '=' variable_initializer   (rule 203)

    '=' 	shift, and go to state 639

    $default	reduce using rule 202 (variable_declarator)



state 603

    local_variable_declaration  ->  type variable_declarators .   (rule 199)
    variable_declarators  ->  variable_declarators . COMMA variable_declarator   (rule 201)

    COMMA	shift, and go to state 664

    $default	reduce using rule 199 (local_variable_declaration)



state 604

    block  ->  '{' statement_list_opt '}' .   (rule 190)

    $default	reduce using rule 190 (block)



state 605

    statement_list  ->  statement_list statement .   (rule 194)

    $default	reduce using rule 194 (statement_list)



state 606

    declaration_statement  ->  local_variable_declaration ';' .   (rule 197)

    $default	reduce using rule 197 (declaration_statement)



state 607

    declaration_statement  ->  local_constant_declaration ';' .   (rule 198)

    $default	reduce using rule 198 (declaration_statement)



state 608

    expression_statement  ->  statement_expression ';' .   (rule 212)

    $default	reduce using rule 212 (expression_statement)



state 609

    parameter_array  ->  attributes_opt PARAMS type IDENTIFIER .   (rule 382)

    $default	reduce using rule 382 (parameter_array)



state 610

    fixed_parameter  ->  attributes_opt parameter_modifier_opt type IDENTIFIER .   (rule 378)

    $default	reduce using rule 378 (fixed_parameter)



state 611

    constant_expression  ->  expression .   (rule 172)

    $default	reduce using rule 172 (constant_expression)



state 612

    enum_member_declaration  ->  attributes_opt IDENTIFIER '=' constant_expression .   (rule 505)

    $default	reduce using rule 505 (enum_member_declaration)



state 613

    pointer_type  ->  type . '*'   (rule 36)
    interface_event_declaration  ->  attributes_opt new_opt EVENT type . IDENTIFIER interface_empty_body   (rule 491)

    IDENTIFIER	shift, and go to state 699
    '*' 	shift, and go to state 123



state 614

    interface_method_declaration  ->  attributes_opt new_opt VOID IDENTIFIER . '(' formal_parameter_list_opt ')' interface_empty_body   (rule 482)

    '(' 	shift, and go to state 700



state 615

    interface_method_declaration  ->  attributes_opt new_opt type IDENTIFIER . '(' formal_parameter_list_opt ')' interface_empty_body   (rule 481)
    interface_property_declaration  ->  attributes_opt new_opt type IDENTIFIER . ENTER_getset '{' interface_accessors '}' EXIT_getset   (rule 485)

    '(' 	shift, and go to state 701

    $default	reduce using rule 535 (ENTER_getset)

    ENTER_getset	go to state 702



state 616

    interface_indexer_declaration  ->  attributes_opt new_opt type THIS . LEFT_BRACKET formal_parameter_list RIGHT_BRACKET ENTER_getset '{' interface_accessors '}' EXIT_getset   (rule 486)

    LEFT_BRACKET	shift, and go to state 703



state 617

    object_creation_expression  ->  NEW type '(' argument_list_opt ')' .   (rule 84)

    $default	reduce using rule 84 (object_creation_expression)



state 618

    array_creation_expression  ->  NEW non_array_type LEFT_BRACKET expression_list RIGHT_BRACKET . rank_specifiers_opt array_initializer_opt   (rule 85)

    RANK_SPECIFIER	shift, and go to state 124

    $default	reduce using rule 41 (rank_specifiers_opt)

    rank_specifiers_opt	go to state 704
    rank_specifier	go to state 705



state 619

    pointer_type  ->  type . '*'   (rule 36)
    stackalloc_initializer  ->  STACKALLOC type . LEFT_BRACKET expression RIGHT_BRACKET   (rule 207)

    LEFT_BRACKET	shift, and go to state 706
    '*' 	shift, and go to state 123



state 620

    array_initializer  ->  '{' variable_initializer_list_opt '}' .   (rule 462)

    $default	reduce using rule 462 (array_initializer)



state 621

    array_initializer  ->  '{' variable_initializer_list COMMA . '}'   (rule 463)
    variable_initializer_list  ->  variable_initializer_list COMMA . variable_initializer   (rule 467)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STACKALLOC	shift, and go to state 530
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185
    '{' 	shift, and go to state 384
    '}' 	shift, and go to state 707

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 531
    variable_initializer	go to state 708
    stackalloc_initializer	go to state 533
    qualified_identifier	go to state 230
    qualifier	go to state 10
    array_initializer	go to state 534



state 622

    cast_expression  ->  '(' VOID type_quals_opt ')' unary_expression .   (rule 119)

    $default	reduce using rule 119 (cast_expression)



state 623

    cast_expression  ->  '(' primitive_type type_quals_opt ')' unary_expression .   (rule 117)

    $default	reduce using rule 117 (cast_expression)



state 624

    cast_expression  ->  '(' class_type type_quals_opt ')' unary_expression .   (rule 118)

    $default	reduce using rule 118 (cast_expression)



state 625

    cast_expression  ->  '(' multiplicative_expression '*' ')' unary_expression .   (rule 115)

    $default	reduce using rule 115 (cast_expression)



state 626

    cast_expression  ->  '(' qualified_identifier rank_specifier type_quals_opt ')' . unary_expression   (rule 116)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 709
    cast_expression	go to state 216
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 627

    argument_list  ->  argument_list COMMA argument .   (rule 46)

    $default	reduce using rule 46 (argument_list)



state 628

    conditional_expression  ->  conditional_or_expression '?' expression ':' expression .   (rule 157)

    $default	reduce using rule 157 (conditional_expression)



state 629

    constructor_declarator  ->  IDENTIFIER '(' formal_parameter_list_opt . ')' constructor_initializer_opt   (rule 434)

    ')' 	shift, and go to state 710



state 630

    constant_declarator  ->  IDENTIFIER . '=' constant_expression   (rule 211)

    '=' 	shift, and go to state 711



state 631

    constant_declarators  ->  constant_declarators . COMMA constant_declarator   (rule 210)
    constant_declaration  ->  attributes_opt modifiers_opt CONST type constant_declarators . ';'   (rule 363)

    COMMA	shift, and go to state 712
    ';' 	shift, and go to state 713



state 632

    constant_declarators  ->  constant_declarator .   (rule 209)

    $default	reduce using rule 209 (constant_declarators)



state 633

    variable_declarators  ->  variable_declarators . COMMA variable_declarator   (rule 201)
    event_declaration  ->  attributes_opt modifiers_opt EVENT type variable_declarators . ';'   (rule 394)

    COMMA	shift, and go to state 664
    ';' 	shift, and go to state 714



state 634

    event_declaration  ->  attributes_opt modifiers_opt EVENT type qualified_identifier . ENTER_accessor_decl '{' event_accessor_declarations '}' EXIT_accessor_decl   (rule 395)

    $default	reduce using rule 533 (ENTER_accessor_decl)

    ENTER_accessor_decl	go to state 715



state 635

    pointer_type  ->  type . '*'   (rule 36)
    conversion_operator_declarator  ->  EXPLICIT OPERATOR type . '(' type IDENTIFIER ')'   (rule 432)

    '*' 	shift, and go to state 123
    '(' 	shift, and go to state 716



state 636

    pointer_type  ->  type . '*'   (rule 36)
    conversion_operator_declarator  ->  IMPLICIT OPERATOR type . '(' type IDENTIFIER ')'   (rule 431)

    '*' 	shift, and go to state 123
    '(' 	shift, and go to state 717



state 637

    method_header  ->  attributes_opt modifiers_opt VOID qualified_identifier '(' . formal_parameter_list_opt ')'   (rule 367)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    ')' 	reduce using rule 368 (formal_parameter_list_opt)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 250
    formal_parameter_list_opt	go to state 718
    formal_parameter_list	go to state 252
    formal_parameter	go to state 253
    fixed_parameter	go to state 254
    parameter_array	go to state 255
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 638

    destructor_declaration  ->  attributes_opt modifiers_opt '~' IDENTIFIER '(' . ')' block   (rule 439)

    ')' 	shift, and go to state 719



state 639

    variable_declarator  ->  IDENTIFIER '=' . variable_initializer   (rule 203)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STACKALLOC	shift, and go to state 530
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185
    '{' 	shift, and go to state 384

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 531
    variable_initializer	go to state 720
    stackalloc_initializer	go to state 533
    qualified_identifier	go to state 230
    qualifier	go to state 10
    array_initializer	go to state 534



state 640

    overloadable_operator  ->  FALSE .   (rule 416)

    $default	reduce using rule 416 (overloadable_operator)



state 641

    overloadable_operator  ->  TRUE .   (rule 415)

    $default	reduce using rule 415 (overloadable_operator)



state 642

    overloadable_operator  ->  LTLT .   (rule 423)

    $default	reduce using rule 423 (overloadable_operator)



state 643

    overloadable_operator  ->  GTGT .   (rule 424)

    $default	reduce using rule 424 (overloadable_operator)



state 644

    overloadable_operator  ->  EQEQ .   (rule 425)

    $default	reduce using rule 425 (overloadable_operator)



state 645

    overloadable_operator  ->  NOTEQ .   (rule 426)

    $default	reduce using rule 426 (overloadable_operator)



state 646

    overloadable_operator  ->  LEQ .   (rule 430)

    $default	reduce using rule 430 (overloadable_operator)



state 647

    overloadable_operator  ->  GEQ .   (rule 429)

    $default	reduce using rule 429 (overloadable_operator)



state 648

    overloadable_operator  ->  PLUSPLUS .   (rule 413)

    $default	reduce using rule 413 (overloadable_operator)



state 649

    overloadable_operator  ->  MINUSMINUS .   (rule 414)

    $default	reduce using rule 414 (overloadable_operator)



state 650

    overloadable_operator  ->  '*' .   (rule 417)

    $default	reduce using rule 417 (overloadable_operator)



state 651

    overloadable_operator  ->  '&' .   (rule 420)

    $default	reduce using rule 420 (overloadable_operator)



state 652

    overloadable_operator  ->  '!' .   (rule 411)

    $default	reduce using rule 411 (overloadable_operator)



state 653

    overloadable_operator  ->  '~' .   (rule 412)

    $default	reduce using rule 412 (overloadable_operator)



state 654

    overloadable_operator  ->  '+' .   (rule 409)

    $default	reduce using rule 409 (overloadable_operator)



state 655

    overloadable_operator  ->  '-' .   (rule 410)

    $default	reduce using rule 410 (overloadable_operator)



state 656

    overloadable_operator  ->  '/' .   (rule 418)

    $default	reduce using rule 418 (overloadable_operator)



state 657

    overloadable_operator  ->  '%' .   (rule 419)

    $default	reduce using rule 419 (overloadable_operator)



state 658

    overloadable_operator  ->  '<' .   (rule 428)

    $default	reduce using rule 428 (overloadable_operator)



state 659

    overloadable_operator  ->  '>' .   (rule 427)

    $default	reduce using rule 427 (overloadable_operator)



state 660

    overloadable_operator  ->  '^' .   (rule 422)

    $default	reduce using rule 422 (overloadable_operator)



state 661

    overloadable_operator  ->  '|' .   (rule 421)

    $default	reduce using rule 421 (overloadable_operator)



state 662

    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator . '(' type IDENTIFIER ')'   (rule 407)
    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator . '(' type IDENTIFIER COMMA type IDENTIFIER ')'   (rule 408)

    '(' 	shift, and go to state 721



state 663

    indexer_declarator  ->  type THIS LEFT_BRACKET . formal_parameter_list RIGHT_BRACKET   (rule 401)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 250
    formal_parameter_list	go to state 722
    formal_parameter	go to state 253
    fixed_parameter	go to state 254
    parameter_array	go to state 255
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 664

    variable_declarators  ->  variable_declarators COMMA . variable_declarator   (rule 201)

    IDENTIFIER	shift, and go to state 602

    variable_declarator	go to state 723



state 665

    field_declaration  ->  attributes_opt modifiers_opt type variable_declarators ';' .   (rule 364)

    $default	reduce using rule 364 (field_declaration)



state 666

    method_header  ->  attributes_opt modifiers_opt type qualified_identifier '(' . formal_parameter_list_opt ')'   (rule 366)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    ')' 	reduce using rule 368 (formal_parameter_list_opt)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 250
    formal_parameter_list_opt	go to state 724
    formal_parameter_list	go to state 252
    formal_parameter	go to state 253
    fixed_parameter	go to state 254
    parameter_array	go to state 255
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 667

    property_declaration  ->  attributes_opt modifiers_opt type qualified_identifier ENTER_getset . '{' accessor_declarations '}' EXIT_getset   (rule 383)

    '{' 	shift, and go to state 725



state 668

    qualified_this  ->  qualifier THIS .   (rule 403)

    $default	reduce using rule 403 (qualified_this)



state 669

    indexer_declarator  ->  type qualified_this LEFT_BRACKET . formal_parameter_list RIGHT_BRACKET   (rule 402)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 250
    formal_parameter_list	go to state 726
    formal_parameter	go to state 253
    fixed_parameter	go to state 254
    parameter_array	go to state 255
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 670

    indexer_declaration  ->  attributes_opt modifiers_opt indexer_declarator ENTER_getset '{' . accessor_declarations '}' EXIT_getset   (rule 400)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 727
    accessor_declarations	go to state 728
    get_accessor_declaration	go to state 729
    set_accessor_declaration	go to state 730
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 671

    labeled_statement  ->  IDENTIFIER ':' statement .   (rule 196)

    $default	reduce using rule 196 (labeled_statement)



state 672

    local_constant_declaration  ->  CONST type constant_declarators .   (rule 208)
    constant_declarators  ->  constant_declarators . COMMA constant_declarator   (rule 210)

    COMMA	shift, and go to state 712

    $default	reduce using rule 208 (local_constant_declaration)



state 673

    do_statement  ->  DO embedded_statement WHILE . '(' boolean_expression ')' ';'   (rule 241)

    '(' 	shift, and go to state 731



state 674

    pointer_type  ->  type . '*'   (rule 36)
    fixed_statement  ->  FIXED '(' type . fixed_pointer_declarators ')' embedded_statement   (rule 287)

    IDENTIFIER	shift, and go to state 732
    '*' 	shift, and go to state 123

    fixed_pointer_declarators	go to state 733
    fixed_pointer_declarator	go to state 734



state 675

    for_initializer  ->  local_variable_declaration .   (rule 249)

    $default	reduce using rule 249 (for_initializer)



state 676

    statement_expression_list  ->  statement_expression .   (rule 253)

    $default	reduce using rule 253 (statement_expression_list)



state 677

    for_statement  ->  FOR '(' for_initializer_opt . ';' for_condition_opt ';' for_iterator_opt ')' embedded_statement   (rule 242)

    ';' 	shift, and go to state 735



state 678

    for_initializer_opt  ->  for_initializer .   (rule 244)

    $default	reduce using rule 244 (for_initializer_opt)



state 679

    for_initializer  ->  statement_expression_list .   (rule 250)
    statement_expression_list  ->  statement_expression_list . COMMA statement_expression   (rule 254)

    COMMA	shift, and go to state 736

    $default	reduce using rule 250 (for_initializer)



state 680

    pointer_type  ->  type . '*'   (rule 36)
    foreach_statement  ->  FOREACH '(' type . IDENTIFIER IN expression ')' embedded_statement   (rule 255)

    IDENTIFIER	shift, and go to state 737
    '*' 	shift, and go to state 123



state 681

    goto_statement  ->  GOTO IDENTIFIER ';' .   (rule 263)

    $default	reduce using rule 263 (goto_statement)



state 682

    goto_statement  ->  GOTO CASE constant_expression . ';'   (rule 264)

    ';' 	shift, and go to state 738



state 683

    goto_statement  ->  GOTO DEFAULT ';' .   (rule 265)

    $default	reduce using rule 265 (goto_statement)



state 684

    boolean_expression  ->  expression .   (rule 173)

    $default	reduce using rule 173 (boolean_expression)



state 685

    if_statement  ->  IF '(' boolean_expression . ')' embedded_statement   (rule 222)
    if_statement  ->  IF '(' boolean_expression . ')' embedded_statement ELSE embedded_statement   (rule 223)

    ')' 	shift, and go to state 739



state 686

    lock_statement  ->  LOCK '(' expression . ')' embedded_statement   (rule 283)

    ')' 	shift, and go to state 740



state 687

    return_statement  ->  RETURN expression_opt ';' .   (rule 266)

    $default	reduce using rule 266 (return_statement)



state 688

    switch_statement  ->  SWITCH '(' expression . ')' switch_block   (rule 224)

    ')' 	shift, and go to state 741



state 689

    throw_statement  ->  THROW expression_opt ';' .   (rule 269)

    $default	reduce using rule 269 (throw_statement)



state 690

    catch_clause  ->  CATCH . '(' class_type identifier_opt ')' block   (rule 275)
    catch_clause  ->  CATCH . '(' type_name identifier_opt ')' block   (rule 276)
    catch_clause  ->  CATCH . block   (rule 277)

    '(' 	shift, and go to state 742
    '{' 	shift, and go to state 359

    block	go to state 743



state 691

    finally_clause  ->  FINALLY . block   (rule 280)

    '{' 	shift, and go to state 359

    block	go to state 744



state 692

    try_statement  ->  TRY block catch_clauses .   (rule 270)
    try_statement  ->  TRY block catch_clauses . finally_clause   (rule 272)
    catch_clauses  ->  catch_clauses . catch_clause   (rule 274)

    CATCH	shift, and go to state 690
    FINALLY	shift, and go to state 691

    $default	reduce using rule 270 (try_statement)

    catch_clause	go to state 745
    finally_clause	go to state 746



state 693

    catch_clauses  ->  catch_clause .   (rule 273)

    $default	reduce using rule 273 (catch_clauses)



state 694

    try_statement  ->  TRY block finally_clause .   (rule 271)

    $default	reduce using rule 271 (try_statement)



state 695

    resource_acquisition  ->  expression .   (rule 286)

    $default	reduce using rule 286 (resource_acquisition)



state 696

    resource_acquisition  ->  local_variable_declaration .   (rule 285)

    $default	reduce using rule 285 (resource_acquisition)



state 697

    using_statement  ->  USING '(' resource_acquisition . ')' embedded_statement   (rule 284)

    ')' 	shift, and go to state 747



state 698

    while_statement  ->  WHILE '(' boolean_expression . ')' embedded_statement   (rule 240)

    ')' 	shift, and go to state 748



state 699

    interface_event_declaration  ->  attributes_opt new_opt EVENT type IDENTIFIER . interface_empty_body   (rule 491)

    '{' 	shift, and go to state 749
    ';' 	shift, and go to state 750

    interface_empty_body	go to state 751



state 700

    interface_method_declaration  ->  attributes_opt new_opt VOID IDENTIFIER '(' . formal_parameter_list_opt ')' interface_empty_body   (rule 482)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    ')' 	reduce using rule 368 (formal_parameter_list_opt)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 250
    formal_parameter_list_opt	go to state 752
    formal_parameter_list	go to state 252
    formal_parameter	go to state 253
    fixed_parameter	go to state 254
    parameter_array	go to state 255
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 701

    interface_method_declaration  ->  attributes_opt new_opt type IDENTIFIER '(' . formal_parameter_list_opt ')' interface_empty_body   (rule 481)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    ')' 	reduce using rule 368 (formal_parameter_list_opt)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 250
    formal_parameter_list_opt	go to state 753
    formal_parameter_list	go to state 252
    formal_parameter	go to state 253
    fixed_parameter	go to state 254
    parameter_array	go to state 255
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 702

    interface_property_declaration  ->  attributes_opt new_opt type IDENTIFIER ENTER_getset . '{' interface_accessors '}' EXIT_getset   (rule 485)

    '{' 	shift, and go to state 754



state 703

    interface_indexer_declaration  ->  attributes_opt new_opt type THIS LEFT_BRACKET . formal_parameter_list RIGHT_BRACKET ENTER_getset '{' interface_accessors '}' EXIT_getset   (rule 486)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 250
    formal_parameter_list	go to state 755
    formal_parameter	go to state 253
    fixed_parameter	go to state 254
    parameter_array	go to state 255
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 704

    array_creation_expression  ->  NEW non_array_type LEFT_BRACKET expression_list RIGHT_BRACKET rank_specifiers_opt . array_initializer_opt   (rule 85)

    '{' 	shift, and go to state 384

    $default	reduce using rule 87 (array_initializer_opt)

    array_initializer_opt	go to state 756
    array_initializer	go to state 757



state 705

    rank_specifiers_opt  ->  rank_specifier . rank_specifiers_opt   (rule 42)

    RANK_SPECIFIER	shift, and go to state 124

    $default	reduce using rule 41 (rank_specifiers_opt)

    rank_specifiers_opt	go to state 758
    rank_specifier	go to state 705



state 706

    stackalloc_initializer  ->  STACKALLOC type LEFT_BRACKET . expression RIGHT_BRACKET   (rule 207)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 759
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 707

    array_initializer  ->  '{' variable_initializer_list COMMA '}' .   (rule 463)

    $default	reduce using rule 463 (array_initializer)



state 708

    variable_initializer_list  ->  variable_initializer_list COMMA variable_initializer .   (rule 467)

    $default	reduce using rule 467 (variable_initializer_list)



state 709

    cast_expression  ->  '(' qualified_identifier rank_specifier type_quals_opt ')' unary_expression .   (rule 116)

    $default	reduce using rule 116 (cast_expression)



state 710

    constructor_declarator  ->  IDENTIFIER '(' formal_parameter_list_opt ')' . constructor_initializer_opt   (rule 434)

    ':' 	shift, and go to state 760

    $default	reduce using rule 435 (constructor_initializer_opt)

    constructor_initializer_opt	go to state 761
    constructor_initializer	go to state 762



state 711

    constant_declarator  ->  IDENTIFIER '=' . constant_expression   (rule 211)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 611
    constant_expression	go to state 763
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 712

    constant_declarators  ->  constant_declarators COMMA . constant_declarator   (rule 210)

    IDENTIFIER	shift, and go to state 630

    constant_declarator	go to state 764



state 713

    constant_declaration  ->  attributes_opt modifiers_opt CONST type constant_declarators ';' .   (rule 363)

    $default	reduce using rule 363 (constant_declaration)



state 714

    event_declaration  ->  attributes_opt modifiers_opt EVENT type variable_declarators ';' .   (rule 394)

    $default	reduce using rule 394 (event_declaration)



state 715

    event_declaration  ->  attributes_opt modifiers_opt EVENT type qualified_identifier ENTER_accessor_decl . '{' event_accessor_declarations '}' EXIT_accessor_decl   (rule 395)

    '{' 	shift, and go to state 765



state 716

    conversion_operator_declarator  ->  EXPLICIT OPERATOR type '(' . type IDENTIFIER ')'   (rule 432)

    IDENTIFIER	shift, and go to state 52
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 288

    type_name	go to state 94
    type	go to state 766
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10



state 717

    conversion_operator_declarator  ->  IMPLICIT OPERATOR type '(' . type IDENTIFIER ')'   (rule 431)

    IDENTIFIER	shift, and go to state 52
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 288

    type_name	go to state 94
    type	go to state 767
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10



state 718

    method_header  ->  attributes_opt modifiers_opt VOID qualified_identifier '(' formal_parameter_list_opt . ')'   (rule 367)

    ')' 	shift, and go to state 768



state 719

    destructor_declaration  ->  attributes_opt modifiers_opt '~' IDENTIFIER '(' ')' . block   (rule 439)

    '{' 	shift, and go to state 359

    block	go to state 769



state 720

    variable_declarator  ->  IDENTIFIER '=' variable_initializer .   (rule 203)

    $default	reduce using rule 203 (variable_declarator)



state 721

    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator '(' . type IDENTIFIER ')'   (rule 407)
    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator '(' . type IDENTIFIER COMMA type IDENTIFIER ')'   (rule 408)

    IDENTIFIER	shift, and go to state 52
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 288

    type_name	go to state 94
    type	go to state 770
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10



state 722

    formal_parameter_list  ->  formal_parameter_list . COMMA formal_parameter   (rule 375)
    indexer_declarator  ->  type THIS LEFT_BRACKET formal_parameter_list . RIGHT_BRACKET   (rule 401)

    COMMA	shift, and go to state 368
    RIGHT_BRACKET	shift, and go to state 771



state 723

    variable_declarators  ->  variable_declarators COMMA variable_declarator .   (rule 201)

    $default	reduce using rule 201 (variable_declarators)



state 724

    method_header  ->  attributes_opt modifiers_opt type qualified_identifier '(' formal_parameter_list_opt . ')'   (rule 366)

    ')' 	shift, and go to state 772



state 725

    property_declaration  ->  attributes_opt modifiers_opt type qualified_identifier ENTER_getset '{' . accessor_declarations '}' EXIT_getset   (rule 383)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 727
    accessor_declarations	go to state 773
    get_accessor_declaration	go to state 729
    set_accessor_declaration	go to state 730
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 726

    formal_parameter_list  ->  formal_parameter_list . COMMA formal_parameter   (rule 375)
    indexer_declarator  ->  type qualified_this LEFT_BRACKET formal_parameter_list . RIGHT_BRACKET   (rule 402)

    COMMA	shift, and go to state 368
    RIGHT_BRACKET	shift, and go to state 774



state 727

    get_accessor_declaration  ->  attributes_opt . GET EXIT_getset accessor_body ENTER_getset   (rule 390)
    set_accessor_declaration  ->  attributes_opt . SET EXIT_getset accessor_body ENTER_getset   (rule 391)

    GET 	shift, and go to state 775
    SET 	shift, and go to state 776



state 728

    indexer_declaration  ->  attributes_opt modifiers_opt indexer_declarator ENTER_getset '{' accessor_declarations . '}' EXIT_getset   (rule 400)

    '}' 	shift, and go to state 777



state 729

    accessor_declarations  ->  get_accessor_declaration . set_accessor_declaration_opt   (rule 384)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    '}' 	reduce using rule 386 (set_accessor_declaration_opt)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 778
    set_accessor_declaration_opt	go to state 779
    set_accessor_declaration	go to state 780
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 730

    accessor_declarations  ->  set_accessor_declaration . get_accessor_declaration_opt   (rule 385)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    '}' 	reduce using rule 388 (get_accessor_declaration_opt)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 781
    get_accessor_declaration_opt	go to state 782
    get_accessor_declaration	go to state 783
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 731

    do_statement  ->  DO embedded_statement WHILE '(' . boolean_expression ')' ';'   (rule 241)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 684
    boolean_expression	go to state 784
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 732

    fixed_pointer_declarator  ->  IDENTIFIER . '=' expression   (rule 290)

    '=' 	shift, and go to state 785



state 733

    fixed_statement  ->  FIXED '(' type fixed_pointer_declarators . ')' embedded_statement   (rule 287)
    fixed_pointer_declarators  ->  fixed_pointer_declarators . COMMA fixed_pointer_declarator   (rule 289)

    COMMA	shift, and go to state 786
    ')' 	shift, and go to state 787



state 734

    fixed_pointer_declarators  ->  fixed_pointer_declarator .   (rule 288)

    $default	reduce using rule 288 (fixed_pointer_declarators)



state 735

    for_statement  ->  FOR '(' for_initializer_opt ';' . for_condition_opt ';' for_iterator_opt ')' embedded_statement   (rule 242)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    $default	reduce using rule 245 (for_condition_opt)

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 684
    boolean_expression	go to state 788
    for_condition_opt	go to state 789
    for_condition	go to state 790
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 736

    statement_expression_list  ->  statement_expression_list COMMA . statement_expression   (rule 254)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 474
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 475
    post_decrement_expression	go to state 476
    new_expression	go to state 202
    object_creation_expression	go to state 477
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 478
    pre_decrement_expression	go to state 479
    unary_expression	go to state 480
    cast_expression	go to state 216
    assignment	go to state 481
    statement_expression	go to state 791
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 737

    foreach_statement  ->  FOREACH '(' type IDENTIFIER . IN expression ')' embedded_statement   (rule 255)

    IN  	shift, and go to state 792



state 738

    goto_statement  ->  GOTO CASE constant_expression ';' .   (rule 264)

    $default	reduce using rule 264 (goto_statement)



state 739

    if_statement  ->  IF '(' boolean_expression ')' . embedded_statement   (rule 222)
    if_statement  ->  IF '(' boolean_expression ')' . embedded_statement ELSE embedded_statement   (rule 223)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 451
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 452
    CONTINUE	shift, and go to state 454
    DECIMAL	shift, and go to state 81
    DO  	shift, and go to state 455
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FIXED	shift, and go to state 456
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 457
    FOREACH	shift, and go to state 458
    GOTO	shift, and go to state 459
    IF  	shift, and go to state 460
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 461
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    RETURN	shift, and go to state 462
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    SWITCH	shift, and go to state 463
    THIS	shift, and go to state 173
    THROW	shift, and go to state 464
    TRUE	shift, and go to state 174
    TRY 	shift, and go to state 465
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 466
    UNSAFE	shift, and go to state 467
    USHORT	shift, and go to state 92
    USING	shift, and go to state 468
    WHILE	shift, and go to state 469
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185
    '{' 	shift, and go to state 359
    ';' 	shift, and go to state 470

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 474
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 475
    post_decrement_expression	go to state 476
    new_expression	go to state 202
    object_creation_expression	go to state 477
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 478
    pre_decrement_expression	go to state 479
    unary_expression	go to state 480
    cast_expression	go to state 216
    assignment	go to state 481
    embedded_statement	go to state 793
    block	go to state 484
    empty_statement	go to state 487
    expression_statement	go to state 492
    statement_expression	go to state 493
    selection_statement	go to state 494
    if_statement	go to state 495
    switch_statement	go to state 496
    iteration_statement	go to state 497
    unsafe_statement	go to state 498
    while_statement	go to state 499
    do_statement	go to state 500
    for_statement	go to state 501
    foreach_statement	go to state 502
    jump_statement	go to state 503
    break_statement	go to state 504
    continue_statement	go to state 505
    goto_statement	go to state 506
    return_statement	go to state 507
    throw_statement	go to state 508
    try_statement	go to state 509
    checked_statement	go to state 510
    unchecked_statement	go to state 511
    lock_statement	go to state 512
    using_statement	go to state 513
    fixed_statement	go to state 514
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 740

    lock_statement  ->  LOCK '(' expression ')' . embedded_statement   (rule 283)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 451
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 452
    CONTINUE	shift, and go to state 454
    DECIMAL	shift, and go to state 81
    DO  	shift, and go to state 455
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FIXED	shift, and go to state 456
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 457
    FOREACH	shift, and go to state 458
    GOTO	shift, and go to state 459
    IF  	shift, and go to state 460
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 461
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    RETURN	shift, and go to state 462
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    SWITCH	shift, and go to state 463
    THIS	shift, and go to state 173
    THROW	shift, and go to state 464
    TRUE	shift, and go to state 174
    TRY 	shift, and go to state 465
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 466
    UNSAFE	shift, and go to state 467
    USHORT	shift, and go to state 92
    USING	shift, and go to state 468
    WHILE	shift, and go to state 469
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185
    '{' 	shift, and go to state 359
    ';' 	shift, and go to state 470

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 474
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 475
    post_decrement_expression	go to state 476
    new_expression	go to state 202
    object_creation_expression	go to state 477
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 478
    pre_decrement_expression	go to state 479
    unary_expression	go to state 480
    cast_expression	go to state 216
    assignment	go to state 481
    embedded_statement	go to state 794
    block	go to state 484
    empty_statement	go to state 487
    expression_statement	go to state 492
    statement_expression	go to state 493
    selection_statement	go to state 494
    if_statement	go to state 495
    switch_statement	go to state 496
    iteration_statement	go to state 497
    unsafe_statement	go to state 498
    while_statement	go to state 499
    do_statement	go to state 500
    for_statement	go to state 501
    foreach_statement	go to state 502
    jump_statement	go to state 503
    break_statement	go to state 504
    continue_statement	go to state 505
    goto_statement	go to state 506
    return_statement	go to state 507
    throw_statement	go to state 508
    try_statement	go to state 509
    checked_statement	go to state 510
    unchecked_statement	go to state 511
    lock_statement	go to state 512
    using_statement	go to state 513
    fixed_statement	go to state 514
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 741

    switch_statement  ->  SWITCH '(' expression ')' . switch_block   (rule 224)

    '{' 	shift, and go to state 795

    switch_block	go to state 796



state 742

    catch_clause  ->  CATCH '(' . class_type identifier_opt ')' block   (rule 275)
    catch_clause  ->  CATCH '(' . type_name identifier_opt ')' block   (rule 276)

    IDENTIFIER	shift, and go to state 52
    OBJECT	shift, and go to state 86
    STRING	shift, and go to state 89

    type_name	go to state 797
    class_type	go to state 798
    qualified_identifier	go to state 111
    qualifier	go to state 10



state 743

    catch_clause  ->  CATCH block .   (rule 277)

    $default	reduce using rule 277 (catch_clause)



state 744

    finally_clause  ->  FINALLY block .   (rule 280)

    $default	reduce using rule 280 (finally_clause)



state 745

    catch_clauses  ->  catch_clauses catch_clause .   (rule 274)

    $default	reduce using rule 274 (catch_clauses)



state 746

    try_statement  ->  TRY block catch_clauses finally_clause .   (rule 272)

    $default	reduce using rule 272 (try_statement)



state 747

    using_statement  ->  USING '(' resource_acquisition ')' . embedded_statement   (rule 284)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 451
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 452
    CONTINUE	shift, and go to state 454
    DECIMAL	shift, and go to state 81
    DO  	shift, and go to state 455
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FIXED	shift, and go to state 456
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 457
    FOREACH	shift, and go to state 458
    GOTO	shift, and go to state 459
    IF  	shift, and go to state 460
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 461
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    RETURN	shift, and go to state 462
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    SWITCH	shift, and go to state 463
    THIS	shift, and go to state 173
    THROW	shift, and go to state 464
    TRUE	shift, and go to state 174
    TRY 	shift, and go to state 465
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 466
    UNSAFE	shift, and go to state 467
    USHORT	shift, and go to state 92
    USING	shift, and go to state 468
    WHILE	shift, and go to state 469
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185
    '{' 	shift, and go to state 359
    ';' 	shift, and go to state 470

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 474
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 475
    post_decrement_expression	go to state 476
    new_expression	go to state 202
    object_creation_expression	go to state 477
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 478
    pre_decrement_expression	go to state 479
    unary_expression	go to state 480
    cast_expression	go to state 216
    assignment	go to state 481
    embedded_statement	go to state 799
    block	go to state 484
    empty_statement	go to state 487
    expression_statement	go to state 492
    statement_expression	go to state 493
    selection_statement	go to state 494
    if_statement	go to state 495
    switch_statement	go to state 496
    iteration_statement	go to state 497
    unsafe_statement	go to state 498
    while_statement	go to state 499
    do_statement	go to state 500
    for_statement	go to state 501
    foreach_statement	go to state 502
    jump_statement	go to state 503
    break_statement	go to state 504
    continue_statement	go to state 505
    goto_statement	go to state 506
    return_statement	go to state 507
    throw_statement	go to state 508
    try_statement	go to state 509
    checked_statement	go to state 510
    unchecked_statement	go to state 511
    lock_statement	go to state 512
    using_statement	go to state 513
    fixed_statement	go to state 514
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 748

    while_statement  ->  WHILE '(' boolean_expression ')' . embedded_statement   (rule 240)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 451
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 452
    CONTINUE	shift, and go to state 454
    DECIMAL	shift, and go to state 81
    DO  	shift, and go to state 455
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FIXED	shift, and go to state 456
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 457
    FOREACH	shift, and go to state 458
    GOTO	shift, and go to state 459
    IF  	shift, and go to state 460
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 461
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    RETURN	shift, and go to state 462
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    SWITCH	shift, and go to state 463
    THIS	shift, and go to state 173
    THROW	shift, and go to state 464
    TRUE	shift, and go to state 174
    TRY 	shift, and go to state 465
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 466
    UNSAFE	shift, and go to state 467
    USHORT	shift, and go to state 92
    USING	shift, and go to state 468
    WHILE	shift, and go to state 469
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185
    '{' 	shift, and go to state 359
    ';' 	shift, and go to state 470

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 474
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 475
    post_decrement_expression	go to state 476
    new_expression	go to state 202
    object_creation_expression	go to state 477
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 478
    pre_decrement_expression	go to state 479
    unary_expression	go to state 480
    cast_expression	go to state 216
    assignment	go to state 481
    embedded_statement	go to state 800
    block	go to state 484
    empty_statement	go to state 487
    expression_statement	go to state 492
    statement_expression	go to state 493
    selection_statement	go to state 494
    if_statement	go to state 495
    switch_statement	go to state 496
    iteration_statement	go to state 497
    unsafe_statement	go to state 498
    while_statement	go to state 499
    do_statement	go to state 500
    for_statement	go to state 501
    foreach_statement	go to state 502
    jump_statement	go to state 503
    break_statement	go to state 504
    continue_statement	go to state 505
    goto_statement	go to state 506
    return_statement	go to state 507
    throw_statement	go to state 508
    try_statement	go to state 509
    checked_statement	go to state 510
    unchecked_statement	go to state 511
    lock_statement	go to state 512
    using_statement	go to state 513
    fixed_statement	go to state 514
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 749

    interface_empty_body  ->  '{' . '}'   (rule 493)

    '}' 	shift, and go to state 801



state 750

    interface_empty_body  ->  ';' .   (rule 492)

    $default	reduce using rule 492 (interface_empty_body)



state 751

    interface_event_declaration  ->  attributes_opt new_opt EVENT type IDENTIFIER interface_empty_body .   (rule 491)

    $default	reduce using rule 491 (interface_event_declaration)



state 752

    interface_method_declaration  ->  attributes_opt new_opt VOID IDENTIFIER '(' formal_parameter_list_opt . ')' interface_empty_body   (rule 482)

    ')' 	shift, and go to state 802



state 753

    interface_method_declaration  ->  attributes_opt new_opt type IDENTIFIER '(' formal_parameter_list_opt . ')' interface_empty_body   (rule 481)

    ')' 	shift, and go to state 803



state 754

    interface_property_declaration  ->  attributes_opt new_opt type IDENTIFIER ENTER_getset '{' . interface_accessors '}' EXIT_getset   (rule 485)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 804
    interface_accessors	go to state 805
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 755

    formal_parameter_list  ->  formal_parameter_list . COMMA formal_parameter   (rule 375)
    interface_indexer_declaration  ->  attributes_opt new_opt type THIS LEFT_BRACKET formal_parameter_list . RIGHT_BRACKET ENTER_getset '{' interface_accessors '}' EXIT_getset   (rule 486)

    COMMA	shift, and go to state 368
    RIGHT_BRACKET	shift, and go to state 806



state 756

    array_creation_expression  ->  NEW non_array_type LEFT_BRACKET expression_list RIGHT_BRACKET rank_specifiers_opt array_initializer_opt .   (rule 85)

    $default	reduce using rule 85 (array_creation_expression)



state 757

    array_initializer_opt  ->  array_initializer .   (rule 88)

    $default	reduce using rule 88 (array_initializer_opt)



state 758

    rank_specifiers_opt  ->  rank_specifier rank_specifiers_opt .   (rule 42)

    $default	reduce using rule 42 (rank_specifiers_opt)



state 759

    stackalloc_initializer  ->  STACKALLOC type LEFT_BRACKET expression . RIGHT_BRACKET   (rule 207)

    RIGHT_BRACKET	shift, and go to state 807



state 760

    constructor_initializer  ->  ':' . BASE '(' argument_list_opt ')'   (rule 437)
    constructor_initializer  ->  ':' . THIS '(' argument_list_opt ')'   (rule 438)

    BASE	shift, and go to state 808
    THIS	shift, and go to state 809



state 761

    constructor_declarator  ->  IDENTIFIER '(' formal_parameter_list_opt ')' constructor_initializer_opt .   (rule 434)

    $default	reduce using rule 434 (constructor_declarator)



state 762

    constructor_initializer_opt  ->  constructor_initializer .   (rule 436)

    $default	reduce using rule 436 (constructor_initializer_opt)



state 763

    constant_declarator  ->  IDENTIFIER '=' constant_expression .   (rule 211)

    $default	reduce using rule 211 (constant_declarator)



state 764

    constant_declarators  ->  constant_declarators COMMA constant_declarator .   (rule 210)

    $default	reduce using rule 210 (constant_declarators)



state 765

    event_declaration  ->  attributes_opt modifiers_opt EVENT type qualified_identifier ENTER_accessor_decl '{' . event_accessor_declarations '}' EXIT_accessor_decl   (rule 395)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 810
    event_accessor_declarations	go to state 811
    add_accessor_declaration	go to state 812
    remove_accessor_declaration	go to state 813
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 766

    pointer_type  ->  type . '*'   (rule 36)
    conversion_operator_declarator  ->  EXPLICIT OPERATOR type '(' type . IDENTIFIER ')'   (rule 432)

    IDENTIFIER	shift, and go to state 814
    '*' 	shift, and go to state 123



state 767

    pointer_type  ->  type . '*'   (rule 36)
    conversion_operator_declarator  ->  IMPLICIT OPERATOR type '(' type . IDENTIFIER ')'   (rule 431)

    IDENTIFIER	shift, and go to state 815
    '*' 	shift, and go to state 123



state 768

    method_header  ->  attributes_opt modifiers_opt VOID qualified_identifier '(' formal_parameter_list_opt ')' .   (rule 367)

    $default	reduce using rule 367 (method_header)



state 769

    destructor_declaration  ->  attributes_opt modifiers_opt '~' IDENTIFIER '(' ')' block .   (rule 439)

    $default	reduce using rule 439 (destructor_declaration)



state 770

    pointer_type  ->  type . '*'   (rule 36)
    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator '(' type . IDENTIFIER ')'   (rule 407)
    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator '(' type . IDENTIFIER COMMA type IDENTIFIER ')'   (rule 408)

    IDENTIFIER	shift, and go to state 816
    '*' 	shift, and go to state 123



state 771

    indexer_declarator  ->  type THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET .   (rule 401)

    $default	reduce using rule 401 (indexer_declarator)



state 772

    method_header  ->  attributes_opt modifiers_opt type qualified_identifier '(' formal_parameter_list_opt ')' .   (rule 366)

    $default	reduce using rule 366 (method_header)



state 773

    property_declaration  ->  attributes_opt modifiers_opt type qualified_identifier ENTER_getset '{' accessor_declarations . '}' EXIT_getset   (rule 383)

    '}' 	shift, and go to state 817



state 774

    indexer_declarator  ->  type qualified_this LEFT_BRACKET formal_parameter_list RIGHT_BRACKET .   (rule 402)

    $default	reduce using rule 402 (indexer_declarator)



state 775

    get_accessor_declaration  ->  attributes_opt GET . EXIT_getset accessor_body ENTER_getset   (rule 390)

    $default	reduce using rule 536 (EXIT_getset)

    EXIT_getset	go to state 818



state 776

    set_accessor_declaration  ->  attributes_opt SET . EXIT_getset accessor_body ENTER_getset   (rule 391)

    $default	reduce using rule 536 (EXIT_getset)

    EXIT_getset	go to state 819



state 777

    indexer_declaration  ->  attributes_opt modifiers_opt indexer_declarator ENTER_getset '{' accessor_declarations '}' . EXIT_getset   (rule 400)

    $default	reduce using rule 536 (EXIT_getset)

    EXIT_getset	go to state 820



state 778

    set_accessor_declaration  ->  attributes_opt . SET EXIT_getset accessor_body ENTER_getset   (rule 391)

    SET 	shift, and go to state 776



state 779

    accessor_declarations  ->  get_accessor_declaration set_accessor_declaration_opt .   (rule 384)

    $default	reduce using rule 384 (accessor_declarations)



state 780

    set_accessor_declaration_opt  ->  set_accessor_declaration .   (rule 387)

    $default	reduce using rule 387 (set_accessor_declaration_opt)



state 781

    get_accessor_declaration  ->  attributes_opt . GET EXIT_getset accessor_body ENTER_getset   (rule 390)

    GET 	shift, and go to state 775



state 782

    accessor_declarations  ->  set_accessor_declaration get_accessor_declaration_opt .   (rule 385)

    $default	reduce using rule 385 (accessor_declarations)



state 783

    get_accessor_declaration_opt  ->  get_accessor_declaration .   (rule 389)

    $default	reduce using rule 389 (get_accessor_declaration_opt)



state 784

    do_statement  ->  DO embedded_statement WHILE '(' boolean_expression . ')' ';'   (rule 241)

    ')' 	shift, and go to state 821



state 785

    fixed_pointer_declarator  ->  IDENTIFIER '=' . expression   (rule 290)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 822
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 786

    fixed_pointer_declarators  ->  fixed_pointer_declarators COMMA . fixed_pointer_declarator   (rule 289)

    IDENTIFIER	shift, and go to state 732

    fixed_pointer_declarator	go to state 823



state 787

    fixed_statement  ->  FIXED '(' type fixed_pointer_declarators ')' . embedded_statement   (rule 287)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 451
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 452
    CONTINUE	shift, and go to state 454
    DECIMAL	shift, and go to state 81
    DO  	shift, and go to state 455
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FIXED	shift, and go to state 456
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 457
    FOREACH	shift, and go to state 458
    GOTO	shift, and go to state 459
    IF  	shift, and go to state 460
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 461
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    RETURN	shift, and go to state 462
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    SWITCH	shift, and go to state 463
    THIS	shift, and go to state 173
    THROW	shift, and go to state 464
    TRUE	shift, and go to state 174
    TRY 	shift, and go to state 465
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 466
    UNSAFE	shift, and go to state 467
    USHORT	shift, and go to state 92
    USING	shift, and go to state 468
    WHILE	shift, and go to state 469
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185
    '{' 	shift, and go to state 359
    ';' 	shift, and go to state 470

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 474
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 475
    post_decrement_expression	go to state 476
    new_expression	go to state 202
    object_creation_expression	go to state 477
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 478
    pre_decrement_expression	go to state 479
    unary_expression	go to state 480
    cast_expression	go to state 216
    assignment	go to state 481
    embedded_statement	go to state 824
    block	go to state 484
    empty_statement	go to state 487
    expression_statement	go to state 492
    statement_expression	go to state 493
    selection_statement	go to state 494
    if_statement	go to state 495
    switch_statement	go to state 496
    iteration_statement	go to state 497
    unsafe_statement	go to state 498
    while_statement	go to state 499
    do_statement	go to state 500
    for_statement	go to state 501
    foreach_statement	go to state 502
    jump_statement	go to state 503
    break_statement	go to state 504
    continue_statement	go to state 505
    goto_statement	go to state 506
    return_statement	go to state 507
    throw_statement	go to state 508
    try_statement	go to state 509
    checked_statement	go to state 510
    unchecked_statement	go to state 511
    lock_statement	go to state 512
    using_statement	go to state 513
    fixed_statement	go to state 514
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 788

    for_condition  ->  boolean_expression .   (rule 251)

    $default	reduce using rule 251 (for_condition)



state 789

    for_statement  ->  FOR '(' for_initializer_opt ';' for_condition_opt . ';' for_iterator_opt ')' embedded_statement   (rule 242)

    ';' 	shift, and go to state 825



state 790

    for_condition_opt  ->  for_condition .   (rule 246)

    $default	reduce using rule 246 (for_condition_opt)



state 791

    statement_expression_list  ->  statement_expression_list COMMA statement_expression .   (rule 254)

    $default	reduce using rule 254 (statement_expression_list)



state 792

    foreach_statement  ->  FOREACH '(' type IDENTIFIER IN . expression ')' embedded_statement   (rule 255)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 826
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 793

    if_statement  ->  IF '(' boolean_expression ')' embedded_statement .   (rule 222)
    if_statement  ->  IF '(' boolean_expression ')' embedded_statement . ELSE embedded_statement   (rule 223)

    ELSE	shift, and go to state 827

    ELSE	[reduce using rule 222 (if_statement)]
    $default	reduce using rule 222 (if_statement)



state 794

    lock_statement  ->  LOCK '(' expression ')' embedded_statement .   (rule 283)

    $default	reduce using rule 283 (lock_statement)



state 795

    switch_block  ->  '{' . switch_sections_opt '}'   (rule 225)

    CASE	shift, and go to state 828
    DEFAULT	shift, and go to state 829

    $default	reduce using rule 226 (switch_sections_opt)

    switch_sections_opt	go to state 830
    switch_sections	go to state 831
    switch_section	go to state 832
    switch_labels	go to state 833
    switch_label	go to state 834



state 796

    switch_statement  ->  SWITCH '(' expression ')' switch_block .   (rule 224)

    $default	reduce using rule 224 (switch_statement)



state 797

    catch_clause  ->  CATCH '(' type_name . identifier_opt ')' block   (rule 276)

    IDENTIFIER	shift, and go to state 835

    $default	reduce using rule 278 (identifier_opt)

    identifier_opt	go to state 836



state 798

    catch_clause  ->  CATCH '(' class_type . identifier_opt ')' block   (rule 275)

    IDENTIFIER	shift, and go to state 835

    $default	reduce using rule 278 (identifier_opt)

    identifier_opt	go to state 837



state 799

    using_statement  ->  USING '(' resource_acquisition ')' embedded_statement .   (rule 284)

    $default	reduce using rule 284 (using_statement)



state 800

    while_statement  ->  WHILE '(' boolean_expression ')' embedded_statement .   (rule 240)

    $default	reduce using rule 240 (while_statement)



state 801

    interface_empty_body  ->  '{' '}' .   (rule 493)

    $default	reduce using rule 493 (interface_empty_body)



state 802

    interface_method_declaration  ->  attributes_opt new_opt VOID IDENTIFIER '(' formal_parameter_list_opt ')' . interface_empty_body   (rule 482)

    '{' 	shift, and go to state 749
    ';' 	shift, and go to state 750

    interface_empty_body	go to state 838



state 803

    interface_method_declaration  ->  attributes_opt new_opt type IDENTIFIER '(' formal_parameter_list_opt ')' . interface_empty_body   (rule 481)

    '{' 	shift, and go to state 749
    ';' 	shift, and go to state 750

    interface_empty_body	go to state 839



state 804

    interface_accessors  ->  attributes_opt . GET interface_empty_body   (rule 487)
    interface_accessors  ->  attributes_opt . SET interface_empty_body   (rule 488)
    interface_accessors  ->  attributes_opt . GET interface_empty_body attributes_opt SET interface_empty_body   (rule 489)
    interface_accessors  ->  attributes_opt . SET interface_empty_body attributes_opt GET interface_empty_body   (rule 490)

    GET 	shift, and go to state 840
    SET 	shift, and go to state 841



state 805

    interface_property_declaration  ->  attributes_opt new_opt type IDENTIFIER ENTER_getset '{' interface_accessors . '}' EXIT_getset   (rule 485)

    '}' 	shift, and go to state 842



state 806

    interface_indexer_declaration  ->  attributes_opt new_opt type THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET . ENTER_getset '{' interface_accessors '}' EXIT_getset   (rule 486)

    $default	reduce using rule 535 (ENTER_getset)

    ENTER_getset	go to state 843



state 807

    stackalloc_initializer  ->  STACKALLOC type LEFT_BRACKET expression RIGHT_BRACKET .   (rule 207)

    $default	reduce using rule 207 (stackalloc_initializer)



state 808

    constructor_initializer  ->  ':' BASE . '(' argument_list_opt ')'   (rule 437)

    '(' 	shift, and go to state 844



state 809

    constructor_initializer  ->  ':' THIS . '(' argument_list_opt ')'   (rule 438)

    '(' 	shift, and go to state 845



state 810

    add_accessor_declaration  ->  attributes_opt . ADD EXIT_accessor_decl block ENTER_accessor_decl   (rule 398)
    remove_accessor_declaration  ->  attributes_opt . REMOVE EXIT_accessor_decl block ENTER_accessor_decl   (rule 399)

    ADD 	shift, and go to state 846
    REMOVE	shift, and go to state 847



state 811

    event_declaration  ->  attributes_opt modifiers_opt EVENT type qualified_identifier ENTER_accessor_decl '{' event_accessor_declarations . '}' EXIT_accessor_decl   (rule 395)

    '}' 	shift, and go to state 848



state 812

    event_accessor_declarations  ->  add_accessor_declaration . remove_accessor_declaration   (rule 396)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 849
    remove_accessor_declaration	go to state 850
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 813

    event_accessor_declarations  ->  remove_accessor_declaration . add_accessor_declaration   (rule 397)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 851
    add_accessor_declaration	go to state 852
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 814

    conversion_operator_declarator  ->  EXPLICIT OPERATOR type '(' type IDENTIFIER . ')'   (rule 432)

    ')' 	shift, and go to state 853



state 815

    conversion_operator_declarator  ->  IMPLICIT OPERATOR type '(' type IDENTIFIER . ')'   (rule 431)

    ')' 	shift, and go to state 854



state 816

    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator '(' type IDENTIFIER . ')'   (rule 407)
    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator '(' type IDENTIFIER . COMMA type IDENTIFIER ')'   (rule 408)

    COMMA	shift, and go to state 855
    ')' 	shift, and go to state 856



state 817

    property_declaration  ->  attributes_opt modifiers_opt type qualified_identifier ENTER_getset '{' accessor_declarations '}' . EXIT_getset   (rule 383)

    $default	reduce using rule 536 (EXIT_getset)

    EXIT_getset	go to state 857



state 818

    get_accessor_declaration  ->  attributes_opt GET EXIT_getset . accessor_body ENTER_getset   (rule 390)

    '{' 	shift, and go to state 359
    ';' 	shift, and go to state 858

    block	go to state 859
    accessor_body	go to state 860



state 819

    set_accessor_declaration  ->  attributes_opt SET EXIT_getset . accessor_body ENTER_getset   (rule 391)

    '{' 	shift, and go to state 359
    ';' 	shift, and go to state 858

    block	go to state 859
    accessor_body	go to state 861



state 820

    indexer_declaration  ->  attributes_opt modifiers_opt indexer_declarator ENTER_getset '{' accessor_declarations '}' EXIT_getset .   (rule 400)

    $default	reduce using rule 400 (indexer_declaration)



state 821

    do_statement  ->  DO embedded_statement WHILE '(' boolean_expression ')' . ';'   (rule 241)

    ';' 	shift, and go to state 862



state 822

    fixed_pointer_declarator  ->  IDENTIFIER '=' expression .   (rule 290)

    $default	reduce using rule 290 (fixed_pointer_declarator)



state 823

    fixed_pointer_declarators  ->  fixed_pointer_declarators COMMA fixed_pointer_declarator .   (rule 289)

    $default	reduce using rule 289 (fixed_pointer_declarators)



state 824

    fixed_statement  ->  FIXED '(' type fixed_pointer_declarators ')' embedded_statement .   (rule 287)

    $default	reduce using rule 287 (fixed_statement)



state 825

    for_statement  ->  FOR '(' for_initializer_opt ';' for_condition_opt ';' . for_iterator_opt ')' embedded_statement   (rule 242)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    $default	reduce using rule 247 (for_iterator_opt)

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 474
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 475
    post_decrement_expression	go to state 476
    new_expression	go to state 202
    object_creation_expression	go to state 477
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 478
    pre_decrement_expression	go to state 479
    unary_expression	go to state 480
    cast_expression	go to state 216
    assignment	go to state 481
    statement_expression	go to state 676
    for_iterator_opt	go to state 863
    for_iterator	go to state 864
    statement_expression_list	go to state 865
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 826

    foreach_statement  ->  FOREACH '(' type IDENTIFIER IN expression . ')' embedded_statement   (rule 255)

    ')' 	shift, and go to state 866



state 827

    if_statement  ->  IF '(' boolean_expression ')' embedded_statement ELSE . embedded_statement   (rule 223)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 451
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 452
    CONTINUE	shift, and go to state 454
    DECIMAL	shift, and go to state 81
    DO  	shift, and go to state 455
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FIXED	shift, and go to state 456
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 457
    FOREACH	shift, and go to state 458
    GOTO	shift, and go to state 459
    IF  	shift, and go to state 460
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 461
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    RETURN	shift, and go to state 462
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    SWITCH	shift, and go to state 463
    THIS	shift, and go to state 173
    THROW	shift, and go to state 464
    TRUE	shift, and go to state 174
    TRY 	shift, and go to state 465
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 466
    UNSAFE	shift, and go to state 467
    USHORT	shift, and go to state 92
    USING	shift, and go to state 468
    WHILE	shift, and go to state 469
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185
    '{' 	shift, and go to state 359
    ';' 	shift, and go to state 470

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 474
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 475
    post_decrement_expression	go to state 476
    new_expression	go to state 202
    object_creation_expression	go to state 477
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 478
    pre_decrement_expression	go to state 479
    unary_expression	go to state 480
    cast_expression	go to state 216
    assignment	go to state 481
    embedded_statement	go to state 867
    block	go to state 484
    empty_statement	go to state 487
    expression_statement	go to state 492
    statement_expression	go to state 493
    selection_statement	go to state 494
    if_statement	go to state 495
    switch_statement	go to state 496
    iteration_statement	go to state 497
    unsafe_statement	go to state 498
    while_statement	go to state 499
    do_statement	go to state 500
    for_statement	go to state 501
    foreach_statement	go to state 502
    jump_statement	go to state 503
    break_statement	go to state 504
    continue_statement	go to state 505
    goto_statement	go to state 506
    return_statement	go to state 507
    throw_statement	go to state 508
    try_statement	go to state 509
    checked_statement	go to state 510
    unchecked_statement	go to state 511
    lock_statement	go to state 512
    using_statement	go to state 513
    fixed_statement	go to state 514
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 828

    switch_label  ->  CASE . constant_expression ':'   (rule 233)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 611
    constant_expression	go to state 868
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 829

    switch_label  ->  DEFAULT . ':'   (rule 234)

    ':' 	shift, and go to state 869



state 830

    switch_block  ->  '{' switch_sections_opt . '}'   (rule 225)

    '}' 	shift, and go to state 870



state 831

    switch_sections_opt  ->  switch_sections .   (rule 227)
    switch_sections  ->  switch_sections . switch_section   (rule 229)

    CASE	shift, and go to state 828
    DEFAULT	shift, and go to state 829

    $default	reduce using rule 227 (switch_sections_opt)

    switch_section	go to state 871
    switch_labels	go to state 833
    switch_label	go to state 834



state 832

    switch_sections  ->  switch_section .   (rule 228)

    $default	reduce using rule 228 (switch_sections)



state 833

    switch_section  ->  switch_labels . statement_list   (rule 230)
    switch_labels  ->  switch_labels . switch_label   (rule 232)

    IDENTIFIER	shift, and go to state 450
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 451
    BYTE	shift, and go to state 79
    CASE	shift, and go to state 828
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 452
    CONST	shift, and go to state 453
    CONTINUE	shift, and go to state 454
    DECIMAL	shift, and go to state 81
    DEFAULT	shift, and go to state 829
    DO  	shift, and go to state 455
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FIXED	shift, and go to state 456
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 457
    FOREACH	shift, and go to state 458
    GOTO	shift, and go to state 459
    IF  	shift, and go to state 460
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 461
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    RETURN	shift, and go to state 462
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    SWITCH	shift, and go to state 463
    THIS	shift, and go to state 173
    THROW	shift, and go to state 464
    TRUE	shift, and go to state 174
    TRY 	shift, and go to state 465
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 466
    UNSAFE	shift, and go to state 467
    USHORT	shift, and go to state 92
    USING	shift, and go to state 468
    VOID	shift, and go to state 288
    WHILE	shift, and go to state 469
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185
    '{' 	shift, and go to state 359
    ';' 	shift, and go to state 470

    literal	go to state 186
    boolean_literal	go to state 187
    type_name	go to state 94
    type	go to state 471
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 472
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 473
    pointer_type	go to state 103
    array_type	go to state 104
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 474
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 475
    post_decrement_expression	go to state 476
    new_expression	go to state 202
    object_creation_expression	go to state 477
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 478
    pre_decrement_expression	go to state 479
    unary_expression	go to state 480
    cast_expression	go to state 216
    assignment	go to state 481
    statement	go to state 482
    embedded_statement	go to state 483
    block	go to state 484
    statement_list	go to state 872
    empty_statement	go to state 487
    labeled_statement	go to state 488
    declaration_statement	go to state 489
    local_variable_declaration	go to state 490
    local_constant_declaration	go to state 491
    expression_statement	go to state 492
    statement_expression	go to state 493
    selection_statement	go to state 494
    if_statement	go to state 495
    switch_statement	go to state 496
    switch_label	go to state 873
    iteration_statement	go to state 497
    unsafe_statement	go to state 498
    while_statement	go to state 499
    do_statement	go to state 500
    for_statement	go to state 501
    foreach_statement	go to state 502
    jump_statement	go to state 503
    break_statement	go to state 504
    continue_statement	go to state 505
    goto_statement	go to state 506
    return_statement	go to state 507
    throw_statement	go to state 508
    try_statement	go to state 509
    checked_statement	go to state 510
    unchecked_statement	go to state 511
    lock_statement	go to state 512
    using_statement	go to state 513
    fixed_statement	go to state 514
    qualified_identifier	go to state 515
    qualifier	go to state 10



state 834

    switch_labels  ->  switch_label .   (rule 231)

    $default	reduce using rule 231 (switch_labels)



state 835

    identifier_opt  ->  IDENTIFIER .   (rule 279)

    $default	reduce using rule 279 (identifier_opt)



state 836

    catch_clause  ->  CATCH '(' type_name identifier_opt . ')' block   (rule 276)

    ')' 	shift, and go to state 874



state 837

    catch_clause  ->  CATCH '(' class_type identifier_opt . ')' block   (rule 275)

    ')' 	shift, and go to state 875



state 838

    interface_method_declaration  ->  attributes_opt new_opt VOID IDENTIFIER '(' formal_parameter_list_opt ')' interface_empty_body .   (rule 482)

    $default	reduce using rule 482 (interface_method_declaration)



state 839

    interface_method_declaration  ->  attributes_opt new_opt type IDENTIFIER '(' formal_parameter_list_opt ')' interface_empty_body .   (rule 481)

    $default	reduce using rule 481 (interface_method_declaration)



state 840

    interface_accessors  ->  attributes_opt GET . interface_empty_body   (rule 487)
    interface_accessors  ->  attributes_opt GET . interface_empty_body attributes_opt SET interface_empty_body   (rule 489)

    '{' 	shift, and go to state 749
    ';' 	shift, and go to state 750

    interface_empty_body	go to state 876



state 841

    interface_accessors  ->  attributes_opt SET . interface_empty_body   (rule 488)
    interface_accessors  ->  attributes_opt SET . interface_empty_body attributes_opt GET interface_empty_body   (rule 490)

    '{' 	shift, and go to state 749
    ';' 	shift, and go to state 750

    interface_empty_body	go to state 877



state 842

    interface_property_declaration  ->  attributes_opt new_opt type IDENTIFIER ENTER_getset '{' interface_accessors '}' . EXIT_getset   (rule 485)

    $default	reduce using rule 536 (EXIT_getset)

    EXIT_getset	go to state 878



state 843

    interface_indexer_declaration  ->  attributes_opt new_opt type THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET ENTER_getset . '{' interface_accessors '}' EXIT_getset   (rule 486)

    '{' 	shift, and go to state 879



state 844

    constructor_initializer  ->  ':' BASE '(' . argument_list_opt ')'   (rule 437)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    OUT 	shift, and go to state 404
    REF 	shift, and go to state 405
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    $default	reduce using rule 70 (argument_list_opt)

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    argument_list	go to state 406
    argument	go to state 407
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    argument_list_opt	go to state 880
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 409
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 845

    constructor_initializer  ->  ':' THIS '(' . argument_list_opt ')'   (rule 438)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 168
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    OUT 	shift, and go to state 404
    REF 	shift, and go to state 405
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    THIS	shift, and go to state 173
    TRUE	shift, and go to state 174
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 176
    USHORT	shift, and go to state 92
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185

    $default	reduce using rule 70 (argument_list_opt)

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    argument_list	go to state 406
    argument	go to state 407
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 194
    argument_list_opt	go to state 881
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 200
    post_decrement_expression	go to state 201
    new_expression	go to state 202
    object_creation_expression	go to state 203
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 213
    pre_decrement_expression	go to state 214
    unary_expression	go to state 215
    cast_expression	go to state 216
    multiplicative_expression	go to state 217
    additive_expression	go to state 218
    shift_expression	go to state 219
    relational_expression	go to state 220
    equality_expression	go to state 221
    and_expression	go to state 222
    exclusive_or_expression	go to state 223
    inclusive_or_expression	go to state 224
    conditional_and_expression	go to state 225
    conditional_or_expression	go to state 226
    conditional_expression	go to state 227
    assignment	go to state 228
    expression	go to state 409
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 846

    add_accessor_declaration  ->  attributes_opt ADD . EXIT_accessor_decl block ENTER_accessor_decl   (rule 398)

    $default	reduce using rule 534 (EXIT_accessor_decl)

    EXIT_accessor_decl	go to state 882



state 847

    remove_accessor_declaration  ->  attributes_opt REMOVE . EXIT_accessor_decl block ENTER_accessor_decl   (rule 399)

    $default	reduce using rule 534 (EXIT_accessor_decl)

    EXIT_accessor_decl	go to state 883



state 848

    event_declaration  ->  attributes_opt modifiers_opt EVENT type qualified_identifier ENTER_accessor_decl '{' event_accessor_declarations '}' . EXIT_accessor_decl   (rule 395)

    $default	reduce using rule 534 (EXIT_accessor_decl)

    EXIT_accessor_decl	go to state 884



state 849

    remove_accessor_declaration  ->  attributes_opt . REMOVE EXIT_accessor_decl block ENTER_accessor_decl   (rule 399)

    REMOVE	shift, and go to state 847



state 850

    event_accessor_declarations  ->  add_accessor_declaration remove_accessor_declaration .   (rule 396)

    $default	reduce using rule 396 (event_accessor_declarations)



state 851

    add_accessor_declaration  ->  attributes_opt . ADD EXIT_accessor_decl block ENTER_accessor_decl   (rule 398)

    ADD 	shift, and go to state 846



state 852

    event_accessor_declarations  ->  remove_accessor_declaration add_accessor_declaration .   (rule 397)

    $default	reduce using rule 397 (event_accessor_declarations)



state 853

    conversion_operator_declarator  ->  EXPLICIT OPERATOR type '(' type IDENTIFIER ')' .   (rule 432)

    $default	reduce using rule 432 (conversion_operator_declarator)



state 854

    conversion_operator_declarator  ->  IMPLICIT OPERATOR type '(' type IDENTIFIER ')' .   (rule 431)

    $default	reduce using rule 431 (conversion_operator_declarator)



state 855

    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator '(' type IDENTIFIER COMMA . type IDENTIFIER ')'   (rule 408)

    IDENTIFIER	shift, and go to state 52
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    OBJECT	shift, and go to state 86
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    STRING	shift, and go to state 89
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    USHORT	shift, and go to state 92
    VOID	shift, and go to state 288

    type_name	go to state 94
    type	go to state 885
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 98
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 102
    pointer_type	go to state 103
    array_type	go to state 104
    qualified_identifier	go to state 105
    qualifier	go to state 10



state 856

    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator '(' type IDENTIFIER ')' .   (rule 407)

    $default	reduce using rule 407 (overloadable_operator_declarator)



state 857

    property_declaration  ->  attributes_opt modifiers_opt type qualified_identifier ENTER_getset '{' accessor_declarations '}' EXIT_getset .   (rule 383)

    $default	reduce using rule 383 (property_declaration)



state 858

    accessor_body  ->  ';' .   (rule 393)

    $default	reduce using rule 393 (accessor_body)



state 859

    accessor_body  ->  block .   (rule 392)

    $default	reduce using rule 392 (accessor_body)



state 860

    get_accessor_declaration  ->  attributes_opt GET EXIT_getset accessor_body . ENTER_getset   (rule 390)

    $default	reduce using rule 535 (ENTER_getset)

    ENTER_getset	go to state 886



state 861

    set_accessor_declaration  ->  attributes_opt SET EXIT_getset accessor_body . ENTER_getset   (rule 391)

    $default	reduce using rule 535 (ENTER_getset)

    ENTER_getset	go to state 887



state 862

    do_statement  ->  DO embedded_statement WHILE '(' boolean_expression ')' ';' .   (rule 241)

    $default	reduce using rule 241 (do_statement)



state 863

    for_statement  ->  FOR '(' for_initializer_opt ';' for_condition_opt ';' for_iterator_opt . ')' embedded_statement   (rule 242)

    ')' 	shift, and go to state 888



state 864

    for_iterator_opt  ->  for_iterator .   (rule 248)

    $default	reduce using rule 248 (for_iterator_opt)



state 865

    for_iterator  ->  statement_expression_list .   (rule 252)
    statement_expression_list  ->  statement_expression_list . COMMA statement_expression   (rule 254)

    COMMA	shift, and go to state 736

    $default	reduce using rule 252 (for_iterator)



state 866

    foreach_statement  ->  FOREACH '(' type IDENTIFIER IN expression ')' . embedded_statement   (rule 255)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 451
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 452
    CONTINUE	shift, and go to state 454
    DECIMAL	shift, and go to state 81
    DO  	shift, and go to state 455
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FIXED	shift, and go to state 456
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 457
    FOREACH	shift, and go to state 458
    GOTO	shift, and go to state 459
    IF  	shift, and go to state 460
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 461
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    RETURN	shift, and go to state 462
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    SWITCH	shift, and go to state 463
    THIS	shift, and go to state 173
    THROW	shift, and go to state 464
    TRUE	shift, and go to state 174
    TRY 	shift, and go to state 465
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 466
    UNSAFE	shift, and go to state 467
    USHORT	shift, and go to state 92
    USING	shift, and go to state 468
    WHILE	shift, and go to state 469
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185
    '{' 	shift, and go to state 359
    ';' 	shift, and go to state 470

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 474
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 475
    post_decrement_expression	go to state 476
    new_expression	go to state 202
    object_creation_expression	go to state 477
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 478
    pre_decrement_expression	go to state 479
    unary_expression	go to state 480
    cast_expression	go to state 216
    assignment	go to state 481
    embedded_statement	go to state 889
    block	go to state 484
    empty_statement	go to state 487
    expression_statement	go to state 492
    statement_expression	go to state 493
    selection_statement	go to state 494
    if_statement	go to state 495
    switch_statement	go to state 496
    iteration_statement	go to state 497
    unsafe_statement	go to state 498
    while_statement	go to state 499
    do_statement	go to state 500
    for_statement	go to state 501
    foreach_statement	go to state 502
    jump_statement	go to state 503
    break_statement	go to state 504
    continue_statement	go to state 505
    goto_statement	go to state 506
    return_statement	go to state 507
    throw_statement	go to state 508
    try_statement	go to state 509
    checked_statement	go to state 510
    unchecked_statement	go to state 511
    lock_statement	go to state 512
    using_statement	go to state 513
    fixed_statement	go to state 514
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 867

    if_statement  ->  IF '(' boolean_expression ')' embedded_statement ELSE embedded_statement .   (rule 223)

    $default	reduce using rule 223 (if_statement)



state 868

    switch_label  ->  CASE constant_expression . ':'   (rule 233)

    ':' 	shift, and go to state 890



state 869

    switch_label  ->  DEFAULT ':' .   (rule 234)

    $default	reduce using rule 234 (switch_label)



state 870

    switch_block  ->  '{' switch_sections_opt '}' .   (rule 225)

    $default	reduce using rule 225 (switch_block)



state 871

    switch_sections  ->  switch_sections switch_section .   (rule 229)

    $default	reduce using rule 229 (switch_sections)



state 872

    statement_list  ->  statement_list . statement   (rule 194)
    switch_section  ->  switch_labels statement_list .   (rule 230)

    IDENTIFIER	shift, and go to state 450
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 451
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 452
    CONST	shift, and go to state 453
    CONTINUE	shift, and go to state 454
    DECIMAL	shift, and go to state 81
    DO  	shift, and go to state 455
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FIXED	shift, and go to state 456
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 457
    FOREACH	shift, and go to state 458
    GOTO	shift, and go to state 459
    IF  	shift, and go to state 460
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 461
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    RETURN	shift, and go to state 462
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    SWITCH	shift, and go to state 463
    THIS	shift, and go to state 173
    THROW	shift, and go to state 464
    TRUE	shift, and go to state 174
    TRY 	shift, and go to state 465
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 466
    UNSAFE	shift, and go to state 467
    USHORT	shift, and go to state 92
    USING	shift, and go to state 468
    VOID	shift, and go to state 288
    WHILE	shift, and go to state 469
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185
    '{' 	shift, and go to state 359
    ';' 	shift, and go to state 470

    $default	reduce using rule 230 (switch_section)

    literal	go to state 186
    boolean_literal	go to state 187
    type_name	go to state 94
    type	go to state 471
    non_array_type	go to state 96
    simple_type	go to state 97
    primitive_type	go to state 472
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 473
    pointer_type	go to state 103
    array_type	go to state 104
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 474
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 475
    post_decrement_expression	go to state 476
    new_expression	go to state 202
    object_creation_expression	go to state 477
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 478
    pre_decrement_expression	go to state 479
    unary_expression	go to state 480
    cast_expression	go to state 216
    assignment	go to state 481
    statement	go to state 605
    embedded_statement	go to state 483
    block	go to state 484
    empty_statement	go to state 487
    labeled_statement	go to state 488
    declaration_statement	go to state 489
    local_variable_declaration	go to state 490
    local_constant_declaration	go to state 491
    expression_statement	go to state 492
    statement_expression	go to state 493
    selection_statement	go to state 494
    if_statement	go to state 495
    switch_statement	go to state 496
    iteration_statement	go to state 497
    unsafe_statement	go to state 498
    while_statement	go to state 499
    do_statement	go to state 500
    for_statement	go to state 501
    foreach_statement	go to state 502
    jump_statement	go to state 503
    break_statement	go to state 504
    continue_statement	go to state 505
    goto_statement	go to state 506
    return_statement	go to state 507
    throw_statement	go to state 508
    try_statement	go to state 509
    checked_statement	go to state 510
    unchecked_statement	go to state 511
    lock_statement	go to state 512
    using_statement	go to state 513
    fixed_statement	go to state 514
    qualified_identifier	go to state 515
    qualifier	go to state 10



state 873

    switch_labels  ->  switch_labels switch_label .   (rule 232)

    $default	reduce using rule 232 (switch_labels)



state 874

    catch_clause  ->  CATCH '(' type_name identifier_opt ')' . block   (rule 276)

    '{' 	shift, and go to state 359

    block	go to state 891



state 875

    catch_clause  ->  CATCH '(' class_type identifier_opt ')' . block   (rule 275)

    '{' 	shift, and go to state 359

    block	go to state 892



state 876

    interface_accessors  ->  attributes_opt GET interface_empty_body .   (rule 487)
    interface_accessors  ->  attributes_opt GET interface_empty_body . attributes_opt SET interface_empty_body   (rule 489)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    '}' 	reduce using rule 487 (interface_accessors)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 893
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 877

    interface_accessors  ->  attributes_opt SET interface_empty_body .   (rule 488)
    interface_accessors  ->  attributes_opt SET interface_empty_body . attributes_opt GET interface_empty_body   (rule 490)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    '}' 	reduce using rule 488 (interface_accessors)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 894
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 878

    interface_property_declaration  ->  attributes_opt new_opt type IDENTIFIER ENTER_getset '{' interface_accessors '}' EXIT_getset .   (rule 485)

    $default	reduce using rule 485 (interface_property_declaration)



state 879

    interface_indexer_declaration  ->  attributes_opt new_opt type THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET ENTER_getset '{' . interface_accessors '}' EXIT_getset   (rule 486)

    LEFT_BRACKET	reduce using rule 531 (ENTER_attrib)
    $default	reduce using rule 295 (attributes_opt)

    attributes_opt	go to state 804
    interface_accessors	go to state 895
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 880

    constructor_initializer  ->  ':' BASE '(' argument_list_opt . ')'   (rule 437)

    ')' 	shift, and go to state 896



state 881

    constructor_initializer  ->  ':' THIS '(' argument_list_opt . ')'   (rule 438)

    ')' 	shift, and go to state 897



state 882

    add_accessor_declaration  ->  attributes_opt ADD EXIT_accessor_decl . block ENTER_accessor_decl   (rule 398)

    '{' 	shift, and go to state 359

    block	go to state 898



state 883

    remove_accessor_declaration  ->  attributes_opt REMOVE EXIT_accessor_decl . block ENTER_accessor_decl   (rule 399)

    '{' 	shift, and go to state 359

    block	go to state 899



state 884

    event_declaration  ->  attributes_opt modifiers_opt EVENT type qualified_identifier ENTER_accessor_decl '{' event_accessor_declarations '}' EXIT_accessor_decl .   (rule 395)

    $default	reduce using rule 395 (event_declaration)



state 885

    pointer_type  ->  type . '*'   (rule 36)
    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator '(' type IDENTIFIER COMMA type . IDENTIFIER ')'   (rule 408)

    IDENTIFIER	shift, and go to state 900
    '*' 	shift, and go to state 123



state 886

    get_accessor_declaration  ->  attributes_opt GET EXIT_getset accessor_body ENTER_getset .   (rule 390)

    $default	reduce using rule 390 (get_accessor_declaration)



state 887

    set_accessor_declaration  ->  attributes_opt SET EXIT_getset accessor_body ENTER_getset .   (rule 391)

    $default	reduce using rule 391 (set_accessor_declaration)



state 888

    for_statement  ->  FOR '(' for_initializer_opt ';' for_condition_opt ';' for_iterator_opt ')' . embedded_statement   (rule 242)

    IDENTIFIER	shift, and go to state 52
    INTEGER_LITERAL	shift, and go to state 163
    REAL_LITERAL	shift, and go to state 164
    CHARACTER_LITERAL	shift, and go to state 165
    STRING_LITERAL	shift, and go to state 166
    BASE	shift, and go to state 167
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 451
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 452
    CONTINUE	shift, and go to state 454
    DECIMAL	shift, and go to state 81
    DO  	shift, and go to state 455
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 169
    FIXED	shift, and go to state 456
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 457
    FOREACH	shift, and go to state 458
    GOTO	shift, and go to state 459
    IF  	shift, and go to state 460
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 461
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 170
    NULL_LITERAL	shift, and go to state 171
    OBJECT	shift, and go to state 86
    RETURN	shift, and go to state 462
    SBYTE	shift, and go to state 87
    SHORT	shift, and go to state 88
    SIZEOF	shift, and go to state 172
    STRING	shift, and go to state 89
    SWITCH	shift, and go to state 463
    THIS	shift, and go to state 173
    THROW	shift, and go to state 464
    TRUE	shift, and go to state 174
    TRY 	shift, and go to state 465
    TYPEOF	shift, and go to state 175
    UINT	shift, and go to state 90
    ULONG	shift, and go to state 91
    UNCHECKED	shift, and go to state 466
    UNSAFE	shift, and go to state 467
    USHORT	shift, and go to state 92
    USING	shift, and go to state 468
    WHILE	shift, and go to state 469
    PLUSPLUS	shift, and go to state 177
    MINUSMINUS	shift, and go to state 178
    '*' 	shift, and go to state 179
    '(' 	shift, and go to state 180
    '&' 	shift, and go to state 181
    '!' 	shift, and go to state 182
    '~' 	shift, and go to state 183
    '+' 	shift, and go to state 184
    '-' 	shift, and go to state 185
    '{' 	shift, and go to state 359
    ';' 	shift, and go to state 470

    literal	go to state 186
    boolean_literal	go to state 187
    primitive_type	go to state 188
    numeric_type	go to state 99
    integral_type	go to state 100
    floating_point_type	go to state 101
    class_type	go to state 189
    primary_expression	go to state 190
    primary_expression_no_parenthesis	go to state 191
    parenthesized_expression	go to state 192
    member_access	go to state 193
    invocation_expression	go to state 474
    element_access	go to state 195
    this_access	go to state 198
    base_access	go to state 199
    post_increment_expression	go to state 475
    post_decrement_expression	go to state 476
    new_expression	go to state 202
    object_creation_expression	go to state 477
    array_creation_expression	go to state 204
    typeof_expression	go to state 205
    checked_expression	go to state 206
    unchecked_expression	go to state 207
    pointer_member_access	go to state 208
    addressof_expression	go to state 209
    sizeof_expression	go to state 210
    postfix_expression	go to state 211
    unary_expression_not_plusminus	go to state 212
    pre_increment_expression	go to state 478
    pre_decrement_expression	go to state 479
    unary_expression	go to state 480
    cast_expression	go to state 216
    assignment	go to state 481
    embedded_statement	go to state 901
    block	go to state 484
    empty_statement	go to state 487
    expression_statement	go to state 492
    statement_expression	go to state 493
    selection_statement	go to state 494
    if_statement	go to state 495
    switch_statement	go to state 496
    iteration_statement	go to state 497
    unsafe_statement	go to state 498
    while_statement	go to state 499
    do_statement	go to state 500
    for_statement	go to state 501
    foreach_statement	go to state 502
    jump_statement	go to state 503
    break_statement	go to state 504
    continue_statement	go to state 505
    goto_statement	go to state 506
    return_statement	go to state 507
    throw_statement	go to state 508
    try_statement	go to state 509
    checked_statement	go to state 510
    unchecked_statement	go to state 511
    lock_statement	go to state 512
    using_statement	go to state 513
    fixed_statement	go to state 514
    qualified_identifier	go to state 230
    qualifier	go to state 10



state 889

    foreach_statement  ->  FOREACH '(' type IDENTIFIER IN expression ')' embedded_statement .   (rule 255)

    $default	reduce using rule 255 (foreach_statement)



state 890

    switch_label  ->  CASE constant_expression ':' .   (rule 233)

    $default	reduce using rule 233 (switch_label)



state 891

    catch_clause  ->  CATCH '(' type_name identifier_opt ')' block .   (rule 276)

    $default	reduce using rule 276 (catch_clause)



state 892

    catch_clause  ->  CATCH '(' class_type identifier_opt ')' block .   (rule 275)

    $default	reduce using rule 275 (catch_clause)



state 893

    interface_accessors  ->  attributes_opt GET interface_empty_body attributes_opt . SET interface_empty_body   (rule 489)

    SET 	shift, and go to state 902



state 894

    interface_accessors  ->  attributes_opt SET interface_empty_body attributes_opt . GET interface_empty_body   (rule 490)

    GET 	shift, and go to state 903



state 895

    interface_indexer_declaration  ->  attributes_opt new_opt type THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET ENTER_getset '{' interface_accessors . '}' EXIT_getset   (rule 486)

    '}' 	shift, and go to state 904



state 896

    constructor_initializer  ->  ':' BASE '(' argument_list_opt ')' .   (rule 437)

    $default	reduce using rule 437 (constructor_initializer)



state 897

    constructor_initializer  ->  ':' THIS '(' argument_list_opt ')' .   (rule 438)

    $default	reduce using rule 438 (constructor_initializer)



state 898

    add_accessor_declaration  ->  attributes_opt ADD EXIT_accessor_decl block . ENTER_accessor_decl   (rule 398)

    $default	reduce using rule 533 (ENTER_accessor_decl)

    ENTER_accessor_decl	go to state 905



state 899

    remove_accessor_declaration  ->  attributes_opt REMOVE EXIT_accessor_decl block . ENTER_accessor_decl   (rule 399)

    $default	reduce using rule 533 (ENTER_accessor_decl)

    ENTER_accessor_decl	go to state 906



state 900

    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator '(' type IDENTIFIER COMMA type IDENTIFIER . ')'   (rule 408)

    ')' 	shift, and go to state 907



state 901

    for_statement  ->  FOR '(' for_initializer_opt ';' for_condition_opt ';' for_iterator_opt ')' embedded_statement .   (rule 242)

    $default	reduce using rule 242 (for_statement)



state 902

    interface_accessors  ->  attributes_opt GET interface_empty_body attributes_opt SET . interface_empty_body   (rule 489)

    '{' 	shift, and go to state 749
    ';' 	shift, and go to state 750

    interface_empty_body	go to state 908



state 903

    interface_accessors  ->  attributes_opt SET interface_empty_body attributes_opt GET . interface_empty_body   (rule 490)

    '{' 	shift, and go to state 749
    ';' 	shift, and go to state 750

    interface_empty_body	go to state 909



state 904

    interface_indexer_declaration  ->  attributes_opt new_opt type THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET ENTER_getset '{' interface_accessors '}' . EXIT_getset   (rule 486)

    $default	reduce using rule 536 (EXIT_getset)

    EXIT_getset	go to state 910



state 905

    add_accessor_declaration  ->  attributes_opt ADD EXIT_accessor_decl block ENTER_accessor_decl .   (rule 398)

    $default	reduce using rule 398 (add_accessor_declaration)



state 906

    remove_accessor_declaration  ->  attributes_opt REMOVE EXIT_accessor_decl block ENTER_accessor_decl .   (rule 399)

    $default	reduce using rule 399 (remove_accessor_declaration)



state 907

    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator '(' type IDENTIFIER COMMA type IDENTIFIER ')' .   (rule 408)

    $default	reduce using rule 408 (overloadable_operator_declarator)



state 908

    interface_accessors  ->  attributes_opt GET interface_empty_body attributes_opt SET interface_empty_body .   (rule 489)

    $default	reduce using rule 489 (interface_accessors)



state 909

    interface_accessors  ->  attributes_opt SET interface_empty_body attributes_opt GET interface_empty_body .   (rule 490)

    $default	reduce using rule 490 (interface_accessors)



state 910

    interface_indexer_declaration  ->  attributes_opt new_opt type THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET ENTER_getset '{' interface_accessors '}' EXIT_getset .   (rule 486)

    $default	reduce using rule 486 (interface_indexer_declaration)



state 911

    $   	go to state 912



state 912

    $   	go to state 913



state 913

    $default	accept
