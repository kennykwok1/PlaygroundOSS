#line 2 "lexParser.inc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 51
#define YY_END_OF_BUFFER 52
static yyconst short int yy_acclist[203] =
    {   0,
       52,   50,   51,    2,   50,   51,    2,   51,   50,   51,
       50,   51,   50,   51,   50,   51,   50,   51,   50,   51,
       50,   51,   13,   50,   51,   50,   51,   50,   51,   50,
       51,    8,   50,   51,    8,   50,   51,   50,   51,   50,
       51,   12,   50,   51,   50,   51,   14,   50,   51,   15,
       50,   51,   50,   51,   48,   50,   51,   50,   51,    2,
       50,   51,    1,   50,   51,    4,   51,    5,   51,    4,
       51,   51,   48,   50,   51,   48,   50,   51,   48,   50,
       51,   48,   50,   51,   48,   50,   51,   48,   50,   51,
       48,   50,   51,   48,   50,   51,   48,   50,   51,   29,

       11,   21,   32,   23,   19,   34,   17,   35,   18,   36,
        9,    3,    7,   20,    8,    9,    8,    8,   25,   30,
       28,   31,   49,   16,   22,   48,   24,   33,    1,    1,
        6,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   10,    9,    7,    9,    8,    8,   27,   26,
       11,   49,   48,   48,   48,   48,   48,   48,   48,   44,
       48,   48,   46,   48,   47,   48,    9,    8,    8,   48,
       48,   48,   48,   48,   48,   43,   48,   48,    8,   48,
       38,   48,   48,   48,   41,   48,   48,   48,   48,   39,
       48,   40,   48,   48,   45,   48,   48,   48,   37,   48,

       42,   48
    } ;

static yyconst short int yy_accept[193] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    4,    7,    9,   11,   13,   15,
       17,   19,   21,   23,   26,   28,   30,   32,   35,   38,
       40,   42,   45,   47,   50,   53,   55,   58,   60,   63,
       66,   68,   70,   72,   73,   76,   79,   82,   85,   88,
       91,   94,   97,  100,  101,  101,  102,  102,  103,  104,
      105,  105,  105,  106,  107,  108,  109,  110,  111,  112,
      113,  114,  115,  115,  116,  117,  117,  118,  119,  119,
      120,  121,  122,  123,  123,  123,  124,  124,  124,  125,
      126,  127,  128,  129,  129,  130,  131,  132,  133,  134,

      135,  136,  137,  138,  139,  140,  141,  142,  143,  143,
      143,  144,  144,  144,  145,  145,  146,  146,  147,  148,
      149,  150,  151,  151,  152,  153,  153,  154,  155,  156,
      157,  158,  159,  160,  162,  163,  165,  167,  167,  167,
      167,  167,  167,  168,  169,  170,  171,  172,  173,  174,
      175,  176,  178,  179,  179,  179,  179,  179,  180,  181,
      183,  184,  185,  187,  188,  189,  189,  189,  189,  189,
      190,  192,  194,  195,  197,  197,  197,  197,  197,  198,
      199,  199,  199,  201,  203,  203,  203,  203,  203,  203,
      203,  203

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    8,    9,   10,    1,
        1,   11,   12,   13,   14,   15,   16,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,    1,    1,   19,
       20,   21,    1,   22,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   37,   38,   39,   40,   41,   42,
       37,   43,   44,   45,   46,   47,   37,   48,   49,   37,
       23,   24,   25,   26,   27,    1,   28,   29,   30,   31,

       32,   33,   34,   35,   36,   37,   37,   38,   39,   40,
       41,   42,   37,   43,   44,   45,   46,   47,   37,   48,
       49,   37,    1,   50,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[51] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    1,    4,
        1,    1,    1,    1,    1,    1,    5,    6,    1,    1,
        1,    7,    1,    8,    1,    1,    9,   10,   10,   11,
       11,   11,   10,    9,    9,    9,    9,    9,    9,   12,
        9,    9,   12,    9,   12,   12,   12,   12,    9,    1
    } ;

static yyconst short int yy_base[222] =
    {   0,
        0,   49,   49,   50,    0,    0,   26,   55,   27,   56,
       30,   70,  293,  583,  583,  583,  272,   61,  271,   60,
      258,  261,   61,  583,   72,   58,   71,  100,  232,   59,
      259,   69,  272,   99,  583,  257,    0,   46,  103,    0,
      583,  583,  260,  583,  231,  238,   66,   78,  216,  233,
      231,  230,  229,  583,   89,  583,   63,  583,  583,  583,
      250,   74,  583,  583,  583,  583,  583,  583,  110,  583,
        0,  583,  108,  211,  583,  133,  212,  219,    0,  228,
      583,  583,  583,  227,  240,    0,  150,  153,  583,  583,
        0,  583,  583,  127,    0,    0,  583,  201,  212,  198,

      211,  198,  199,  189,  199,  190,  183,  182,    0,    0,
      583,    0,    0,  583,  147,    0,  118,  150,  583,   70,
      583,  583,  220,  219,    0,  167,  192,  185,  179,  167,
      184,  168,  177,    0,  167,    0,    0,    0,  187,    0,
      197,  155,  167,  157,  164,  162,  168,  156,  158,  156,
      162,    0,  144,    0,  204,    0,  180,  583,  159,    0,
      156,  154,    0,  139,  147,    0,  221,    0,  167,  138,
        0,    0,  129,    0,  238,  113,  152,  150,   95,   81,
      255,    0,    0,    0,  272,    0,  289,    0,  134,  113,
      583,  322,  334,  346,  358,  368,  376,  388,  398,  408,

      420,  428,  439,  447,  455,  462,  469,  476,  483,  490,
      498,  505,  512,  520,  527,  534,  542,  550,  557,  564,
      571
    } ;

static yyconst short int yy_def[222] =
    {   0,
      191,    1,  192,  192,  193,  193,    1,    1,    1,    1,
        1,    1,  191,  191,  191,  191,  191,  194,  191,  191,
      195,  191,  191,  191,  191,  191,  191,  191,   28,  191,
      191,  191,  196,  191,  191,  191,  197,  191,  191,  198,
      191,  191,  191,  191,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  191,  194,  191,  199,  191,  191,  191,
      191,  200,  191,  191,  191,  191,  191,  191,  191,  191,
      201,  191,  191,   28,  191,  191,  191,  191,  202,  191,
      191,  191,  191,  191,  203,  204,  191,  191,  191,  191,
      197,  191,  191,  191,  198,  198,  191,  197,  197,  197,

      197,  197,  197,  197,  197,  197,  197,  197,  205,  206,
      191,  207,  208,  191,  191,  201,  191,  191,  191,  202,
      191,  191,  203,  191,  204,  191,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  209,  194,  210,
      211,  191,  191,  191,  191,  197,  197,  197,  197,  197,
      197,  197,  197,  212,  139,  213,  214,  191,  197,  197,
      197,  197,  197,  197,  197,  215,  139,  216,  217,  197,
      197,  197,  197,  197,  139,  194,  218,  191,  197,  197,
      139,  219,  197,  197,  139,  220,  139,  221,  194,  191,
        0,  191,  191,  191,  191,  191,  191,  191,  191,  191,

      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191
    } ;

static yyconst short int yy_nxt[634] =
    {   0,
       14,   15,   16,   15,   17,   18,   14,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   14,   35,   36,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   38,
       39,   42,   42,   45,   50,   40,   39,   39,   46,   43,
       43,   40,   40,   52,   47,   92,   56,   48,   59,   51,
       49,   39,   64,   53,   69,   69,   40,   80,   81,   60,
       65,   70,   45,   50,   57,   66,   71,   46,   83,   84,
       72,   67,   68,   47,   56,   93,   48,  100,   51,   49,

       87,   87,   87,   52,   94,  102,  101,  144,  109,   95,
      110,   88,   57,   53,   73,  145,   74,   74,   56,  112,
      103,  113,  111,   89,   69,   69,   69,   69,   94,  184,
       75,   76,   75,   95,  118,  118,   57,   77,   75,   56,
      114,  115,  114,  183,  117,   78,  117,   79,  114,  118,
      118,   87,   87,   87,  126,  126,  126,   57,  142,  111,
      142,  111,   88,  143,  143,   88,  118,  118,  126,  126,
      126,  143,  143,  180,   89,  179,  111,   89,  174,   88,
       75,  173,   75,  143,  143,  172,  171,  170,   75,  111,
      165,   89,   56,  164,  163,  162,  161,  114,  160,  114,

      159,  158,  158,  155,  155,  114,  111,  153,  152,  151,
       57,  150,  149,  148,  155,  155,  155,  155,  155,  155,
      167,  167,  147,  146,  123,  124,  137,  136,  135,  134,
      133,  167,  167,  167,  167,  167,  167,  176,  176,  132,
      131,  130,  129,  128,  127,  124,  122,  121,  176,  176,
      176,  176,  176,  176,  181,  181,  119,  119,  191,  111,
      108,  107,  106,  105,  104,  181,  181,  181,  181,  181,
      181,  185,  185,   99,   98,   97,   90,   85,   82,  191,
       63,   62,  185,  185,  185,  185,  185,  185,  187,  187,
       58,   54,  191,  191,  191,  191,  191,  191,  191,  187,

      187,  187,  187,  187,  187,  189,  189,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  189,  189,  189,  189,
      189,  189,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   61,   61,
       61,  191,   61,   61,   61,   61,   61,   61,   61,   61,
       86,  191,  191,  191,  191,  191,   86,   86,   86,   86,
       91,   91,   91,  191,   91,   91,   91,   91,   96,  191,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,

       55,   55,   55,  191,  191,   55,  191,   55,  191,   55,
       61,   61,   61,  191,  191,   61,  191,   61,  191,   61,
      116,  191,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  120,  120,  191,  191,  191,  120,  120,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  125,  125,  125,  191,  125,  125,  125,  125,  138,
      138,  191,  191,  191,  138,  138,  139,  139,  191,  191,
      191,  139,  139,  140,  140,  191,  191,  191,  140,  140,
      141,  141,  191,  191,  191,  141,  141,  154,  154,  191,
      191,  191,  154,  154,  156,  156,  191,  191,  191,  156,

      156,  157,  157,  157,  191,  191,  191,  157,  157,  166,
      166,  191,  191,  191,  166,  166,  168,  168,  191,  191,
      191,  168,  168,  169,  169,  169,  191,  191,  191,  169,
      169,  175,  175,  191,  191,  191,  175,  175,  177,  177,
      191,  191,  191,  177,  177,  178,  178,  178,  191,  191,
      191,  178,  178,  182,  182,  182,  191,  191,  191,  182,
      182,  186,  186,  191,  191,  191,  186,  186,  188,  188,
      191,  191,  191,  188,  188,  190,  190,  191,  191,  191,
      190,  190,   13,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,

      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191
    } ;

static yyconst short int yy_chk[634] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    3,    4,    7,    9,    2,    8,   10,    7,    3,
        4,    8,   10,   11,    7,   38,   18,    7,   20,    9,
        7,   12,   23,   11,   26,   26,   12,   30,   30,   20,
       23,   27,    8,   10,   18,   25,   27,    8,   32,   32,
       27,   25,   25,    8,   55,   38,    8,   47,   10,    8,

       34,   34,   34,   12,   39,   48,   47,  120,   57,   39,
       57,   34,   55,   12,   28,  120,   28,   28,  176,   62,
       48,   62,  190,   34,   73,   73,   69,   69,   94,  180,
       28,   28,   28,   94,  117,  117,  176,   28,   28,  189,
       69,   69,   69,  179,   76,   28,   76,   28,   69,   76,
       76,   87,   87,   87,   88,   88,   88,  189,  115,  178,
      115,  177,   87,  115,  115,   88,  118,  118,  126,  126,
      126,  142,  142,  173,   87,  170,  169,   88,  165,  126,
      118,  164,  118,  143,  143,  162,  161,  159,  118,  157,
      153,  126,  139,  151,  150,  149,  148,  143,  147,  143,

      146,  145,  144,  139,  139,  143,  141,  135,  133,  132,
      139,  131,  130,  129,  139,  139,  139,  139,  139,  139,
      155,  155,  128,  127,  124,  123,  108,  107,  106,  105,
      104,  155,  155,  155,  155,  155,  155,  167,  167,  103,
      102,  101,  100,   99,   98,   85,   84,   80,  167,  167,
      167,  167,  167,  167,  175,  175,   78,   77,   74,   61,
       53,   52,   51,   50,   49,  175,  175,  175,  175,  175,
      175,  181,  181,   46,   45,   43,   36,   33,   31,   29,
       22,   21,  181,  181,  181,  181,  181,  181,  185,  185,
       19,   17,   13,    0,    0,    0,    0,    0,    0,  185,

      185,  185,  185,  185,  185,  187,  187,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  187,  187,  187,  187,
      187,  187,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  195,  195,
      195,    0,  195,  195,  195,  195,  195,  195,  195,  195,
      196,    0,    0,    0,    0,    0,  196,  196,  196,  196,
      197,  197,  197,    0,  197,  197,  197,  197,  198,    0,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,

      199,  199,  199,    0,    0,  199,    0,  199,    0,  199,
      200,  200,  200,    0,    0,  200,    0,  200,    0,  200,
      201,    0,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  202,  202,    0,    0,    0,  202,  202,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  204,  204,  204,    0,  204,  204,  204,  204,  205,
      205,    0,    0,    0,  205,  205,  206,  206,    0,    0,
        0,  206,  206,  207,  207,    0,    0,    0,  207,  207,
      208,  208,    0,    0,    0,  208,  208,  209,  209,    0,
        0,    0,  209,  209,  210,  210,    0,    0,    0,  210,

      210,  211,  211,  211,    0,    0,    0,  211,  211,  212,
      212,    0,    0,    0,  212,  212,  213,  213,    0,    0,
        0,  213,  213,  214,  214,  214,    0,    0,    0,  214,
      214,  215,  215,    0,    0,    0,  215,  215,  216,  216,
        0,    0,    0,  216,  216,  217,  217,  217,    0,    0,
        0,  217,  217,  218,  218,  218,    0,    0,    0,  218,
      218,  219,  219,    0,    0,    0,  219,  219,  220,  220,
        0,    0,    0,  220,  220,  221,  221,    0,    0,    0,
      221,  221,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,

      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "csharp.l"
#define INITIAL 0
/*** 
 *** C# parser/scanner
 *** Copyright 2002 James Power, NUI Maynooth, Ireland <james.power@may.ie>
 *** This version: 19 Feb 2002
 ***
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of the <organization> nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY <copyright holder> ''AS IS'' AND ANY
* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL <copyright holder> BE LIABLE FOR ANY
* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ***/
#line 29 "csharp.l"
#include <string.h>
// #include "csharp.tab.h"
#include "y.tab.h"

  void lexical_error(const char *);
  static int token_for(const char *);
  static int is_allowed_char(const char );
  static SValue getValueInt(const char* text);
  static SValue getValueReal(const char* text);
  static SValue getValueChar(const char* text);
  static SValue getValueString(const char* text);
  static SValue getValueNull();
  static int getRank(const char* text);
#define YY_STACK_USED 1
#define IN_COMMENT 1
#define IN_GENERIC 2

#define IN_ATTRIB 3
#define IN_ACCESSOR 4
#define IN_GETSET 5
 
#line 659 "lexParser.inc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 102 "csharp.l"


#line 812 "lexParser.inc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 192 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 583 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 104 "csharp.l"
{ ; /* ignore */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 105 "csharp.l"
{ ; /* ignore */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 107 "csharp.l"
{ yy_push_state(IN_COMMENT); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 108 "csharp.l"
{ ; /* ignore */ }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 109 "csharp.l"
{ ; /* ignore */ }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 110 "csharp.l"
{ yy_pop_state();}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 112 "csharp.l"
{ ; /* ignore */ }
	YY_BREAK
/* yytext yylval.xxx */
case 8:
YY_RULE_SETUP
#line 115 "csharp.l"
{ yylval.value = getValueInt(yytext);		return INTEGER_LITERAL; 	}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 116 "csharp.l"
{ yylval.value = getValueReal(yytext);	return REAL_LITERAL; 		}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 117 "csharp.l"
{ yylval.value = getValueChar(yytext);	return CHARACTER_LITERAL; 	}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 118 "csharp.l"
{ yylval.value = getValueString(yytext);	return STRING_LITERAL; 		}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 120 "csharp.l"
{ return GT;	  }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 121 "csharp.l"
{ return COMMA; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 122 "csharp.l"
{ return LEFT_BRACKET; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 123 "csharp.l"
{ return RIGHT_BRACKET; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 125 "csharp.l"
{ yylval.tmpValue = getRank(yytext); printf("Rank : %s\n",yytext);return RANK_SPECIFIER; }
	YY_BREAK
/*** Multi-Character Operators ***/
case 17:
YY_RULE_SETUP
#line 128 "csharp.l"
{ return PLUSEQ;	}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 129 "csharp.l"
{ return MINUSEQ;	}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 130 "csharp.l"
{ return STAREQ;	}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 131 "csharp.l"
{ return DIVEQ;	}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 132 "csharp.l"
{ return MODEQ;	}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 133 "csharp.l"
{ return XOREQ;	}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 134 "csharp.l"
{ return ANDEQ;	}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 135 "csharp.l"
{ return OREQ;	}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 136 "csharp.l"
{ return LTLT;	}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 137 "csharp.l"
{ return GTGTEQ;	}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 138 "csharp.l"
{ return LTLTEQ;	}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 139 "csharp.l"
{ return EQEQ;	}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 140 "csharp.l"
{ return NOTEQ;	}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 141 "csharp.l"
{ return LEQ;		}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 142 "csharp.l"
{ return GEQ;		}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 143 "csharp.l"
{ return ANDAND;	}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 144 "csharp.l"
{ return OROR;	}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 145 "csharp.l"
{ return PLUSPLUS;	}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 146 "csharp.l"
{ return MINUSMINUS;	}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 147 "csharp.l"
{ return ARROW;	}
	YY_BREAK
/*** Those context-sensitive "keywords" ***/
case 37:
YY_RULE_SETUP
#line 152 "csharp.l"
{ return ASSEMBLY; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 153 "csharp.l"
{ return FIELD; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 154 "csharp.l"
{ return METHOD; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 155 "csharp.l"
{ return MODULE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 156 "csharp.l"
{ return PARAM; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 157 "csharp.l"
{ return PROPERTY; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 158 "csharp.l"
{ return TYPE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 160 "csharp.l"
{ return ADD; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 161 "csharp.l"
{ return REMOVE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 163 "csharp.l"
{ return GET; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 164 "csharp.l"
{ return SET; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 166 "csharp.l"
{ return token_for(yytext); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 167 "csharp.l"
{ yylval.text = strdup(yytext); return IDENTIFIER; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 170 "csharp.l"
{ 
        if (is_allowed_char(yytext[0])) return yytext[0];
        else lexical_error("invalid token"); 
      }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 174 "csharp.l"
ECHO;
	YY_BREAK
#line 1165 "lexParser.inc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(IN_COMMENT):
			case YY_STATE_EOF(IN_GENERIC):
			case YY_STATE_EOF(IN_ATTRIB):
			case YY_STATE_EOF(IN_ACCESSOR):
			case YY_STATE_EOF(IN_GETSET):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 192 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 192 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	*yy_state_ptr++ = yy_current_state;
	yy_is_jam = (yy_current_state == 191);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');
	if ( yy_current_buffer->yy_at_bol )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 174 "csharp.l"



static struct name_value {
  char *name;
  int value;
} name_value;
static struct name_value keywords [] = { 
 /* This list must remain sorted!!! */
    {"abstract", ABSTRACT},
    {"as", AS},
    {"base", BASE},
    {"bool", BOOL},
    {"break", BREAK},
    {"byte", BYTE},
    {"case", CASE},
    {"catch", CATCH},
    {"char", CHAR},
    {"checked", CHECKED},
    {"class", CLASS},
    {"const", CONST},
    {"continue", CONTINUE},
    {"decimal", DECIMAL},
    {"default", DEFAULT},
    {"delegate", DELEGATE},
    {"do", DO},
    {"double", DOUBLE},
    {"else", ELSE},
    {"enum", ENUM},
    {"event", EVENT},
    {"explicit", EXPLICIT},
    {"extern", EXTERN},
    {"false", FALSE},
    {"finally", FINALLY},
    {"fixed", FIXED},
    {"float", FLOAT},
    {"for", FOR},
    {"foreach", FOREACH},
    {"goto", GOTO},
    {"if", IF},
    {"implicit", IMPLICIT},
    {"in", IN},
    {"int", INT},
    {"interface", INTERFACE},
    {"internal", INTERNAL},
    {"is", IS},
    {"lock", LOCK},
    {"long", LONG},
    {"namespace", NAMESPACE},
    {"new", NEW},
    {"null", NULL_LITERAL},
    {"object", OBJECT},
    {"operator", OPERATOR},
    {"out", OUT},
    {"override", OVERRIDE},
    {"params", PARAMS},
    {"private", PRIVATE},
    {"protected", PROTECTED},
    {"public", PUBLIC},
    {"readonly", READONLY},
    {"ref", REF},
    {"return", RETURN},
    {"sbyte", SBYTE},
    {"sealed", SEALED},
    {"short", SHORT},
    {"sizeof", SIZEOF},
    {"stackalloc", STACKALLOC},
    {"static", STATIC},
    {"string", STRING},
    {"struct", STRUCT},
    {"switch", SWITCH},
    {"this", THIS},
    {"throw", THROW},
    {"true", TRUE},
    {"try", TRY},
    {"typeof", TYPEOF},
    {"uint", UINT},
    {"ulong", ULONG},
    {"unchecked", UNCHECKED},
    {"unsafe", UNSAFE},
    {"ushort", USHORT},
    {"using", USING},
    {"virtual", VIRTUAL},
    {"void", VOID},
    {"volatile", VOLATILE},
    {"while", WHILE},
  };    


/* Conduct a binary search for lexeme in the keywords array
 * between indices start (inclusive) and finish (exclusive)
 */
static int bin_search(const char *lexeme, int start, int finish)
{
  if (start >= finish)  /* Not found */
      return IDENTIFIER;
  else {
    int mid = (start+finish)/2;
    int cmp = strcmp(lexeme,keywords[mid].name);
    if (cmp == 0) 
      return keywords[mid].value;
    else if (cmp < 0)
      return bin_search(lexeme,start,mid);
    else
      return bin_search(lexeme,mid+1,finish);
  }
}

static int token_for(const char *lexeme)
{

  static int num_keywords = sizeof(keywords) / sizeof(name_value);
  int token = bin_search(lexeme,0,num_keywords);
  if (token == -1) {
    token = IDENTIFIER;
	yylval.text = strdup(lexeme); 
  } else if (token == NULL_LITERAL) {
	yylval.value = getValueNull();
  }
  return token;
}

static int is_allowed_char(const char c)
{
  static char allowed [] = {
    '.', ';', ':',
    '(', ')', '{', '}', '<', '>',
    '+', '-', '*', '/', '%', '&', '|', '!', '~', '^',
    '=', '?',
  };
  static int num_allowed = sizeof(allowed) / sizeof(char);
  int i;
  for (i=0; i<num_allowed; i++) {
    if (allowed[i]==c) 
      return 1;
  }
  return 0;
}

static SValue getValueInt(const char* text) {
	SValue v;
	int len = strlen(text);
	int mode = 0;
	if ((text[len-1]=='U') || (text[len-1]=='u')) {	mode |= 1;	}
	if ((text[len-1]=='L') || (text[len-1]=='l')) {	mode |= 2;	}

	if (mode) {
		if ((text[len-2]=='U') || (text[len-2]=='u')) {	mode |= 1;	}
		if ((text[len-2]=='L') || (text[len-2]=='l')) {	mode |= 2;	}
	}
		
	int hexaMode = 10;
	const char* p = text;
	if ((text[0] == '0') && (text[1] == 'x' || text[1]=='X')) {
		hexaMode = 16;
		p += 2; // Skip 0x
	}
	
	// We have a valid string anyway.
	long out = 0;
	do {
		int v = *p++;
		if (v >= '0' && v <= '9') {
			v -= '0';
		} else
		if (v >= 'A' && v <= 'F') {
			v -= 'A';
		} else
		if (v >= 'a' && v <= 'f') {
			v -= 'a';
		} else {
			// Reach end : char 0, U, L etc...
			break;
		}
		
		out = (out * hexaMode) + v;
	} while(1);
	
	switch (mode) {
	case 0:
		v.type	= TYPE_INT;
		v.v.i	= (int)out;
		break;
	case 1:
		v.type	= TYPE_UINT;
		v.v.ui	= (unsigned int)out;
		break;
	case 2:
		v.type	= TYPE_LONG;
		v.v.l	= (long)out;
		break;
	default:
	case 3:
		v.type	= TYPE_ULONG;
		v.v.ul	= (unsigned long)out;
		break;
	}
	return v;
}

static SValue getValueReal(const char* text) {
	SValue v;
	double d;
	char buff[70];	// Tmp buffer
	int strL = strlen(text);
	char c = text[strL-1];
	const char* ptrRead = text;
	int isFloat = 0;
	if ((c == 'F') || (c == 'f') || (c == 'D') || (c == 'd') || (c == 'M') || (c == 'm')) {
		if ((c == 'F') || (c == 'f')) {
			isFloat = 1;
		}
		memcpy(buff,text,strL-1);
		buff[strL] = 0;
		ptrRead = buff;
	}
	sscanf(ptrRead, "%lf", &d);
	if (isFloat) {
		v.type	= TYPE_DOUBLE;
		v.v.d	= d;
	} else {
		v.type	= TYPE_FLOAT;
		v.v.f	= (float)d;
	}
	return v;
}

static SValue getValueChar(const char* text) {
	SValue v;
	v.type	= TYPE_CHAR;
	const char* t = &text[1];
	u16 ch = 0;
	if (*t == '/') {
		switch (t[1]) {
		case 'U':
			compilerError(ERR_TODO, " Support complex unicode.");
		case 'u':
		case 'x':
		{
			int hexaMode = 16;
			// We have a valid string anyway.
			int out = 0;
			const char* p = &t[2];
			do {
				int v = *p++;
				if (v >= '0' && v <= '9') {
					v -= '0';
				} else
				if (v >= 'A' && v <= 'F') {
					v -= 'A';
				} else
				if (v >= 'a' && v <= 'f') {
					v -= 'a';
				} else {
					// Reach end : char 0, ' etc...
					break;
				}
				
				out = (out * hexaMode) + v;
			} while(1);
			// Read 4 hex char
			ch = out;
		}	break;
		case 'a':	ch = 0x0007;	break;
		case 'b':	ch = 0x0008;	break;
		case 'f':	ch = 0x000C;	break;
		case 'n':	ch = 0x000A;	break;
		case 'r':	ch = 0x000D;	break;
		case 't':	ch = 0x0009;	break;
		case 'v':	ch = 0x000B;	break;
		case '0':	ch = 0;			break;
		case '\'':	ch = 0x0027;	break;
		case '\"':	ch = 0x0022;	break;
		case '\\':	ch = 0x005C;	break;
		default:
			compilerError(ERR_INVALID_CHAR, "Invalid Char sequence /%c .", t[1]);
		}
	} else {
		if (*t >= 128) {
			compilerError(ERR_TODO, " Support UTF8 -> Unicode.");
		} else {
			ch = *t;
		}
	}
	v.v.i = ch;
	return v;
}

static SValue getValueString(const char* text) {
	SValue v;
	v.type	= TYPE_STRING;
	v.v.str	= text;		// For now UTF8 as is.
	return v;
}

static int getRank(const char* text) {
	int res = 1;
	while (*text != 0) {
		if (*text == ',') {
			res++;
		}
		text++;
	}
	return res;
}

static SValue getValueNull() {
	SValue v;
	v.type	= TYPE_NULL;
	return v;
}


void lexical_error(const char *msg)
{
  fprintf(stderr,"%d:lexical error (%s) [%s]\n",yylineno,msg,yytext);
}


/*** Switch on/off context-sensitive "keywords" ***/
/* I don't like it any more than you do.  */

void lex_in_generic(void) {
}
void lex_out_generic(void) {
}
void lex_enter_attrib(void)
{
  yy_push_state(IN_ATTRIB);
}
void lex_exit_attrib(void)
{
  yy_pop_state();
}
void lex_enter_accessor(void)
{
  yy_push_state(IN_ACCESSOR);
}
void lex_exit_accessor(void)
{
  yy_pop_state();
}
void lex_enter_getset(void)
{
  yy_push_state(IN_GETSET);
}
void lex_exit_getset(void)
{
  yy_pop_state();
}
